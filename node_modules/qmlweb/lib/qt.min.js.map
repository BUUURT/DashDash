{"version":3,"sources":["qt.min.js","qt.js","QMLBoolean.js","QMLInteger.js","QMLList.js","QMLNumber.js","QMLString.js","QMLUrl.js","QMLVariant.js","getset.js","import.js","jsparser.js","modules.js","properties.js","qmlstructure.js","QmlWeb.js","QObject.js","JSItemModel.js","QColor.js","QSizeF.js","Signal.js","Qt.js","QMLBinding.js","QMLEngine.js","QMLOperationState.js","QMLProperty.js","AutoLoader.js","easing.js","helpers.js","keyboard.js","qrc.js","QmlWeb.Dom/DomElement.js","QmlWeb/RestModel.js","Qt.labs.settings/Settings.js","QtGraphicalEffects/FastBlur.js","QtMobility/GeoLocation.js","QtMultimedia/Video.js","QtQml/Binding.js","QtQml/Component.js","QtQml/Connections.js","QtQml/QtObject.js","QtQml/Timer.js","QtQuick.Controls/Button.js","QtQuick.Controls/Checkbox.js","QtQuick.Controls/ComboBox.js","QtQuick.Controls/ScrollView.js","QtQuick.Controls/TextArea.js","QtQuick.Controls/TextField.js","QtQuick.Window/Screen.js","QtQuick/AnimatedImage.js","QtQuick/Animation.js","QtQuick/Behavior.js","QtQuick/BorderImage.js","QtQuick/Canvas.js","QtQuick/Column.js","QtQuick/DoubleValidator.js","QtQuick/Flow.js","QtQuick/Font.js","QtQuick/FontEnum.js","QtQuick/FontLoader.js","QtQuick/Grid.js","QtQuick/Image.js","QtQuick/IntValidator.js","QtQuick/Item.js","QtQuick/ListElement.js","QtQuick/ListModel.js","QtQuick/ListView.js","QtQuick/Loader.js","QtQuick/MouseArea.js","QtQuick/NumberAnimation.js","QtQuick/ParallelAnimation.js","QtQuick/Positioner.js","QtQuick/PropertyAnimation.js","QtQuick/PropertyChanges.js","QtQuick/Rectangle.js","QtQuick/RegExpValidator.js","QtQuick/Repeater.js","QtQuick/Rotation.js","QtQuick/Row.js","QtQuick/Scale.js","QtQuick/SequentialAnimation.js","QtQuick/State.js","QtQuick/SystemPalette.js","QtQuick/Text.js","QtQuick/TextEdit.js","QtQuick/TextInput.js","QtQuick/Transition.js","QtQuick/Translate.js","QtWebSockets/WebSocket.js"],"names":["global","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_classCallCheck","instance","Constructor","QMLBoolean","val","QMLInteger","QMLList","meta","list","object","parent","context","QmlWeb","QMLMetaElement","QMLNumber","QMLString","QMLUrl","engine","$resolvePath","QMLVariant","setupGetter","obj","propName","func","get","setupSetter","set","setupGetterSetter","getter","setter","getUrlContents","url","skipExceptions","urlContentCache","xhr","XMLHttpRequest","e","status","console","readQmlDir","makeurl","path","indexOf","qmldirFileUrl","parsedUrl","$parseURI","qmldir","scheme","internals","externals","undefined","lines","split","line","replace","match","importJavascriptInContext","jsData","$context","source","Function","exports","map","sym","join","registerGlobalQmlType","name","type","modules","registerQmlType","options","baseClass","_ret","baseModule","baseName","dot","lastIndexOf","found","filter","descr","baseId","dependants","hasOwnProperty","v","_typeof","descriptor","module","versions","enums","signals","defaultProperty","properties","moduleDescriptor","inherit","id","opt","getConstructor","moduleName","version","test","getModuleConstructors","constructors","loadImports","imports","mergeObjects","helpers","Main","row","_imports$i","_slicedToArray","moduleVersion","moduleAlias","moduleConstructors","perImportContextConstructors","oldProto","callSuper","info","$qmlTypeInfo","desc","params","construct","item","importContextId","classComponents","$class","ci","c","_constructor","qdirInfo","qmldirs","filePath","qualified","qualifiedImportPath","component","Qt","createComponent","Error","dom","createProperty","arguments","QMLProperty","prop","$properties","readOnly","$canEditReadOnlyProperties","$isComponentRoot","applyProperties","metaObject","objectScopeIn","componentScope","objectScope","$children","$defaultProperty","signalName","toLowerCase","slice","connectSignal","$setCustomSlot","applyProperty","$setCustomData","QMLSignalDefinition","QMLMethod","QMLAliasDefinition","this","objectName","propertyName","con","targetProp","loopWatchdog","_len7","args","_key7","_len8","_key8","QMLPropertyDefinition","QMLMetaPropertyGroup","connect","compiled","j","parameters","slot","eval","convertToEngine","tree","walk","stringifyDots","elem","sub","applyProp","curr","loadParser","parse","tags","document","getElementsByTagName","src","responseText","parseQML","file","parsetree","QmlDocument","sliceIterator","_arr","_n","_d","_e","_s","_i","Symbol","iterator","next","done","push","err","_createClass","defineProperties","target","props","defineProperty","key","protoProps","staticProps","objectIds","QObject","$parent","$tidyupList","$signals","objectId","$Component","destruction","$delete","index","splice","disconnect","JSItemModel","roleNames","Signal","dataChanged","signal","rowsInserted","rowsMoved","rowsRemoved","modelReset","names","QColor","$value","rgb","Math","round","toString","substr","$colors","$colorsCount","comparableColorsLimit","QSizeF","_QmlWeb$QObject","width","height","_this","getPrototypeOf","_this2","connectedSlots","execute","apply","bind","isConnected","_len","_key","QueuedConnection","AutoConnection","_len2","_key2","UniqueConnection","thisObj","String","$connectNotify","_len3","_key3","callType","_connectedSlots$i","$disconnectNotify","_len4","_key4","_connectedSlots$i2","_len5","_key5","concat","$queued","setImmediate","queued","rgba","intr","r","intg","g","intb","b","a","hsla","inth","h","ints","s","intl","l","openUrlExternally","page","window","open","loadComponent","nameIsUrl","moreDirs","importSearchPaths","executionContext","QMLComponent","createQmlObject","resolvedFile","resolvedUrl","createObject","QMLOperationState","operationState","Init","Idle","qmlUrl","size","LeftButton","RightButton","MiddleButton","NoModifier","ShiftModifier","ControlModifier","AltModifier","MetaModifier","KeypadModifier","LeftToRight","RightToLeft","Vertical","Horizontal","Key_Escape","Key_Tab","Key_Backtab","Key_Backspace","Key_Return","Key_Enter","Key_Insert","Key_Delete","Key_Pause","Key_Print","Key_SysReq","Key_Clear","Key_Home","Key_End","Key_Left","Key_Up","Key_Right","Key_Down","Key_PageUp","Key_PageDown","Key_Shift","Key_Control","Key_Meta","Key_Alt","Key_AltGr","Key_CapsLock","Key_NumLock","Key_ScrollLock","Key_F1","Key_F7","Key_F12","Key_F17","Key_F22","Key_F25","Key_F31","Key_Super_L","Key_Super_R","Key_Menu","Key_Hyper_L","Key_Hyper_R","Key_Help","Key_Direction_L","Key_Direction_R","Key_Space","Key_Any","Key_Exclam","Key_QuoteDbl","Key_NumberSign","Key_Dollar","Key_Percent","Key_Ampersant","Key_Apostrophe","Key_ParenLeft","Key_ParenRight","Key_Asterisk","Key_Plus","Key_Comma","Key_Minus","Key_Period","Key_Slash","Key_0","Key_5","Key_Colon","Key_Semicolon","Key_Less","Key_Equal","Key_Greater","Key_Question","Key_At","Key_A","Key_H","Key_O","Key_V","Key_BracketLeft","Key_Backslash","Key_BracketRight","Key_AsciiCircum","Key_Underscore","Key_QuoteLeft","Key_BraceLeft","Key_Bar","Key_BraceRight","Key_AsciiTilde","Key_Back","Key_Forward","Key_Stop","Key_VolumeDown","Key_VolumeUp","Key_VolumeMute","Key_multiply","Key_add","Key_substract","Key_divide","Key_News","Key_OfficeHome","Key_Option","Key_Paste","Key_Phone","Key_Calendar","Key_Reply","Key_Reload","Key_RotateWindows","Key_RotationPB","Key_RotationKB","Key_Save","Key_Send","Key_Spell","Key_SplitScreen","Key_Support","Key_TaskPane","Key_Terminal","Key_Tools","Key_Travel","Key_Video","Key_Word","Key_Xfer","Key_ZoomIn","Key_ZoomOut","Key_Away","Key_Messenger","Key_WebCam","Key_MailForward","Key_Pictures","Key_Music","Key_Battery","Key_Bluetooth","Key_WLAN","Key_UWB","Key_AudioForward","Key_AudioRepeat","Key_AudioRandomPlay","Key_Subtitle","Key_AudioCycleTrack","Key_Time","Key_Hibernate","Key_View","Key_TopMenu","Key_PowerDown","Key_Suspend","Key_ContrastAdjust","Key_MediaLast","Key_unknown","Key_Call","Key_Camera","Key_CameraFocus","Key_Context1","Key_Context2","Key_Context3","Key_Context4","Key_Flip","Key_Hangup","Key_No","Key_Select","Key_Yes","Key_ToggleCallHangup","Key_VoiceDial","Key_LastNumberRedial","Key_Execute","Key_Printer","Key_Play","Key_Sleep","Key_Zoom","Key_Cancel","AlignLeft","AlignRight","AlignHCenter","AlignJustify","AlignTop","AlignBottom","AlignVCenter","AlignCenter","AlignBaseline","AlignAbsolute","AlignLeading","AlignTrailing","AlignHorizontal_Mask","AlignVertical_Mask","PrimaryOrientation","PortraitOrientation","LandscapeOrientation","InvertedPortraitOrientation","InvertedLandscapeOrientation","ArrowCursor","UpArrowCursor","CrossCursor","WaitCursor","IBeamCursor","SizeVerCursor","SizeHorCursor","SizeBDiagCursor","SizeFDiagCursor","SizeAllCursor","BlankCursor","SplitVCursor","SplitHCursor","PointingHandCursor","ForbiddenCursor","WhatsThisCursor","BusyCursor","OpenHandCursor","ClosedHandCursor","DragCopyCursor","DragMoveCursor","DragLinkCursor","LastCursor","BitmapCursor","CustomCursor","ScrollBarAsNeeded","ScrollBarAlwaysOff","ScrollBarAlwaysOn","QMLBinding","isFunction","deps","basePath","impl","trim","bindSrc","geometryProperties","QMLEngine","element","fps","$interval","floor","running","rootElement","components","js","completedSignals","bindedProperties","pendingOperations","rootObject","$basePath","userAddedModulePaths","userAddedImportPaths","_tickers","_lastTick","Date","now","_whenStop","_whenStart","$initKeyboard","QMLBaseObject","getAttachedObject","Running","_tickerId","setInterval","_tick","forEach","callback","clearInterval","leadingSlash","segments","out","pos","segment","pop","parentComponent","$basePathA","createElement","href","extractBasePath","fileName","extractFileName","loadQMLTree","$imports","$createObject","$initializePropertyBindings","start","callCompletedSignals","dirpath","qualifier","componentImportPaths","paths","unqualified","arrayOfDirs","dirPath","dependantProperties","evaluatingProperty","newVal","importsArray","currentFileDir","qmldirsContents","loadImport","entry","nameIsQualifiedModuleName","nameIsDir","content","probableDirs","importPathList","diredName","k","addComponentImportPath","attrname","rootContext","activeFocus","_this3","focusedElement","event","eventToKeyboard","eventName","keyboardSignals","accepted","backup","elapsed","ticker","uri","qrc","jsparse","f","t","property","shift","binding","needsUpdate","changed","$updateHGeometry","$updateVGeometry","$initializeAliasSignals","authority","basePathURI","fileURL","op","handler","animation","qmlList","_QMLComponent","plainType","oldVal","compile","$setVal","componentScopeBasePath","$actions","to","restart","update","$get","reason","ReasonAnimation","ReasonInit","typeInitialValues","ReasonUser","$syncPropertyToRemote","evaluatingPropertyStack","int","real","double","string","bool","enum","metaTags","metaTag","getAttribute","Easing","Linear","InQuad","InCubic","InQuart","InQuint","InSine","InExpo","InCirc","InElastic","InBack","InBounce","pow","OutQuad","InOutQuad","OutInQuad","OutCubic","InOutCubic","OutInCubic","OutQuart","InOutQuart","OutInQuart","OutQuint","InOutQuint","OutInQuint","cos","PI","OutSine","sin","InOutSine","OutInSine","OutExpo","InOutExpo","OutInExpo","sqrt","OutCirc","InOutCirc","OutInCirc","amplitude","period","asin","OutElastic","InOutElastic","OutInElastic","overshoot","OutBack","InOutBack","OutInBack","OutBounce","InOutBounce","OutInBounce","QmlWebHelpers","array","findIndex","merged","_len6","_key6","arg","keyCode","shiftKey","count","isAutoRepeat","modifiers","text","qtName","toUpperCase","prefix","color","variant","var","importContextIds","_QmlWeb$QMLBinding","objName","onProp","$on","toplevel","qmlelem","statements","statement","qmlprop","bindout","qmlobjdef","qmlobj","qmlmethod","qmlpropdef","qmlaliasdef","qmlsignaldef","qmldefaultprop","num","isList","hasBinding","walker","walkers","log","JSON","stringify","tagName","_class","isLoading","mimeType","queryMimeType","initialValue","fetched","saved","_class2","attributes","getAttributes","runningRequests","_this5","$ajax","method","success","$xhrReadResponse","_this6","destroy","$sendToServer","_this7","body","$objectToUrlEncoded","parts","ekey","$myEncodeURIComponent","evalue","str","encodeURIComponent","charCodeAt","_this8","readyState","DONE","responseObject","$updatePropertiesFromResponseObject","$hasProperty","category","_class3","localStorage","Component","completed","Component$onCompleted","$loadProperties","$initializeProperties","attrName","_this9","$attributes","$getKey","getItem","_this10","emitter","radius","_class4","$previousSource","$filterObject","radiusChanged","$onRadiusChanged","sourceChanged","$onSourceChanged","$updateEffect","transformType","operation","transform","$updateTransform","$updateFilterObject","accuracy","altitude","altitudeAccuracy","heading","latitude","longitude","speed","timestamp","label","_class5","_this11","navigator","geolocation","$updatePosition","position","coords","MediaPlayer","NoError","AccessDenied","StoppedState","NoMedia","EndOfMedia","VideoOutput","duration","autoPlay","muted","volume","playbackRate","playbackState","fillMode","error","paused","playing","stopped","_class6","_this12","$runningEventListener","style","margin","appendChild","addEventListener","PlayingState","PausedState","currentTime","buffered","progress","end","Buffering","Buffered","Stalled","Loading","NetworkError","ResourceError","autoPlayChanged","$onAutoPlayChanged","positionChanged","$onPositionChanged","volumeChanged","$onVolumeChanged","playbackRateChanged","$onPlaybackRateChanged","mutedChanged","$onMutedChanged","fillModeChanged","$onFillModeChanged","autoplay","extension","mime","mimetypeFromExtension","canPlayType","FormatError","newValue","$volulmeBackup","$volumeBackup","Stretch","objectFit","PreserveAspectFit","PreserveAspectCrop","pause","play","offset","mimetypes","ogg","ogv","ogm","mp4","webm","when","_class7","$property","valueChanged","$onValueChanged","targetChanged","$updateBinding","propertyChanged","whenChanged","QMLContext","_this13","$metaObject","$jsImports","moduleImports","importDesc","finalizeImports","loadJS","oldState","bp","newContext","isComponentRoot","QMLItem","ignoreUnknownSignals","_class8","$connections","$old_target","$onTargetChanged","$reconnectTarget","old_target","_currentConnection","_QmlWeb$QObject2","_class9","_this14","Keys","asteriskPresed","backPressed","backtabPressed","callPressed","cancelPressed","deletePressed","escapePressed","flipPressed","hangupPressed","leftPressed","menuPressed","noPressed","pressed","released","returnPressed","rightPressed","selectPressed","spacePressed","tabPressed","upPressed","volumeDownPressed","volumeUpPressed","yesPressed","interval","repeat","triggeredOnStart","triggered","_class10","_this15","runningChanged","$onRunningChanged","$ticker","stop","$prevTrigger","$trigger","enabled","clicked","_class11","_this16","textChanged","$onTextChanged","enabledChanged","$onEnabledChanged","button","implicitWidth","offsetWidth","implicitHeight","offsetHeight","textContent","disabled","checked","_class12","_this17","pointerEvents","checkbox","span","QMLFont","font","colorChanged","$onColorChanged","checkedChanged","$onCheckedChanged","children","innerHTML","currentIndex","currentText","menu","model","activated","_class13","_this18","modelChanged","$onModelChanged","onclick","firstChild","selectedIndex","entries","elt","$updateImpl","contentItem","flickableItem","viewport","frameVisible","highlightOnFocus","verticalScrollBarPolicy","horizontalScrollBarPolicy","_class14","css","setupFocusOnDom","contentItemChanged","$onContentItemChanged","flickableItemChanged","$onFlickableItemChanged","viewportChanged","$onViewportChanged","frameVisibleChanged","$onFrameVisibleChanged","highlightOnFocusChanged","$onHighlightOnFocusChanged","horizontalScrollBarPolicyChanged","$onHorizontalScrollBarPolicyChanged","verticalScrollBarPolicyChanged","$onVerticalScrollBarPolicyChanged","styleChanged","$onStyleChanged","childrenChanged","$onChildrenChanged","focusChanged","$onFocusChanged","newItem","focus","outline","highlight","visible","border","newPolicy","overflowX","$scrollBarPolicyToCssOverflow","overflowY","policy","_class15","textarea","TextInput","maximumLength","validator","echoMode","_class16","_this19","input","echoModeChanged","$onEchoModeChanged","maximumLengthChanged","$onMaximumLengthChanged","readOnlyChanged","$onReadOnlyChanged","Keys$onPressed","$updateValue","Normal","Password","NoEcho","PasswordEchoOnEdit","maxLength","submit","$testValidator","validate","orientation","orientationUpdateMask","primaryOrientation","pixelDensity","devicePixelRatio","desktopAvailableHeight","desktopAvailableWidth","_class17","outerHeight","outerWidth","innerHeight","innerWidth","_class18","Animation","alwaysRunToEnd","loops","_class19","_class20","animationChanged","$onAnimationChanged","BorderImage","Null","smooth","horizontalTileMode","verticalTileMode","_class21","_this20","bg","$img","Image","Ready","leftChanged","$updateBorder","rightChanged","topChanged","bottomChanged","horizontalTileModeChanged","verticalTileModeChanged","smoothChanged","$onSmoothChanged","imageURL","$resolveImageURL","complete","_border","right","left","top","bottom","available","canvasSize","canvasWindow","contextType","renderStrategy","renderTarget","tileSize","imageLoaded","paint","painted","_class22","image","isImageLoaded","area","_class23","curPos","maxWidth","child","spacing","DoubleValidator","decimals","notation","_class24","$standardRegExp","$scientificRegExp","ScientificNotation","StandardNotation","number","exec","regExp","getRegExpForNotation","parseFloat","$getDecimalsForNumber","Flow","flow","layoutDirection","_class25","flowChanged","layoutChildren","layoutDirectionChanged","widthChanged","heightChanged","curHPos","curVPos","rowSize","$isUsingImplicitWidth","$isUsingImplicitHeight","_QmlWeb$QObject3","_class26","_this21","Font","$sizeLock","boldChanged","$onBoldChanged","capitalizationChanged","$onCapitalizationChanged","familyChanged","$onFamilyChanged","italicChanged","$onItalicChanged","letterSpacingChanged","$onLetterSpacingChanged","pixelSizeChanged","$onPixelSizeChanged","pointSizeChanged","$onPointSizeChanged","strikeoutChanged","$onStrikeoutChanged","underlineChanged","$onUnderlineChanged","weightChanged","$onWidthChanged","wordSpacingChanged","$onWordSpacingChanged","weight","Bold","pointSize","fontSize","pixelSize","Thin","ExtraLight","Light","Medium","DemiBold","ExtraBold","Black","capitalization","AllUppercase","AllLowercase","Capitalize","MixedCase","SmallCaps","FontLoader","_class27","$domStyle","$lastName","$inTouchName","$timeouts","nameChanged","$onNameChanged","fontName","_this22","fontLoader","fontsLoaded","notLoadedFontFamilies","fontLoaded","fontFamily","$cycleTouchName","_this23","setTimeout","font_src","rand","random","$loadFont","Grid","columns","rows","_class28","columnsChanged","rowsChanged","visibleItems","$getVisibleItems","_$calculateSize","$calculateSize","_$calculateSize2","_$calculateGrid","$calculateGrid","_$calculateGrid2","colWidth","rowHeight","step","startingPoint","endPoint","_i2","_j","_item","gridWidth","gridHeight","_i3","_i4","cols","_i5","_j2","_item2","Tile","asynchronous","cache","mirror","_class29","_this24","sourceSize","w","naturalWidth","naturalHeight","mirrorChanged","$onMirrorChanged","TileVertically","TileHorizontally","backgroundImage","$updateFillMode","transformRule","_class30","acceptable","parseInt","$opacity","state","states","transitions","data","resources","x","y","z","horizontalCenter","verticalCenter","rotation","scale","opacity","clip","_class31","_this25","overflow","classComponent","className","boxSizing","parentChanged","$onParentChanged_","$onDataChanged","stateChanged","$onStateChanged","visibleChanged","$onVisibleChanged_","clipChanged","$onClipChanged","zChanged","$onZChanged","xChanged","$onXChanged","yChanged","$onYChanged","$onWidthChanged_","$onHeightChanged_","$onFocusChanged_","implicitWidthChanged","$onImplicitWidthChanged","implicitHeightChanged","$onImplicitHeightChanged","anchors","horizontalCenterChanged","verticalCenterChanged","fillChanged","centerInChanged","leftMarginChanged","rightMarginChanged","topMarginChanged","bottomMarginChanged","marginsChanged","childrenRect","rotationChanged","scaleChanged","transformChanged","Component$onCompleted_","opacityChanged","$calculateOpacity","$opacityChanged","$revertActions","updateQmlGeometry","newParent","oldParent","newData","newState","actions","_i6","action","changes","$getAllChanges","_i7","$applyChange","_i8","_action","_i9","_action2","explicit","transition","rating","_i10","$stop","curTransition","curRating","reversible","change","_this26","arrayFindIndex","_loop","origValue","actionIndex","revertIndex","restoreEntryValues","visibility","qmlFocus","_this27","updateFocus","hasFocus","activeElement","QMLTranslate","QMLRotation","QMLScale","transformStyle","ax","axis","webkitTransform","webkitTransformStyle","msTransform","webkitFilter","parentOpacity","$updatingHGeometry","flags","lM","leftMargin","margins","rM","rightMargin","u","fill","centerIn","leftProp","$updateChildrenRect","$updatingVGeometry","tM","topMargin","bM","bottomMargin","topProp","maxHeight","minX","minY","_class32","$items","_class33","_this28","$firstItem","$itemsChanged","$on$itemsChanged","$model","role","rowCount","QMLListElement","dict","setRoleNames","n","vals","_class34","$styleChanged","delegateChanged","orientationChanged","spacingChanged","_childrenInserted","$applyStyleOnItem","$item","active","sourceComponent","loaded","_class35","$sourceUrl","activeChanged","$onActiveChanged","sourceComponentChanged","$onSourceComponentChanged","$updateGeometry","$unload","qmlComponent","loadedComponent","$createComponentObject","$callOnCompleted","newComponent","acceptedButtons","hoverEnabled","mouseX","mouseY","containsMouse","pressedButtons","cursorShape","entered","exited","_class36","_this29","backgroundColor","cursorShapeChanged","$onCursorShapeChanged","$handleClick","handleMouseUp","mouse","$eventToMouse","cursor","$cursorShapeToCSS","_class37","_this30","$at","$loop","_action3","$redoActions","_action4","easing","$valueForProgress","$startLoop","_action5","animations","_class38","_this31","$runningAnimations","animationsChanged","$onAnimationsChanged","_class39","targets","_class40","$ease","$props","$targets","$redoTargets","targetsChanged","$redoProperties","propertiesChanged","matches","_class41","_class42","$borderActive","border$onColorChanged","border$onWidthChanged","borderColor","borderRadius","max","_class43","delegate","_class44","$completed","$onDelegateChanged","$onParentChanged","$applyModel","QMLListModel","$getModel","$removeChildren","$insertChildren","startIndex","endIndex","roles","_item3","sourceStartIndex","sourceEndIndex","destinationIndex","smallestChangedIndex","_i11","modelData","roleName","container","_i12","removed","$removeChildProperties","angle","_class45","origin","angleChanged","$updateOrigin","_class46","xScale","yScale","_class47","xScaleChanged","yScaleChanged","_class48","_this32","$onAnimatonsChanged","proceed","$curIndex","anim","$passedLoops","$nextAnimation","extend","_class49","$onWhenChanged","_this33","base","platformsDetectors","regexp","systemPalettes","SystemPalette","Active","alternateBase","buttonText","dark","highlightedText","light","mid","midlight","shadow","windowText","colorGroup","_class50","colorGroupChanged","$onColorGroupChanged","$platform","userAgent","_this34","pallete","highlightText","inactive","Text","NoWrap","WrapAtWordBoundaryOrAnywhere","lineHeight","wrapMode","horizontalAlignment","styleColor","_class51","fc","textAlign","lineHeightChanged","$onLineHeightChanged","wrapModeChanged","$onWrapModeChanged","horizontalAlignmentChanged","$onHorizontalAlignmentChanged","styleColorChanged","$onStyleColorChanged","family","$onFontChanged","$updateImplicit","$updateShadow","WordWrap","WrapAnywhere","Wrap","$updateJustifyWhiteSpace","textStyle","activeFocusOnPress","baseUrl","canPaste","canRedo","canUndo","contentHeight","contentWidth","cursorDelegate","cursorPosition","cursorRectangle","cursorVisible","effectiveHorizontalAlignment","hoveredLink","inputMethodComposing","inputMethodHints","lineCount","mouseSelectionMode","persistentSelection","renderType","selectByKeyboard","selectByMouse","selectedText","selectedTextColor","selectionColor","selectionEnd","selectionStart","textDocument","textFormat","textMargin","verticalAlignment","linkActivated","linkHovered","_class52","_this35","undoStack","undoStackPosition","redoStack","redoStackPosition","$getLineCount","$updateCss","supported","o","_class53","_this36","_class54","_action6","_class55","WebSocket","errorString","textMessageReceived","_class56","$socket","$reconnect","statusChanged","$onStatusChanged","$reconnectSocket","urlChanged","_this37","Connecting","onopen","Open","onclose","Closed","$connectSocket","onerror","message","onmessage","Closing","close","send"],"mappings":"CAAE,SAASA,GCQX,QAAAC,GAAAC,GAAA,GAAAC,MAAAC,QAAAF,GAAA,CAAA,IAAA,GAAAG,GAAA,EAAAC,EAAAH,MAAAD,EAAAK,QAAAF,EAAAH,EAAAK,OAAAF,IAAAC,EAAAD,GAAAH,EAAAG,EAAA,OAAAC,GAAA,MAAAH,OAAAK,KAAAN,GAEA,QAAAO,GAAAC,EAAAC,GAAA,IAAAD,EAAA,KAAA,IAAAE,gBAAA,4DAAA,QAAAD,GAAA,gBAAAA,IAAA,kBAAAA,GAAAD,EAAAC,EAEA,QAAAE,GAAAC,EAAAC,GAAA,GAAA,kBAAAA,IAAA,OAAAA,EAAA,KAAA,IAAAC,WAAA,iEAAAD,GAAAD,GAAAG,UAAAC,OAAAC,OAAAJ,GAAAA,EAAAE,WAAAG,aAAAC,MAAAP,EAAAQ,YAAA,EAAAC,UAAA,EAAAC,cAAA,KAAAT,IAAAG,OAAAO,eAAAP,OAAAO,eAAAX,EAAAC,GAAAD,EAAAY,UAAAX,GAEA,QAAAY,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAb,WAAA,qCCdA,QAAAc,GAAAC,GACA,QAAAA,ECDA,QAAAC,GAAAD,GACA,MAAA,GAAAA,ECDA,QAAAE,GAAAC,GACA,GAAAC,KACA,IAAAD,EAAAE,iBAAAjC,OACA,IAAA,GAAAE,KAAA6B,GAAAE,OACAD,EAAAA,KAAAA,EAAAA,WACAC,OAAAA,EAAAA,OAAAA,GACAC,OAAAA,EAAAA,OACAC,QAAAA,EAAAA,eAGAJ,GAAAE,iBAAAG,GAAAC,gBACAL,EAAAA,KAAAA,EAAAA,WACAC,OAAAA,EAAAA,OACAC,OAAAA,EAAAA,OACAC,QAAAA,EAAAA,UAIA,OAAAH,GClBA,QAAAM,GAAAV,GACA,OAAAA,ECDA,QAAAW,GAAAX,GACA,MAAA,GAAAA,ECDA,QAAAY,GAAAZ,GACA,MAAAQ,GAAAK,OAAAC,aAAA,GAAAd,GCDA,QAAAe,GAAAf,GACA,MAAAA,GCCA,QAAAgB,GAAAC,EAAAC,EAAAC,GACAhC,OAAAA,eAAAA,EAAAA,GACAiC,IAAAA,EACA3B,cAAAA,EACAF,YAAAA,IAIA,QAAA8B,GAAAJ,EAAAC,EAAAC,GACAhC,OAAAA,eAAAA,EAAAA,GACAmC,IAAAA,EACA7B,cAAAA,EACAF,YAAAA,IAIA,QAAAgC,GAAAN,EAAAC,EAAAM,EAAAC,GACAtC,OAAAA,eAAAA,EAAAA,GACAiC,IAAAA,EACAE,IAAAA,EACA7B,cAAAA,EACAF,YAAAA,ICaA,QAAAmC,GAAAC,EAAAC,GACA,GAAA,mBAAApB,GAAAqB,gBAAAF,GAAA,CACA,GAAAG,GAAA,GAAAC,eAGA,IAFAD,EAAAA,KAAAA,MAAAA,GAAAA,GAEAF,EACA,IACAE,EAAAA,KAAAA,MACA,MAAAE,GACA,OAAA,MAKAF,GAAAA,KAAAA,KAGA,IAAA,MAAAA,EAAAG,QAAA,IAAAH,EAAAG,OAEA,MADAC,SAAAA,IAAAA,cAAAA,EAAAA,YAAAA,EAAAA,aAAAA,IACA,CAEA1B,GAAAA,gBAAAA,GAAAA,EAAAA,aAEA,MAAAA,GAAAqB,gBAAAF,GAgCA,QAAAQ,GAAAR,GAwBA,QAAAS,GAAAC,GACA,MAAAA,GAAAC,QAAA,OAAA,EACAD,EAEAV,EAAA,IAAAU,EAzBA,GAAAE,GAAAZ,EAAAnD,OAAA,EAAAmD,EAAA,UAAA,SAEAa,EAAAhC,EAAAK,OAAA4B,UAAAF,GAEAG,EAAA,MAEAA,GADA,WAAAF,EAAAG,OACAD,EAAAA,IAAAA,EAAAA,MAEAA,EAAAA,GAAAA,IAAAA,MAGA,IAAAE,MACAC,IAEA,IAAAC,SAAAJ,EACA,OAAA,CAcA,KAAA,GADAK,GAAAL,EAAAM,MAAA,SACA1E,EAAA,EAAAA,EAAAyE,EAAAvE,OAAAF,IAAA,CAEA,GAAA2E,GAAAF,EAAAzE,GAAA4E,QAAA,aAAA,GACA,IAAAD,EAAAzE,QAAA,MAAAyE,EAAA,GAAA,CAIA,GAAAE,GAAAF,EAAAD,MAAA,MACA,KAAAG,EAAA3E,QAAA,IAAA2E,EAAA3E,OACA,WAAA2E,EAAA,GACAjB,QAAAA,IAAAA,EAAAA,uCACA,aAAAiB,EAAA,GACAP,EAAAA,EAAAA,KAAAA,IAAAA,EAAAA,EAAAA,KACA,IAAAO,EAAA3E,OACAqE,EAAAA,EAAAA,KAAAA,IAAAA,EAAAA,EAAAA,KAEAA,EAAAA,EAAAA,KAAAA,IAAAA,EAAAA,EAAAA,IAAAA,QAAAA,EAAAA,IAGAX,QAAAA,IAAAA,EAAAA,gBAAAA,IAGA,OAAAU,UAAAA,EAAAC,UAAAA,GCjJA,QAAAO,GAAAC,EAAAC,GAEA,GAAAC,GAAAF,EAAAE,OAAAL,QAAA,2BAAA,KAEA,IAAAM,UAAA,SAAA,WAAA,+CAAAD,EAAA,gBAAAF,EAAAI,QAAAC,IAAA,SAAAC,GAIA,MAAA,YAAAA,EAAA,MAAAA,EAAA,MAAAC,KAAA,IAAA,QAAAP,EAAAC,GCmBA,QAAAO,GAAAC,EAAAC,GACAvD,EAAAA,EAAAA,MAAAA,EACAA,EAAAA,aAAAA,GAAAA,EACAwD,EAAAA,KAAAA,GAAAA,EAIA,QAAAC,GAAAC,EAAA7E,GAKA,GAJAyD,SAAAzD,IACA6E,EAAAA,YAAAA,GAGA,gBAAAA,GAAAC,UAAA,CAAA,GAAAC,GAAA,WAEA,GAAAC,GAAA,OACAC,EAAA,OACAC,EAAAL,EAAAC,UAAAK,YAAA,IACAD,SACAF,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,YAEAD,EAAAA,EAAAA,UAAAA,UAAAA,EAAAA,GACAC,EAAAA,EAAAA,UAAAA,UAAAA,EAAAA,GAEA,IAAAG,IAAAT,EAAAK,QAAAK,OAAA,SAAAC,GACA,MAAAA,GAAAb,OAAAQ,GACA,MAAAG,EAAAjG,OAAA,GAGA,CAEA,GAAAoG,IAAAP,EAAAC,GAAAV,KAAA,IAKA,OAJAiB,IAAAC,eAAAF,KACAC,GAAAA,OAEAA,GAAAA,GAAAA,KAAAA,IACAE,EAAA,QARAb,EAAAA,UAAAA,EAAAA,GAAAA,cAhBA,IAAA,YAAA,mBAAAE,GAAA,YAAAY,EAAAZ,IAAA,MAAAA,GAAAW,EA4BA,GAAAE,GAAA,kBAAAf,IACAgB,OAAAA,EAAAA,OACApB,KAAAA,EAAAA,QACAqB,SAAAA,EAAAA,SACAhB,UAAAA,EAAAA,UACAiB,MAAAA,EAAAA,MACAC,QAAAA,EAAAA,QACAC,gBAAAA,EAAAA,gBACAC,WAAAA,EAAAA,WACAlG,YAAAA,GATA6E,CAYAe,GAAAA,YAAAA,cACAG,MAAAA,EAAAA,MACAC,QAAAA,EAAAA,QACAC,gBAAAA,EAAAA,gBACAC,WAAAA,EAAAA,YAGAN,EAAAhH,QACA4F,EAAAA,EAAAA,KAAAA,EAAAA,YAGA,IAAA2B,IACA1B,KAAAA,EAAAA,KACAqB,SAAAA,EAAAA,SACA9F,YAAAA,EAAAA,YAGA,oBAAA2E,GAAAiB,EAAAC,UACAlB,EAAAA,EAAAA,YAEAA,EAAAA,EAAAA,QAAAA,KAAAA,GAGA,mBAAAiB,GAAAd,WACAsB,EAAAA,EAAAA,YAAAA,EAAAA,UAGA,IAAAC,IAAAT,EAAAC,OAAAD,EAAAnB,MAAAF,KAAA,IACAiB,IAAAC,eAAAY,KACAb,GAAAA,GAAAA,QAAAA,SAAAA,GAAA,MAAAZ,GAAA0B,KACAd,GAAAA,GAAAA,OAAAA,GAIA,QAAAe,GAAAC,EAAAC,EAAAhC,GACA,GAAA,mBAAAE,GAAA6B,GACA,IAAA,GAAAvH,GAAA,EAAAA,EAAA0F,EAAA6B,GAAArH,SAAAF,EAAA,CACA,GAAAyF,GAAAC,EAAA6B,GAAAvH,EACA,IAAAyF,EAAAD,OAAAA,GAAAC,EAAAoB,SAAAY,KAAAD,GACA,MAAA/B,GAAA1E,YAIA,MAAA,MAGA,QAAA2G,GAAAH,EAAAC,GACA,GAAAG,KACA,IAAA,mBAAAjC,GAAA6B,GAEA,MADA3D,SAAAA,KAAAA,WAAAA,EAAAA,eACA+D,CAEA,KAAA,GAAA3H,GAAA,EAAAA,EAAA0F,EAAA6B,GAAArH,SAAAF,EAAA,CACA,GAAA4G,GAAAlB,EAAA6B,GAAAvH,EACA4G,GAAAC,SAAAY,KAAAD,KACAG,EAAAA,EAAAA,MAAAA,EAAAA,aAGA,MAAAA,GAGA,QAAAC,GAAAvH,EAAAwH,GACA,GAAAC,GAAA5F,EAAA6F,QAAAD,aACAH,EAAAG,EAAApC,EAAAsC,KACA,KAAAH,EAAAzB,OAAA,SAAA6B,GAAA,MAAA,UAAAA,EAAA,KAAA/H,QACA,IADA2H,EAAAzB,OAAA,SAAA6B,GACA,MAAA,YAAAA,EAAA,KAAA/H,QACA2H,EAAAA,MAAAA,YAAAA,QAAAA,EAAAA,IAAAA,GAEA,KAAA,GAAA7H,GAAA,EAAAA,EAAA6H,EAAA3H,SAAAF,EAAA,CAAA,GAAAkI,GAAAC,EAAAN,EAAA7H,GAAA,GAAAuH,EAAAW,EAAA,GAAAE,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GAEAI,EAAAZ,EAAAH,EAAAa,EAEA,MAAAC,EACAV,EAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAKAA,EAAAA,EAAAA,EAAAA,GAGAtH,EAAAA,gBAAAA,KACAkI,GAAAA,EAAAA,iBAAAA,EACArG,EAAAA,aAAAA,EAGA,QAAAiF,GAAApG,EAAA8E,GACA,GAAA2C,GAAAzH,EAAAH,SACAG,GAAAA,UAAAA,OAAAA,OAAAA,EAAAA,WACAF,OAAAA,oBAAAA,GAAAA,QAAAA,SAAAA,GACAE,EAAAA,UAAAA,GAAAA,EAAAA,KAEAA,EAAAA,UAAAA,YAAAA,EAGA,QAAA0H,GAAApI,EAAAwB,GACA,GAAA6G,GAAA7G,EAAAA,SAAA8G,gBACA9G,GAAAA,SAAAA,EAAAA,SAAAA,UAAAA,YACAA,EAAAA,SAAAA,KAAAA,EAAAA,GAEA6G,EAAA5B,OAEAjG,OAAAA,KAAAA,EAAAA,OAAAA,QAAAA,SAAAA,GACAR,EAAAA,GAAAA,EAAAA,MAAAA,GAEAV,EAAA6F,KACA7F,EAAAA,GAAAA,EAAAA,MAIA+I,EAAAzB,YACApG,OAAAA,KAAAA,EAAAA,YAAAA,QAAAA,SAAAA,GACA,GAAA+H,GAAAF,EAAAzB,WAAAzB,EACA,iBAAAoD,KACAA,GAAAA,KAAAA,IAEA1G,EAAAA,eAAAA,EAAAA,KAAAA,EAAAA,EAAAA,KAGAwG,EAAA3B,SACAlG,OAAAA,KAAAA,EAAAA,SAAAA,QAAAA,SAAAA,GACA,GAAAgI,GAAAH,EAAA3B,QAAAvB,EACAnF,GAAAA,GAAAA,EAAAA,OAAAA,OAAAA,KAGAqI,EAAA1B,kBACA3G,EAAAA,iBAAAA,EAAAA,iBAUA,QAAAyI,GAAAjH,GAMA,IAAA,GALAkH,GAAA,OAEApB,EAAAY,GAAA1G,EAAAI,QAAA+G,iBAEAC,EAAApH,EAAAE,OAAAmH,OAAAxE,MAAA,KACAyE,EAAA,EAAAA,EAAAF,EAAA/I,SAAAiJ,EAAA,CACA,GAAAC,GAAAH,EAAAE,EAEA,IADAxB,EAAAA,EAAAA,GACAnD,SAAAmD,EACA,MAIA,GAAAnD,SAAAmD,EAAA,CACA,GAAA0B,GAAA1B,CACA9F,GAAAA,SAAAA,EACAkH,EAAAA,GAAAA,GAAAA,GACAlH,EAAAA,SAAAA,WACA,CAUA,GAAAyH,GAAApH,EAAAK,OAAAgH,QAAA1H,EAAAE,OAAAmH,OAKAhH,GAAAA,iBAAAA,EAAAA,OAEA,IAAAsH,GAAA,MACA,IAAAF,EACAE,EAAAA,EAAAA,QACA,IAAA,IAAAP,EAAA/I,OAAA,CACA,GAAAuJ,GAAAvH,EAAAK,OAAAmH,oBAAA7H,EAAAI,QAAA+G,gBAAAC,EAAA,GAGAO,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,WAEAA,GAAAA,EAAAA,GAAAA,MAGA,IAAAG,GAAAzH,EAAA0H,GAAAC,gBAAAL,EAEA,KAAAG,EACA,KAAA,IAAAG,OAAA,4BAAAjI,EAAAE,OAAAmH,OAGAH,GAAAA,EAAAA,cAAAA,EAAAA,QACA,mBAAAA,GAAAgB,MACAhB,EAAAA,IAAAA,WAAAA,IAAAA,EAAAA,EAAAA,OAAAA,GACAlH,EAAAE,OAAAqF,KACA2B,EAAAA,IAAAA,WAAAA,KAAAA,EAAAA,OAAAA,KAwBA,MAjBAlH,GAAAE,OAAAqF,IACAlF,EAAAA,kBAAAA,EAAAA,QAAAA,EAAAA,OAAAA,GAAAA,WAEA,MAAA6G,IAAA,cAMAA,EAAAA,SAAAA,UAAAA,EAAAA,OAAAA,UAGAA,EAAAA,SAAAA,gBAAAA,EAAAA,QAAAA,gBAGA7G,EAAAA,gBAAAA,EAAAA,OAAAA,EAAAA,EAAAA,EAAAA,UAEA6G,ECnSA,QAAAiB,GAAAvE,EAAA9C,EAAAC,GAAA,GAAAgD,GAAAqE,UAAA/J,OAAA,GAAAsE,SAAAyF,UAAA,GAAAA,UAAA,MACAC,EAAAhI,EAAAgI,YACAC,EAAA,GAAAD,GAAAzE,EAAA9C,EAAAC,EACAD,GAAAA,EAAAA,WAAAA,EAAAA,QACAA,EAAAA,YAAAA,GAAAA,EACAA,EAAAA,YAAAA,GAAAA,IAAAA,EAAAA,aAAAA,EAAAA,WAEA,IAAAO,GAAA,WAAA,MAAAP,GAAAyH,YAAAxH,GAAAE,OACAK,EAAA,MAEAA,GADAyC,EAAAyE,SACAlH,SAAAA,GACA,IAAAR,EAAA2H,2BACA,KAAA,IAAAR,OAAA,aAAAlH,EAAA,yBAEAD,GAAAA,YAAAA,GAAAA,IAAAA,EAAAA,EAAAA,aAGAQ,SAAAA,GACAR,EAAAA,YAAAA,GAAAA,IAAAA,EAAAA,EAAAA,aAGAT,EAAAA,kBAAAA,EAAAA,EAAAA,EAAAA,GACAS,EAAA4H,kBACArI,EAAAA,kBAAAA,EAAAA,SAAAA,EAAAA,EAAAA,GAYA,QAAAsI,GAAAC,EAAA1B,EAAA2B,EAAAC,GACA,GAAAT,GAAAhI,EAAAgI,YACAU,EAAAF,GAAA3B,CAGA,IAFA7G,EAAAA,iBAAAA,EAEAuI,EAAAI,WAAA,IAAAJ,EAAAI,UAAA3K,OAAA,CACA,IAAA6I,EAAA+B,iBAMA,KAAA,IAAAhB,OAAA,+CALAf,GAAAA,YAAAA,EAAAA,kBAAAA,IAAAA,EAAAA,UAAAA,EAAAA,WAAAA,EAAAA,GAWA0B,EAAAK,mBACA/B,EAAAA,iBAAAA,EAAAA,iBAGA,KAAA,GAAA/I,KAAAyK,GAAA,CACA,GAAAzJ,GAAAyJ,EAAAzK,EACA,IAAA,OAAAA,GAAA,WAAAA,GAMA,GAAA,OAAAA,GAAA,MAAAA,EAAA,GAAA,CAKA,GAAA,IAAAA,EAAAgE,QAAA,OAAAhE,EAAAE,OAAA,GAAA,QAAAuH,KAAAzH,EAAA,IAAA,CACA,GAAA+K,GAAA/K,EAAA,GAAAgL,cAAAhL,EAAAiL,MAAA,EACA,IAAAC,EAAAnC,EAAAgC,EAAA/J,EAAA4J,EAAAD,GACA,QAEA,IAAA5B,EAAAoC,eAAA,CACApC,EAAAA,eAAAA,EAAAA,EAAAA,EAAAA,EACA,WAIA/H,YAAAH,SACAuK,EAAArC,EAAA/I,EAAAgB,EAAA4J,EAAAD,KAKA5B,EAAAqB,aAAApK,IAAA+I,GAAAqB,YACArB,EAAAA,YAAAA,GAAAA,IAAAA,EAAAA,EAAAA,WAAAA,EAAAA,GAEA/I,IAAA+I,GACAA,EAAAA,GAAAA,EACAA,EAAAsC,eACAtC,EAAAA,eAAAA,EAAAA,GAEAnF,QAAAA,KAAAA,2CAAAA,EAAAA,iCAnCAmF,GAAAA,GAAAA,GA0CA,QAAAqC,GAAArC,EAAA/I,EAAAgB,EAAA4J,EAAAD,GACA,GAAAT,GAAAhI,EAAAgI,WAEA,IAAAlJ,YAAAkB,GAAAoJ,oBAKA,MAJAvC,GAAAA,GAAAA,EAAAA,OAAAA,OAAAA,EAAAA,YACAA,EAAAwB,mBACAI,EAAAA,GAAAA,EAAAA,KAEA,CAGA,IAAA3J,YAAAkB,GAAAqJ,UAOA,MANAvK,GAAAA,UACA+H,EAAAA,GAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,WAEAA,EAAAwB,mBACAI,EAAAA,GAAAA,EAAAA,KAEA,CAGA,IAAA3J,YAAAkB,GAAAsJ,mBAAA,CA2BA,GAnBAxB,EAAAA,QAAAA,EAAAA,GACAjB,EAAAA,YAAAA,GAAAA,eAAAA,EACAA,EAAAA,YAAAA,GAAAA,uBAAAA,EAAAA,UACAA,EAAAA,YAAAA,GAAAA,IAAAA,EACAA,EAAAA,YAAAA,GAAAA,IAAAA,WACA,GAAApG,GAAA8I,KAAAd,eAAAc,KAAA/J,IAAAgK,YACAC,EAAAF,KAAA/J,IAAAiK,YACA,OAAAA,GAAAhJ,EAAAyH,YAAAuB,GAAA7I,MAAAH,GAEAoG,EAAAA,YAAAA,GAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAEA,IAAA0C,KAAA/J,IAAAiK,aACA,KAAA,IAAA7B,OAAA,uDAEA,IAAAnH,GAAA8I,KAAAd,eAAAc,KAAA/J,IAAAgK,YACAvB,EAAAxH,EAAAyH,YAAAqB,KAAA/J,IAAAiK,aACAxB,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,IAGAnJ,EAAA2K,aAAA,CACA,GAAAC,GAAA,SAAAzB,GACA,GAAAxH,GAAAwH,EAAAQ,eAAAR,EAAAzI,IAAAgK,WACA/I,IAGA,WACA,GAAAkJ,GAAAlJ,EAAAyH,YAAAD,EAAAzI,IAAAiK,aACAE,IAKA,WAQA,GAAAC,IAAA,CACAD,GAAAA,QAAAA,QAAAA,EAAAA,WAAA,IAAA,GAAAE,GAAA9B,UAAA/J,OAAA8L,EAAAlM,MAAAiM,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAA,GAAAA,UAAAA,EACAF,KACAA,GAAAA,EACA3B,EAAAA,QAAAA,MAAAA,EAAAA,GACA2B,GAAAA,KAEA3B,EAAAA,QAAAA,QAAAA,EAAAA,WAAA,IAAA,GAAA+B,GAAAjC,UAAA/J,OAAA8L,EAAAlM,MAAAoM,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAH,EAAAA,GAAAA,UAAAA,EACAF,KACAA,GAAAA,EACAD,EAAAA,QAAAA,MAAAA,EAAAA,GACAC,GAAAA,QAvBAlI,QAAAA,MAAAA,4BAAAA,EAAAA,IAAAA,WAAAA,KAAAA,EAAAA,IAAAA,aAAAA,wBAAAA,EAAAA,SALAA,QAAAA,MAAAA,yBAAAA,EAAAA,IAAAA,WAAAA,wBAAAA,GAiCA1B,GAAAA,OAAAA,kBAAAA,MAAAA,EAAAA,EAAAA,YAAAA,KAEA,OAAA,EAGA,MAAAlB,aAAAkB,GAAAkK,uBACApC,EAAAA,EAAAA,KAAAA,EAAAA,GACAjB,EAAAA,YAAAA,GAAAA,IAAAA,EAAAA,MAAAA,EAAAA,WAAAA,EAAAA,IAEA,MAGAA,EAAA/I,IAAAgB,YAAAkB,GAAAmK,wBAEA7B,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,IACA,GAMA,QAAAU,GAAAnC,EAAAgC,EAAA/J,EAAA4J,EAAAD,GACA,IAAA5B,EAAAgC,GAEA,WADAnH,SAAAA,KAAAA,oBAAAA,EAAAA,UAEA,IAAA,kBAAAmF,GAAAgC,GAAAuB,QAEA,WADA1I,SAAAA,KAAAA,EAAAA,oBAIA,KAAA5C,EAAAuL,SAAA,CACA,GAAA1D,KACA,KAAA,GAAA2D,KAAAzD,GAAAgC,GAAA0B,WACA5D,EAAAA,KAAAA,EAAAA,GAAAA,WAAAA,GAAAA,KAGA7H,GAAAA,IAAAA,qBAAAA,EAAAA,KAAAA,MAAAA,iKAAAA,EAAAA,UAAAA,2DAAAA,EAAAA,IAAAA,qIAcAA,EAAAA,YAAAA,EACAA,EAAAA,UAIA,GAAA0L,GAAA1L,EAAA2L,KAAA/B,EAAAD,EAEA,OADA5B,GAAAA,GAAAA,QAAAA,EAAAA,GACA2D,ECzKA,QAAAE,GAAAC,GACA,MAAAD,GAAAE,KAAAD,GAGA,QAAAE,GAAAC,GAGA,IAFA,GAAAC,GAAAD,EACAjJ,KACA,QAAAkJ,EAAA,IACAlJ,EAAAA,KAAAA,EAAAA,IACAkJ,EAAAA,EAAAA,EAGA,OADAlJ,GAAAA,KAAAA,GACAA,EAAAuB,KAAA,KAGA,QAAA4H,GAAAnE,EAAAvD,EAAA9D,GAGA,IAFA,GAAAyL,GAAApE,EACAkE,EAAAzH,EACA,QAAAyH,EAAA,IACAE,EAAAF,EAAA,MACAE,EAAAA,EAAAA,IAAAA,GAAAA,KAEAA,EAAAA,EAAAA,EAAAA,IACAF,EAAAA,EAAAA,EAEAE,GAAAA,GAAAA,EA4JA,QAAAC,KACA,GAAA,mBAAAlL,GAAAmL,MAAA,CAIAzJ,QAAAA,IAAAA,oBACA,IAAA0J,GAAAC,SAAAC,qBAAA,SACA,KAAA,GAAAxN,KAAAsN,GACA,GAAAA,EAAAtN,GAAAyN,KAAAH,EAAAtN,GAAAyN,IAAAzJ,QAAA,aAAA,CACA,GAAAyJ,GAAAH,EAAAtN,GAAAyN,IAAA7I,QAAA,OAAA,mBAEApB,EAAA,GAAAC,eAGA,IAFAD,EAAAA,KAAAA,MAAAA,GAAAA,GACAA,EAAAA,KAAAA,MACA,MAAAA,EAAAG,QAAA,IAAAH,EAAAG,OAEA,KAAA,IAAAmG,OAAA,gCAKA,OAHA,IAAA5E,UAAA1B,EAAAkK,gBACAxL,EAAAA,MAAAA,EAAAA,WACAA,EAAAA,QAAAA,EAAAA,WAOA,QAAAyL,GAAAF,EAAAG,GACAR,IACAlL,EAAAA,MAAAA,eAAAA,CACA,IAAA2L,GAAA3L,EAAAmL,MAAAI,EAAAvL,EAAAmL,MAAAS,YACA,OAAAlB,GAAAiB,GbnSA,GAAA1F,GAAA,WAAA,QAAA4F,GAAAlO,EAAAG,GAAA,GAAAgO,MAAAC,GAAA,EAAAC,GAAA,EAAAC,EAAA3J,MAAA,KAAA,IAAA,GAAA4J,GAAAC,EAAAxO,EAAAyO,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,QAAAT,EAAAU,KAAAN,EAAApN,QAAAhB,GAAAgO,EAAA9N,SAAAF,GAAAiO,GAAA,IAAA,MAAAU,GAAAT,GAAA,EAAAC,EAAAQ,EAAA,QAAA,KAAAV,GAAAI,EAAA,WAAAA,EAAA,YAAA,QAAA,GAAAH,EAAA,KAAAC,IAAA,MAAAH,GAAA,MAAA,UAAAnO,EAAAG,GAAA,GAAAF,MAAAC,QAAAF,GAAA,MAAAA,EAAA,IAAAyO,OAAAC,WAAA1N,QAAAhB,GAAA,MAAAkO,GAAAlO,EAAAG,EAAA,MAAA,IAAAW,WAAA,4DAEA+F,EAAA,kBAAA4H,SAAA,gBAAAA,QAAAC,SAAA,SAAA5L,GAAA,aAAAA,IAAA,SAAAA,GAAA,MAAAA,IAAA,kBAAA2L,SAAA3L,EAAA5B,cAAAuN,QAAA3L,IAAA2L,OAAA1N,UAAA,eAAA+B,IAEAiM,EAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAA/O,GAAA,EAAAA,EAAA+O,EAAA7O,OAAAF,IAAA,CAAA,GAAA2G,GAAAoI,EAAA/O,EAAA2G,GAAA1F,WAAA0F,EAAA1F,aAAA,EAAA0F,EAAAxF,cAAA,EAAA,SAAAwF,KAAAA,EAAAzF,UAAA,GAAAL,OAAAmO,eAAAF,EAAAnI,EAAAsI,IAAAtI,IAAA,MAAA,UAAAnF,EAAA0N,EAAAC,GAAA,MAAAD,IAAAL,EAAArN,EAAAZ,UAAAsO,GAAAC,GAAAN,EAAArN,EAAA2N,GAAA3N,McNAU,IAEAvC,GAAAA,OAAAA,CCFA,IAAAyP,GAAA,EfsBAC,EAAA,WenBA,QAAAA,GAAArN,GAAAV,EAAAmK,KAAA4D,GACA5D,KAAA6D,QAAAtN,EACAA,GAAAA,EAAAuN,aACAvN,EAAAA,YAAAA,KAAAA,MAIAyJ,KAAA8D,eACA9D,KAAArB,eACAqB,KAAA+D,YAEA/D,KAAAgE,SAAAL,If6EA,MApDAR,GAAAS,IACAJ,IAAA,UACAjO,MAAA,WenBA,IAJAyK,KAAAiE,YACAjE,KAAAiE,WAAAC,cAGAlE,KAAA8D,YAAArP,OAAA,GAAA,CACA,GAAA6I,GAAA0C,KAAA8D,YAAA,EACAxG,GAAA6G,QAEA7G,EAAAA,UAGAA,EAAAA,WAAAA,MAIA,IAAA,GAAA/I,KAAAyL,MAAArB,YAEA,IADA,GAAAD,GAAAsB,KAAArB,YAAApK,GACAmK,EAAAoF,YAAArP,OAAA,GACAiK,EAAAA,YAAAA,GAAAA,WAAAA,EAIA,IAAAsB,KAAA6D,SAAA7D,KAAA6D,QAAAC,YAAA,CACA,GAAAM,GAAApE,KAAA6D,QAAAC,YAAAvL,QAAAyH,KACAA,MAAA6D,QAAAC,YAAAO,OAAAD,EAAA,GAMApE,KAAAzJ,OAAAwC,MAIA,KAAA,GAAA6J,KAAA5C,MAAA+D,SACA/D,KAAA+D,SAAAnB,GAAA0B,gBfgCAd,IAAA,UACAjO,MAAA,We1BAyK,KAAAmE,cf+BAP,Ie3BAnN,GAAAA,QAAAA,CfgCA,IAAA8N,GAAA,WgB/FA,QAAAA,KAAA1O,EAAAmK,KAAAuE,GACAvE,KAAAwE,YAEA,IAAAC,GAAAhO,EAAAgO,MACAzE,MAAA0E,YAAAD,EAAAE,SAAA3K,KAAA,MAAAD,KAAA,eAAAC,KAAA,MAAAD,KAAA,cAIAiG,KAAA4E,aAAAH,EAAAE,SAAA3K,KAAA,MAAAD,KAAA,eAAAC,KAAA,MAAAD,KAAA,cAIAiG,KAAA6E,UAAAJ,EAAAE,SAAA3K,KAAA,MAAAD,KAAA,qBAAAC,KAAA,MAAAD,KAAA,mBAAAC,KAAA,MAAAD,KAAA,sBAKAiG,KAAA8E,YAAAL,EAAAE,SAAA3K,KAAA,MAAAD,KAAA,eAAAC,KAAA,MAAAD,KAAA,cAIAiG,KAAA+E,WAAAN,EAAAE,ShB+FA,MAPAxB,GAAAoB,IACAf,IAAA,eACAjO,MAAA,SAAAyP,GgBtFAhF,KAAAwE,UAAAQ,MhB2FAT,IgBvFA9N,GAAAA,YAAAA,ChB8FA,IAAAwO,GAAA,WiBzHA,QAAAA,GAAAhP,GAEA,GAFAJ,EAAAmK,KAAAiF,GACAjF,KAAAkF,OAAA,QACAjP,YAAAgP,GAEAjF,KAAAkF,OAAAjP,EAAAiP,WACA,IAAA,gBAAAjP,GACA+J,KAAAkF,OAAAjP,EAAAsJ,kBACA,IAAA,gBAAAtJ,GAAA,CAEA,GAAAkP,IAAAC,KAAAC,MAAApP,GAAA,UAAAqP,SAAA,IAAAC,UACAvF,MAAAkF,OAAA,IAAAC,GjB0JA,MA1BAhC,GAAA8B,IACAzB,IAAA,WACAjO,MAAA,WiB9HA,MAAAyK,MAAAkF,UjBkIA1B,IAAA,OACAjO,MAAA,WiB7HA,IAAA0P,EAAAO,QAAAxF,KAAAkF,QAAA,CACA,GAAAD,EAAAQ,cAAAR,EAAAS,sBAEA,MAAA1F,KAEAiF,GAAAA,QAAAA,KAAAA,QAAAA,KACAA,EAAAA,eACAA,EAAAQ,eAAAR,EAAAS,uBACAvN,QAAAA,KAAAA,kEAAAA,oEAAAA,0CAOA,MAAA8M,GAAAO,QAAAxF,KAAAkF,YjBiIAD,IiB9HAA,GAAAA,WACAA,EAAAA,aAAAA,EACAA,EAAAA,sBAAAA,IACAxO,EAAAA,OAAAA,CjBmIA,IAAAkP,GAAA,SAAAC,GkB9KA,QAAAD,GAAAE,EAAAC,GAAAjQ,EAAAmK,KAAA2F,EAAA,IAAAI,GAAApR,EAAAqL,MAAA2F,EAAA/P,WAAAR,OAAA4Q,eAAAL,IAAA9Q,KAAAmL,OAEAzB,EAAA9H,EAAA8H,cAFA,OAGAA,GAAAA,OAAAA,EAAAA,SAAAA,aAAAA,IACAA,EAAAA,OAAAA,EAAAA,UAAAA,aAAAA,IAJAwH,ElB4LA,MAbAhR,GAAA4Q,EAAAC,GAaAD,GACAlP,EAAAmN,QkBrLAnN,GAAAA,OAAAA,ClByLA,IAAAgO,GAAA,WmBjMA,QAAAA,KAAA,GAAAwB,GAAAjG,KAAA5C,EAAAoB,UAAA/J,OAAA,GAAAsE,SAAAyF,UAAA,GAAAA,UAAA,MAAArE,EAAAqE,UAAA/J,OAAA,GAAAsE,SAAAyF,UAAA,GAAAA,UAAA,KAAA3I,GAAAmK,KAAAyE,GACAzE,KAAAkG,kBACAlG,KAAA9I,IAAAiD,EAAAjD,IACA8I,KAAA7F,QAAAA,EAEA6F,KAAA2E,OAAA,WAAA,MAAAsB,GAAAE,QAAAC,MAAAH,EAAAzH,YACAwB,KAAA2E,OAAA3D,WAAA5D,EACA4C,KAAA2E,OAAA9D,QAAAb,KAAAa,QAAAwF,KAAArG,MACAA,KAAA2E,OAAAL,WAAAtE,KAAAsE,WAAA+B,KAAArG,MACAA,KAAA2E,OAAA2B,YAAAtG,KAAAsG,YAAAD,KAAArG,MAGAA,KAAA9I,KAAA6B,SAAAiH,KAAA9I,IAAA6M,UACA/D,KAAA9I,IAAA6M,SAAAd,KAAAjD,KAAA2E,QnB2WA,MA5JAxB,GAAAsB,IACAjB,IAAA,UACAjO,MAAA,WmB7MAkB,EAAAA,YAAAA,eADA,KAAA,GAAA8P,GAAA/H,UAAA/J,OAAA8L,EAAAlM,MAAAkS,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAjG,EAAAA,GAAAA,UAAAA,EAEA,KAAA,GAAAhM,KAAAyL,MAAAkG,eAAA,CACA,GAAA/I,GAAA6C,KAAAkG,eAAA3R,EACA4I,GAAAnD,KAAAyK,EAAAgC,iBACAhC,EAAAA,WAAAA,EAAAA,GAEAA,EAAAA,SAAAA,EAAAA,GAGAhO,EAAAA,YAAAA,kBnBsNA+M,IAAA,UACAjO,MAAA,WmBrNA,IAAA,GACAyE,GAAAyK,EAAAiC,eADAC,EAAAnI,UAAA/J,OAAA8L,EAAAlM,MAAAsS,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAArG,EAAAA,GAAAA,UAAAA,EAKA,IAHA,gBAAAA,GAAAA,EAAA9L,OAAA,KACAuF,EAAAA,EAAAA,SAEAA,EAAAyK,EAAAoC,kBACA7G,KAAAsG,YAAAF,MAAApG,KAAAO,IADA,CAKA,GAAA,IAAAA,EAAA9L,OACAuL,KAAAkG,eAAAjD,MAAA6D,QAAA5S,EAAA+M,KAAAV,EAAA,GAAAvG,KAAAA,QACA,IAAA,gBAAAuG,GAAA,IAAAA,EAAA,YAAAwG,QAAA,CACAxG,EAAA,GAAAuD,aAAAvD,EAAA,KAAAP,KAAA9I,KACAqJ,EAAAA,GAAAA,YAAAA,KAAAA,KAAAA,OAEA,IAAAU,GAAAV,EAAA,GAAAA,EAAA,GACAP,MAAAkG,eAAAjD,MAAA6D,QAAAvG,EAAA,GAAAU,KAAAA,EAAAjH,KAAAA,QAEAuG,GAAA,GAAAuD,eAAA9D,KAAA9I,KAAAqJ,EAAA,KAAAP,KAAA9I,KAAAqJ,EAAA,KAAAP,KAAA9I,IAAA2M,UAGAtD,EAAAA,GAAAA,YAAAA,KAAAA,KAAAA,QAEAP,KAAAkG,eAAAjD,MAAA6D,QAAAvG,EAAA,GAAAU,KAAAV,EAAA,GAAAvG,KAAAA,GAIAgG,MAAA7F,QAAAjD,KAAA8I,KAAA7F,QAAAjD,IAAA8P,gBACAhH,KAAA7F,QAAAjD,IAAA8P,eAAAhH,KAAA7F,anB4NAqJ,IAAA,aACAjO,MAAA,WmB1NA,IAAA,GAAA0R,GAAAzI,UAAA/J,OAAA8L,EAAAlM,MAAA4S,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAA3G,EAAAA,GAAAA,UAAAA,EAQA,KAAA,GAHA4G,GAAA,IAAA5G,EAAA9L,OAAA8L,EAAA,YAAA9G,UAAA,EAAA,EAAA,gBAAA8G,GAAA,IAAAA,EAAA,YAAAwG,QAAA,EAAA,EAGAxS,EAAA,EAAAA,EAAAyL,KAAAkG,eAAAzR,OAAAF,IAAA,CAAA,GAAA6S,GAAApH,KAAAkG,eAAA3R,GAAA0M,EAAAmG,EAAAnG,KAAA6F,EAAAM,EAAAN,OAEA,IAAA,IAAAvG,EAAA9L,QAAA,IAAA0S,GAAAlG,IAAAV,EAAA,IAAA,IAAA4G,GAAAL,IAAAvG,EAAA,IAAA,IAAA4G,GAAAL,IAAAvG,EAAA,IAAAU,IAAAV,EAAA,GAAAA,EAAA,KAAAuG,IAAAvG,EAAA,IAAAU,IAAAV,EAAA,GAAA,CAOA,GAAAuG,EAAA,CACA,GAAA1C,GAAA0C,EAAAhD,YAAAvL,QAAAyH,KAAA2E,OACAP,IAAA,GACA0C,EAAAA,YAAAA,OAAAA,EAAAA,GAGA9G,KAAAkG,eAAA7B,OAAA9P,EAAA,GAGAA,KAKAyL,KAAA7F,QAAAjD,KAAA8I,KAAA7F,QAAAjD,IAAAmQ,mBACArH,KAAA7F,QAAAjD,IAAAmQ,kBAAArH,KAAA7F,YnB6NAqJ,IAAA,cACAjO,MAAA,WmB3NA,IAAA,GAAA+R,GAAA9I,UAAA/J,OAAA8L,EAAAlM,MAAAiT,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAhH,EAAAA,GAAAA,UAAAA,EACA,IAAA4G,GAAA,IAAA5G,EAAA9L,OAAA,EAAA,gBAAA8L,GAAA,IAAAA,EAAA,YAAAwG,QAAA,EAAA,CAEA,KAAA,GAAAxS,KAAAyL,MAAAkG,eAAA,CAAA,GAAAsB,GAAAxH,KAAAkG,eAAA3R,GAAA0M,EAAAuG,EAAAvG,KAAA6F,EAAAU,EAAAV,OAEA,IAAA,IAAAK,GAAAlG,IAAAV,EAAA,IAAA,IAAA4G,GAAAL,IAAAvG,EAAA,IAAAU,IAAAV,EAAA,GAAAA,EAAA,KAAAuG,IAAAvG,EAAA,IAAAU,IAAAV,EAAA,GAIA,OAAA,EAGA,OAAA,OnBiOAiD,IAAA,SACAjO,MAAA,WmBhOA,IAAA,GAAAkS,GAAAjJ,UAAA/J,OAAA8L,EAAAlM,MAAAoT,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAnH,EAAAA,GAAAA,UAAAA,EACA,QAAA,IAAA9G,SAAAtE,UAAAkR,KAAAD,MAAA3B,GAAA,MAAAkD,OAAApH,MAAAoE,UnBuOAnB,IAAA,WACAjO,MAAA,SAAA4H,EAAAoD,GmBpOA,IACApD,EAAAA,KAAAA,MAAAA,EAAAA,QAAAA,GACA,MAAA+F,GACA/K,QAAAA,MAAAA,qBAAAA,EAAAA,QAAAA,EAAAA,SAAAA,UAAAA,SAAAA,KAAAA,EAAAA,WnByOAqL,IAAA,aACAjO,MAAA,SAAA4H,EAAAoD,GmBnOA,IAAAkE,EAAAmD,QAAAnT,SACAP,EAAA2T,aACA3T,EAAAA,aAAAA,EAAAA,gBAEAA,EAAAA,WAAAA,EAAAA,eAAAA,IAGAuQ,EAAAA,QAAAA,MAAAA,EAAAA,OnBuOAjB,IAAA,iBACAjO,MAAA,WmBpOA,GAAAuS,GAAArD,EAAAmD,OACAnD,GAAAA,WAEAhO,EAAAA,YAAAA,eACA,KAAA,GAAAlC,KAAAuT,GACArD,EAAAA,SAAAA,MAAAA,EAAAA,EAAAA,EAAAA,IAEAhO,GAAAA,YAAAA,mBnB0OAgO,ImBtOAA,GAAAA,WAEAA,EAAAA,eAAAA,EACAA,EAAAA,iBAAAA,EACAA,EAAAA,iBAAAA,EACAA,EAAAA,iBAAAA,IAEAhO,EAAAA,OAAAA,CC1JA,IAAA0H,IACA4J,KAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GACA,GAAAC,GAAA5C,KAAAC,MAAA,IAAA4C,GACAC,EAAA9C,KAAAC,MAAA,IAAA8C,GACAC,EAAAhD,KAAAC,MAAA,IAAAgD,EACA,OAAA,QAAAL,EAAA,IAAAE,EAAA,IAAAE,EAAA,IAAAE,EAAA,KAEAC,KAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GACA,GAAAC,GAAApD,KAAAC,MAAA,IAAAoD,GACAC,EAAAtD,KAAAC,MAAA,IAAAsD,GACAC,EAAAxD,KAAAC,MAAA,IAAAwD,EACA,OAAA,QAAAL,EAAA,IAAAE,EAAA,KAAAE,EAAA,KAAAN,EAAA,KAEAQ,kBAAAA,SAAAA,GACA,GAAAC,GAAAC,OAAAC,KAAArR,EAAA,SACAmR,GAAAA,SAGA3K,gBAAAA,SAAAA,GACA,GAAAtH,GAAAL,EAAAK,OAEAqL,EAAArL,EAAAC,aAAAgD,GAKAqH,EAAAtK,EAAAoS,cAAA/G,EAIA,KAAAf,EAAA,CACA,GAAA+H,GAAApQ,SAAAjC,EAAA4B,UAAAqB,EACA,KAAAoP,EAGA,IAAA,GAFAC,GAAAtS,EAAAuS,kBAAA5S,EAAA6S,iBAAA/L,iBAEAhJ,EAAA,EAAAA,EAAA6U,EAAA3U,SACA0N,EAAAA,GAAAA,EAAAA,GAAAA,IACAf,EAAAA,EAAAA,cAAAA,KAFA7M,MAQA,GAAA6M,EAAA,CAIA,GAAAmI,GAAA9S,EAAAoF,eAAA,QAAA,MAAA,aACAqC,EAAA,GAAAqL,IACAjT,OAAAA,EACAE,QAAAA,EAAAA,kBAUA,OARA0H,GAAAA,UAAAA,EAAAA,gBAAAA,GACAA,EAAAA,SAAAA,EAAAA,SACAA,EAAAA,MAAAA,EAEApH,EAAAA,YAAAA,EAAAA,SAAAA,EAAAA,UAAAA,EAAAA,iBAGAA,EAAAA,WAAAA,GAAAA,EACAoH,IAGAsL,gBAAAA,SAAAA,EAAAA,EAAAA,GACA,GAAApI,GAAA3K,EAAAyL,SAAAF,EAAAG,GAIAoH,EAAA9S,EAAAoF,eAAA,QAAA,MAAA,aACAqC,EAAA,GAAAqL,IACAjT,OAAAA,EACAC,OAAAA,EACAC,QAAAA,EAAAA,mBAGAM,EAAAL,EAAAK,MACAA,GAAAA,YAAAA,EAAAA,SAAAA,OAAAA,EAAAA,gBAEA,IAAA2S,GAAAtH,GAAAhE,EAAAuL,YAAA,2BACAxL,GAAAA,UAAAA,EAAAA,gBAAAA,GACAA,EAAAA,SAAAA,EAAAA,SAEAA,EAAAA,MAAAA,CAEA,IAAAhH,GAAAgH,EAAAyL,aAAApT,GAEAqT,EAAAnT,EAAAmT,iBAUA,OATA9S,GAAA+S,iBAAAD,EAAAE,MAAAhT,EAAA+S,iBAAAD,EAAAG,OAIAjT,EAAAA,8BAEAA,EAAAA,wBAGAI,GAKAwS,YAAAA,SAAAA,GAAA,MAAAjT,GAAAuT,OAAApS,IAEAqS,KAAAA,SAAAA,EAAAA,GACA,MAAA,IAAAxT,GAAAkP,OAAAE,EAAAC,IAIAoE,WAAAA,EACAC,YAAAA,EACAC,aAAAA,EAEAC,WAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAC,eAAAA,GAEAC,YAAAA,EACAC,YAAAA,EAEAC,SAAAA,EACAC,WAAAA,EAEAC,WAAAA,GACAC,QAAAA,EACAC,YAAAA,IACAC,cAAAA,EACAC,WAAAA,GACAC,UAAAA,GACAC,WAAAA,GACAC,WAAAA,GACAC,UAAAA,GACAC,UAAAA,GACAC,WAAAA,EACAC,UAAAA,GACAC,SAAAA,GACAC,QAAAA,GACAC,SAAAA,GACAC,OAAAA,GACAC,UAAAA,GACAC,SAAAA,GACAC,WAAAA,GACAC,aAAAA,GACAC,UAAAA,GACAC,YAAAA,GACAC,SAAAA,GACAC,QAAAA,GACAC,UAAAA,EACAC,aAAAA,GACAC,YAAAA,IACAC,eAAAA,IACAC,OAAAA,IAAAA,OAAAA,IAAAA,OAAAA,IAAAA,OAAAA,IAAAA,OAAAA,IAAAA,OAAAA,IACAC,OAAAA,IAAAA,OAAAA,IAAAA,OAAAA,IAAAA,QAAAA,IAAAA,QAAAA,IACAC,QAAAA,IAAAA,QAAAA,IAAAA,QAAAA,IAAAA,QAAAA,IAAAA,QAAAA,IACAC,QAAAA,IAAAA,QAAAA,IAAAA,QAAAA,IAAAA,QAAAA,IAAAA,QAAAA,IACAC,QAAAA,IAAAA,QAAAA,IAAAA,QAAAA,IACAC,QAAAA,EAAAA,QAAAA,EAAAA,QAAAA,EAAAA,QAAAA,EAAAA,QAAAA,EAAAA,QAAAA,EACAC,QAAAA,EAAAA,QAAAA,EAAAA,QAAAA,EAAAA,QAAAA,EAAAA,QAAAA,EACAC,YAAAA,EACAC,YAAAA,EACAC,SAAAA,EACAC,YAAAA,EACAC,YAAAA,EACAC,SAAAA,EACAC,gBAAAA,EACAC,gBAAAA,EACAC,UAAAA,GACAC,QAAAA,GACAC,WAAAA,IACAC,aAAAA,IACAC,eAAAA,IACAC,WAAAA,IACAC,YAAAA,IACAC,cAAAA,IACAC,eAAAA,IACAC,cAAAA,IACAC,eAAAA,IACAC,aAAAA,IACAC,SAAAA,IACAC,UAAAA,IACAC,UAAAA,IACAC,WAAAA,IACAC,UAAAA,IACAC,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GACAC,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GACAC,UAAAA,GACAC,cAAAA,GACAC,SAAAA,GACAC,UAAAA,GACAC,YAAAA,GACAC,aAAAA,GACAC,OAAAA,GACAC,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GACAC,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GACAC,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GACAC,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GAAAA,MAAAA,GACAC,gBAAAA,IACAC,cAAAA,IACAC,iBAAAA,IACAC,gBAAAA,IACAC,eAAAA,IACAC,cAAAA,EACAC,cAAAA,IACAC,QAAAA,IACAC,eAAAA,IACAC,eAAAA,IACAC,SAAAA,EACAC,YAAAA,EACAC,SAAAA,EACAC,eAAAA,IACAC,aAAAA,IACAC,eAAAA,IACAC,aAAAA,IACAC,QAAAA,IACAC,cAAAA,IACAC,WAAAA,IACAC,SAAAA,EACAC,eAAAA,EACAC,WAAAA,EACAC,UAAAA,EACAC,UAAAA,EACAC,aAAAA,EACAC,UAAAA,EACAC,WAAAA,EACAC,kBAAAA,EACAC,eAAAA,EACAC,eAAAA,EACAC,SAAAA,EACAC,SAAAA,EACAC,UAAAA,EACAC,gBAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAC,UAAAA,EACAC,WAAAA,EACAC,UAAAA,EACAC,SAAAA,EACAC,SAAAA,EACAC,WAAAA,EACAC,YAAAA,EACAC,SAAAA,EACAC,cAAAA,EACAC,WAAAA,EACAC,gBAAAA,EACAC,aAAAA,EACAC,UAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,SAAAA,EACAC,QAAAA,EACAC,iBAAAA,EACAC,gBAAAA,EACAC,oBAAAA,EACAC,aAAAA,EACAC,oBAAAA,EACAC,SAAAA,EACAC,cAAAA,EACAC,SAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,mBAAAA,EACAC,cAAAA,EACAC,eACAC,SAAAA,EACAC,WAAAA,EACAC,gBAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAC,SAAAA,EACAC,WAAAA,EACAC,OAAAA,EACAC,WAAAA,GACAC,QAAAA,EACAC,qBAAAA,EACAC,cAAAA,EACAC,qBAAAA,EACAC,YAAAA,GACAC,YAAAA,GACAC,SAAAA,IACAC,UAAAA,GACAC,SAAAA,IACAC,WAAAA,EAEAC,UAAAA,EACAC,WAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAC,SAAAA,GACAC,YAAAA,GACAC,aAAAA,IACAC,YAAAA,IACAC,cAAAA,IACAC,cAAAA,GACAC,aAAAA,EACAC,cAAAA,EACAC,qBAAAA,GACAC,mBAAAA,IAEAC,mBAAAA,EACAC,oBAAAA,EACAC,qBAAAA,EACAC,4BAAAA,EACAC,6BAAAA,EAEAC,YAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,WAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACAC,gBAAAA,EACAC,cAAAA,EACAC,YAAAA,GACAC,aAAAA,GACAC,aAAAA,GACAC,mBAAAA,GACAC,gBAAAA,GACAC,gBAAAA,GACAC,WAAAA,GACAC,eAAAA,GACAC,iBAAAA,GACAC,eAAAA,GACAC,eAAAA,GACAC,eAAAA,GACAC,WAAAA,GACAC,aAAAA,GACAC,aAAAA,GAEAC,kBAAAA,EACAC,mBAAAA,EACAC,kBAAAA,EAGAvhB,GAAAA,GAAAA,CpBsYA,IAAAwhB,GAAA,WqBptBA,QAAAA,GAAAhiB,EAAAmL,GAAAvL,EAAAmK,KAAAiY,GAMAjY,KAAAkY,WAAA9W,GAAA,UAAAA,EAAA,IAAAA,EAAA,GAAA,IAAA,UAAAA,EAAA,GAAA,GAAA,GAEApB,KAAAgC,IAAA/L,EACA+J,KAAAc,UAAA,ErBiwBA,MAlCAqC,GAAA8U,IACAzU,IAAA,SACAjO,MAAA,WqB7tBA,OACAyM,IAAAA,KAAAA,IACAmW,KAAAA,KAAAA,UAAAA,KAAAA,MACA/W,KAAAA,KAAAA,UAAAA,KAAAA,UrBkuBAoC,IAAA,OACAjO,MAAA,SAAAe,EAAAE,EAAA4hB,GqB7tBA,MAAApY,MAAAqY,KAAAxjB,KAAAyB,EAAAA,EAAAE,EAAA4hB,MrBuuBA5U,IAAA,UACAjO,MAAA,WqBjuBAyK,KAAAgC,IAAAhC,KAAAgC,IAAAsW,OACAtY,KAAAqY,KAAAJ,EAAAM,QAAAvY,KAAAgC,IAAAhC,KAAAkY,YACAlY,KAAAc,UAAA,OrBquBA0C,IAAA,UACAjO,MAAA,SAAAyM,EAAAkW,GqBluBA,MAAA,IAAAze,UAAA,oBAAA,qBAAA,aAAA,2NAAAye,EAAA,GAAA,UAAA,IAAAlW,EAAA,uBrBuuBAiW,IqB1tBAxhB,GAAAA,WAAAA,EpBpDAT,EAAAA,WAAAA,EACAS,EAAAA,WAAAA,EqBFAA,EAAAA,OAAAA,IAEA,IAAA+hB,IAAA,QAAA,SAAA,OAAA,IAAA,IAAA,OAAA,QAAA,MAAA,UtBgyBAC,EAAA,WsB1xBA,QAAAA,GAAAC,GAAA7iB,EAAAmK,KAAAyY,GAGAzY,KAAA2Y,IAAA,GAEA3Y,KAAA4Y,UAAAxT,KAAAyT,MAAA,IAAA7Y,KAAA2Y,KACA3Y,KAAA8Y,SAAA,EACA9Y,KAAA+Y,YAAAL,EAGA1Y,KAAAgZ,cAGAhZ,KAAAiZ,MAGAjZ,KAAAkZ,oBAGAlZ,KAAA6J,eAAA,EAGA7J,KAAAmZ,oBAGAnZ,KAAAoZ,qBAGApZ,KAAAqZ,WAAA,KAGArZ,KAAAsZ,UAAA,GAGAtZ,KAAAuZ,wBAGAvZ,KAAAwZ,wBAKAxZ,KAAAyZ,YACAzZ,KAAA0Z,UAAAC,KAAAC,MAGA5Z,KAAA6Z,aACA7Z,KAAA8Z,cAGA9Z,KAAA+Z,eAKA,IAAAC,GAAAvjB,EAAAoF,eAAA,QAAA,MAAA,YACAK,EAAAzF,EAAAyF,YACA,KAAA,GAAA3H,KAAA2H,GACAA,EAAA3H,GAAA0lB,mBACAxjB,EAAAA,YAAAA,EAAAA,UAAAA,EAAAA,EAAAA,GAAAA,mBtBq7CA,MA9oBA0M,GAAAsV,IACAjV,IAAA,QACAjO,MAAA,WsB/xBAkB,EAAAA,OAAAA,IACA,IAAAmT,GAAAnT,EAAAmT,iBACA5J,MAAA6J,iBAAAD,EAAAsQ,UACAla,KAAA6J,eAAAD,EAAAsQ,QACAla,KAAAma,UAAAC,YAAApa,KAAAqa,MAAAhU,KAAArG,MAAAA,KAAA4Y,WACA5Y,KAAA8Z,WAAAQ,QAAA,SAAAC,GAAA,MAAAA,WtByyBA/W,IAAA,OACAjO,MAAA,WsBpyBA,GAAAqU,GAAAnT,EAAAmT,iBACA5J,MAAA6J,iBAAAD,EAAAsQ,UACAM,cAAAA,KAAAA,WACAxa,KAAA6J,eAAAD,EAAAG,KACA/J,KAAA6Z,UAAAS,QAAA,SAAAC,GAAA,MAAAA,WtBszBA/W,IAAA,oBACAjO,MAAA,SAAA+C,GsBpyBA,IAAA,GAJAmiB,GAAAniB,GAAA,MAAAA,EAAA,GACAoiB,EAAApiB,EAAAW,MAAA,KACA0hB,KAEAC,EAAA,EAAAA,EAAAF,EAAAjmB,QAAA,CACA,GAAAomB,GAAAH,EAAAE,IAEA,OAAAC,EACAJ,GAAAG,IAAAF,EAAAjmB,QACAkmB,EAAAA,KAAAA,IAEA,OAAAE,IACAF,EAAAlmB,OAAA,GAAA,IAAAkmB,EAAAlmB,QAAA,KAAAkmB,EAAA,KACAA,EAAAA,MAEAF,GAAAG,IAAAF,EAAAjmB,QACAkmB,EAAAA,KAAAA,MAGAA,EAAAA,KAAAA,GACAF,GAAAA,GAIA,MAAAE,GAAA9gB,KAAA,QtB6yBA2J,IAAA,kBACAjO,MAAA,SAAA4M,GsBzyBA,GAAAiW,GAAAjW,EAAAlJ,MAAA,SAEA,OADAmf,GAAAA,EAAAA,OAAAA,GAAAA,GACAA,EAAAve,KAAA,QtB8yBA2J,IAAA,kBACAjO,MAAA,SAAA4M,GsB3yBA,MAAAA,GAAAlJ,MAAA,UAAA6hB,StBkzBAtX,IAAA,WACAjO,MAAA,SAAA4M,GsB/yBA,GAAA4Y,GAAAvc,UAAA/J,OAAA,GAAAsE,SAAAyF,UAAA,GAAAA,UAAA,GAAA,IAEAwB,MAAAgb,aACAhb,KAAAgb,WAAAlZ,SAAAmZ,cAAA,MAEAjb,KAAAgb,WAAAE,KAAAlb,KAAAmb,gBAAAhZ,GACAnC,KAAAsZ,UAAAtZ,KAAAgb,WAAAE,IACA,IAAAE,GAAApb,KAAAqb,gBAAAlZ,GACAf,EAAApB,KAAAkJ,cAAAlJ,KAAAjJ,aAAAqkB,GACA,OAAApb,MAAAsb,YAAAla,EAAA2Z,EAAA5Y,MtByzBAqB,IAAA,UACAjO,MAAA,SAAAyM,GsBpzBA,GAAA+Y,GAAAvc,UAAA/J,OAAA,GAAAsE,SAAAyF,UAAA,GAAAA,UAAA,GAAA,KAAA2D,EAAA3D,UAAA/J,OAAA,GAAAsE,SAAAyF,UAAA,GAAAA,UAAA,GAAAzF,MACA,OAAAiH,MAAAsb,YAAA7kB,EAAAyL,SAAAF,EAAAG,GAAA4Y,EAAA5Y,MtB0zBAqB,IAAA,cACAjO,MAAA,SAAA6L,GsBxzBA,GAAA2Z,GAAAvc,UAAA/J,OAAA,GAAAsE,SAAAyF,UAAA,GAAAA,UAAA,GAAA,KAAA2D,EAAA3D,UAAA/J,OAAA,GAAAsE,SAAAyF,UAAA,GAAAA,UAAA,GAAAzF,MACAtC,GAAAA,OAAAA,IAGA,IAAA8S,GAAA9S,EAAAoF,eAAA,QAAA,MAAA,aACAqC,EAAA,GAAAqL,IACAjT,OAAAA,EACAC,OAAAA,GAgBA,OAbAyJ,MAAA7D,YAAAiF,EAAAma,SAAAxiB,OAAAmF,EAAAX,iBACAW,EAAAA,UAAAA,KAAAA,UACAA,EAAAA,SAAAA,EAAAA,SACAA,EAAAA,MAAAA,EAEA8B,KAAAqZ,WAAAnb,EAAAsd,cAAAT,GACA7c,EAAAA,gBAAAA,KAAAA,eACA8B,KAAAyb,8BAEAzb,KAAA0b,QAEA1b,KAAA2b,uBAEAzd,KtB8zBAsF,IAAA,cACAjO,MAAA,WsB3zBA,MAAAyK,MAAAqZ,WAAA9f,YtBm0BAiK,IAAA,gBACAjO,MAAA,SAAAqmB,GsB7zBA5b,KAAAwZ,qBAAAvW,KAAA2Y,MtB00BApY,IAAA,yBACAjO,MAAA,SAAAgI,EAAAqe,EAAAC,GsBh0BA7b,KAAA8b,uBACA9b,KAAA8b,yBAEA9b,KAAA8b,qBAAAve,KACAyC,KAAA8b,qBAAAve,MAGA,IAAAwe,GAAA/b,KAAA8b,qBAAAve,EAEAse,IACAE,EAAA/d,YACA+d,EAAAA,cAEAA,EAAAA,UAAAA,GAAAA,IAEAA,EAAAC,cACAD,EAAAA,gBAEAA,EAAAA,YAAAA,KAAAA,OtBq0BAvY,IAAA,oBACAjO,MAAA,SAAAgI,GsBj0BA,IAAAyC,KAAA8b,qBACA,QAEA,IAAAC,GAAA/b,KAAA8b,qBAAAve,EACA,OAAAwe,GAGAA,EAAAC,sBtBq0BAxY,IAAA,sBACAjO,MAAA,SAAAgI,EAAAse,GsBl0BA,IAAA7b,KAAA8b,qBACA,MAAA,EAEA,IAAAC,GAAA/b,KAAA8b,qBAAAve,EACA,OAAAwe,IAAAA,EAAA/d,UAGA+d,EAAA/d,UAAA6d,IAAA,GAFA,MtBw0BArY,IAAA,oBACAjO,MAAA,SAAA0mB,GsBn0BAjc,KAAAwZ,qBAAAyC,KtBu0BAzY,IAAA,iBACAjO,MAAA,WsBp0BA,MAAAyK,MAAAwZ,wBtB80BAhW,IAAA,gBACAjO,MAAA,SAAAuG,EAAAogB,GsBp0BAlc,KAAAuZ,qBAAAzd,GAAAogB,EAAA/iB,QAAA,MAAA,OtB00BAqK,IAAA,mBACAjO,MAAA,SAAA2B,EAAAC,GsBv0BA,GAAAglB,MACA5mB,EAAA2B,EAAAC,GAEAM,EAAA,WACA,GAAAgH,GAAAhI,EAAAgI,WAKA,OAJAA,GAAA2d,oBAAAD,EAAA5jB,QAAAkG,EAAA2d,0BAEAD,EAAAA,KAAAA,EAAAA,oBAEA5mB,GAGAmC,EAAA,SAAA2kB,GACA9mB,EAAAA,CACA,KAAA,GAAAhB,KAAA4nB,GACAA,EAAAA,GAAAA,SAIA1lB,GAAAA,kBAAAA,EAAAA,EAAAA,EAAAA,MtB00BA+M,IAAA,cACAjO,MAAA,SAAA+mB,GsBt0BA,GAAAC,GAAA/d,UAAA/J,OAAA,GAAAsE,SAAAyF,UAAA,GAAAA,UAAA,GAAAwB,KAAAsZ,UAAA/b,EAAAiB,UAAA/J,OAAA,GAAAsE,SAAAyF,UAAA,GAAAA,UAAA,KACA,KAAAwB,KAAAwc,gBAAA,CACAxc,KAAAwc,kBAKA,KAAA,GAAArhB,KAAA1E,GAAAwD,QACA,SAAAkB,IACA6E,KAAAwc,gBAAArhB,OASA,GAJA6E,KAAAlC,UACAkC,KAAAlC,YAGAwe,GAAA,IAAAA,EAAA7nB,OAIA,IAAA,GAAAF,GAAA,EAAAA,EAAA+nB,EAAA7nB,OAAAF,IACAyL,KAAAyc,WAAAH,EAAA/nB,GAAAgoB,EAAAhf,MtB60BAiG,IAAA,aACAjO,MAAA,SAAAmnB,EAAAH,EAAAhf,GsBz0BA,GAAAxD,GAAA2iB,EAAA,GAGAvT,EAAA,IAAApP,EAAAxB,QAAA,OAAAwB,EAAAxB,QAAA,QAAA,EAEAokB,EAAAD,EAAA,GAEAE,GAAAD,IAAAxT,CAEAyT,KACA7iB,EAAAA,KAAAA,aAAAA,EAAAA,GACA,MAAAA,EAAAA,EAAAtF,OAAA,KAEAsF,EAAAA,EAAAA,OAAAA,EAAAA,EAAAA,OAAAA,IAIA,IAAA8iB,GAAA7c,KAAAwc,gBAAAziB,EAEA,KAAA8iB,EAAA,CACA,GAAAF,GAAA3c,KAAAuZ,qBAAAxf,GAGA8iB,EAAAA,EAAAA,WAAAA,KAAAA,qBAAAA,QACA,IAAA1T,GAAAyT,EAIAC,EAAAA,EAAAA,WAAAA,OAMA,KAAA,GAHAC,IAAAP,GAAA5U,OAAA3H,KAAA+c,kBACAC,EAAAjjB,EAAAZ,QAAA,MAAA,KAEA8jB,EAAA,EAAAA,EAAAH,EAAAroB,OAAAwoB,IAAA,CACA,GAAA9a,GAAA2a,EAAAG,GAAAD,CAEA,IADAH,EAAAA,EAAAA,WAAAA,GAEA,MAIA7c,KAAAwc,gBAAAziB,GAAA8iB,EAQA,IAAAA,GAAA,aAAAA,EAcA,MAbAD,KACAF,EAAA,GAIA1c,KAAAkd,uBAAA3f,EAAAmf,EAAA,GAAA,IAAAA,EAAA,IAGA1c,KAAAkd,uBAAA3f,EAAAxD,EAAA,WAIAiG,KAAAwc,gBAAAziB,GAAA,WAMA,KAAA,GAAAojB,KAAAN,GAAA/jB,UACAkH,KAAAlC,QAAAqf,GAAAN,EAAA/jB,UAAAqkB,EAIAnd,MAAAwc,gBAAAziB,GAAA8iB,KtB40BArZ,IAAA,OACAjO,MAAA,WsBz0BA,OACAsQ,MAAAA,KAAAA,WAAAA,WACAC,OAAAA,KAAAA,WAAAA,gBtB80BAtC,IAAA,iBACAjO,MAAA,WsB10BA,MAAAyK,MAAAod,cAAAC,etBi1BA7Z,IAAA,gBACAjO,MAAA,WsB70BA,GAAA+nB,GAAAtd,IACA8B,UAAAA,WAAAA,SAAAA,GAKA,IAJA,GAAAyb,GAAAD,EAAAC,iBACAC,EAAA/mB,EAAAgnB,gBAAAxlB,GAAA+Q,OAAAwU,OACAE,EAAAjnB,EAAAknB,gBAAAH,EAAAha,KAEA+Z,IAAAC,EAAAI,UAAA,CACA,GAAAC,GAAAN,EAAAhkB,SAAAikB,KACAD,GAAAA,SAAAA,MAAAA,EACAA,EAAAA,KAAAA,QAAAA,GACAG,GACAH,EAAAA,KAAAA,GAAAA,GAEAA,EAAAA,SAAAA,MAAAA,EACAC,EAAAI,SACA3lB,EAAAA,iBAEAslB,EAAAA,EAAAA,UAKAzb,SAAAA,QAAAA,SAAAA,GAIA,IAHA,GAAAyb,GAAAD,EAAAC,iBACAC,EAAA/mB,EAAAgnB,gBAAAxlB,GAAA+Q,OAAAwU,OAEAD,IAAAC,EAAAI,UAAA,CACA,GAAAC,GAAAN,EAAAhkB,SAAAikB,KACAD,GAAAA,SAAAA,MAAAA,EACAA,EAAAA,KAAAA,SAAAA,GACAA,EAAAA,SAAAA,MAAAA,EACAC,EAAAI,SACA3lB,EAAAA,iBAEAslB,EAAAA,EAAAA,atBq1BA/Z,IAAA,QACAjO,MAAA,WsB/0BA,GAAAqkB,GAAAD,KAAAC,MACAkE,EAAAlE,EAAA5Z,KAAA0Z,SACA1Z,MAAA0Z,UAAAE,EACA5Z,KAAAyZ,SAAAa,QAAA,SAAAyD,GAAA,MAAAA,GAAAnE,EAAAkE,QtBw1BAta,IAAA,gBACAjO,MAAA,SAAA4M,GsBp1BA,GAAAA,IAAAnC,MAAAgZ,WACA,MAAAhZ,MAAAgZ,WAAA7W,EAGA,IAAA6b,GAAAhe,KAAAtH,UAAAyJ,EACA,IAAA6b,EAAA,CAIA,GAAA5c,GAAA,MACA,IAAA,WAAA4c,EAAAplB,OAAA,CAEA,GADAwI,EAAAA,EAAAA,IAAAA,EAAAA,OACAA,EACA,MAIAA,GAAAA,EAAAA,gBAAAA,OACA,CACA,GAAAY,GAAAvL,EAAAkB,eAAAwK,GAAA,EACA,KAAAH,EAEA,WADA7J,SAAAA,MAAAA,2CAAAA,EAIAA,SAAAA,IAAAA,yCAAAA,GACAiJ,EAAAA,EAAAA,SAAAA,EAAAA,GAGA,GAAAA,EAIA,MAAA,KAAAA,EAAAhC,UAAA3K,WACA0D,SAAAA,MAAAA,2CAAAA,EAAAA,0DAKAiJ,EAAAA,MAAAA,EACApB,KAAAgZ,WAAA7W,GAAAf,EACAA,OtB01BAoC,IAAA,SACAjO,MAAA,SAAA4M,GsBt1BA,GAAAA,IAAAnC,MAAAiZ,GACA,MAAAjZ,MAAAiZ,GAAA9W,EAGA,IAAA6b,GAAAhe,KAAAtH,UAAAyJ,EACA,IAAA6b,EAIA,MAAA,WAAAA,EAAAplB,OACAnC,EAAAwnB,IAAAD,EAAA1lB,OAGA7B,EAAAA,aACAA,EAAAynB,QAAAznB,EAAAkB,eAAAwK,QtB01BAqB,IAAA,iBACAjO,MAAA,SAAA4oB,GsBv1BAne,KAAA8Z,WAAA7W,KAAAkb,MtB21BA3a,IAAA,gBACAjO,MAAA,SAAA4oB,GsBx1BAne,KAAA6Z,UAAA5W,KAAAkb,MtB41BA3a,IAAA,aACAjO,MAAA,SAAA6oB,GsBz1BApe,KAAAyZ,SAAAxW,KAAAmb,MtB61BA5a,IAAA,gBACAjO,MAAA,SAAA6oB,GsB11BA,GAAAha,GAAApE,KAAAyZ,SAAAlhB,QAAA6lB,EACAha,SACApE,KAAAyZ,SAAApV,OAAAD,EAAA,MtB+1BAZ,IAAA,8BACAjO,MAAA,WsBx1BA,KAAAyK,KAAAmZ,iBAAA1kB,OAAA,GAAA,CACA,GAAA4pB,GAAAre,KAAAmZ,iBAAAmF,OAEA,IAAAD,EAAAE,QAKA,GAAAF,EAAAG,YACAH,EAAAA,aACA,IAAA7F,EAAAjgB,QAAA8lB,EAAAtkB,OAAA,EAAA,CAAA,GAAA7C,GAAAmnB,EAAAnnB,IAAAunB,EAAAJ,EAAAI,OAMAvnB,GAAAwnB,kBAAAD,EAAAnY,YAAApP,EAAAA,EAAAwnB,mBAEAxnB,EAAAA,iBAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAAAA,MAEAA,EAAAynB,kBAAAF,EAAAnY,YAAApP,EAAAA,EAAAynB,mBAEAznB,EAAAA,iBAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAAAA,OAKA8I,KAAA4e,6BtBk2BApb,IAAA,YACAjO,MAAA,SAAAyoB,GsB91BA,GAAA5kB,GAAA4kB,EAAA5kB,MAAA,8BACA,IAAAA,EACA,OACAR,OAAAA,EAAAA,GACAimB,UAAAA,EAAAA,GACAvmB,KAAAA,EAAAA,OtBw2BAkL,IAAA,eACAjO,MAAA,SAAA4M,GsBl2BA,GAAAiW,GAAA5Z,UAAA/J,OAAA,GAAAsE,SAAAyF,UAAA,GAAAA,UAAA,GAAAwB,KAAAsZ,SAEA,KAAAnX,GAAAA,EAAA5J,QAAA,aAAA,IAAA4J,EAAA5J,QAAA,UAAA,IAAA4J,EAAA5J,QAAA,SAEA,MAAA4J,EAGA,IAAA2c,GAAA9e,KAAAtH,UAAA0f,EACA,KAAA0G,EACA,MAAA3c,EAGA,IAAA7J,GAAAwmB,EAAAxmB,IAUA,OARAA,GADA,IAAA6J,EAAA5J,QAAA,KACAD,EAEAA,GAAAA,EAAAA,EAIAA,EAAAA,KAAAA,kBAAAA,EAAAA,QAAAA,eAAAA,OAEA,GAAAwmB,EAAAlmB,OAAAkmB,EAAAD,UAAAvmB,KtB02BAkL,IAAA,mBACAjO,MAAA,SAAAwpB,GsBr2BA,GAAAf,GAAAhe,KAAAtH,UAAAqmB,EAIA,OAAAf,IAAA,WAAAA,EAAAplB,OACAnC,EAAAwnB,IAAAD,EAAA1lB,OAAA0lB,EAAA1lB,KAIAymB,KtBy2BAvb,IAAA,0BACAjO,MAAA,WsBp2BA,KAAAyK,KAAAoZ,kBAAA3kB,OAAA,GAAA,CACA,GAAAuqB,GAAAhf,KAAAoZ,kBAAAkF,OACAU,GAAAA,GAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,IAEAhf,KAAAoZ,wBtB02BA5V,IAAA;AACAjO,MAAA,WsBp2BA,KAAAyK,KAAAkZ,iBAAAzkB,OAAA,GAAA,CACA,GAAAwqB,GAAAjf,KAAAkZ,iBAAAoF,OACAW,UtB62BAxG,IsBx2BAhiB,GAAAA,UAAAA,EpB/oBAP,EAAAA,WAAAA,EACAO,EAAAA,WAAAA,ECgBAN,EAAAA,WAAAA,EACAM,EAAAA,QAAAA,EClBAE,EAAAA,WAAAA,EACAF,EAAAA,UAAAA,CmBJA,IAAAmT,IACAG,KAAAA,EACAD,KAAAA,EACAoQ,QAAAA,EAGAzjB,GAAAA,kBAAAA,CvBoiDA,IAAAgI,GAAA,WwBziDA,QAAAA,GAAAzE,EAAA9C,EAAA6C,GAAAlE,EAAAmK,KAAAvB,GACAuB,KAAA9I,IAAAA,EACA8I,KAAAjG,KAAAA,EACAiG,KAAAye,QAAAhoB,EAAAgO,OAAAE,WAAAzN,IAAAA,IACA8I,KAAAue,QAAA,KACAve,KAAAb,YAAA,KACAa,KAAAd,eAAA,KACAc,KAAAzK,MAAAwD,OACAiH,KAAAhG,KAAAA,EACAgG,KAAAkf,UAAA,KACAlf,KAAAwe,aAAA,EAKAxe,KAAA8D,exBgwDA,MA7MAX,GAAA1E,IACA+E,IAAA,UACAjO,MAAA,SAAAU,EAAAiJ,GwB/iDA,GAAAhD,GAAAzF,EAAAyF,YACA,IAAAA,EAAA8D,KAAAhG,QAAAvD,EAAA0oB,QACAnf,KAAA/J,IAAAQ,EAAA0oB,SACA7oB,OAAAA,EACAC,OAAAA,KAAAA,IACAC,QAAAA,QAEA,IAAAP,YAAAQ,GAAAC,eAAA,CACA,GAAA0oB,GAAA3oB,EAAAoF,eAAA,QAAA,MAAA,YACAK,GAAAjG,EAAAwH,UAAA2hB,GAAAljB,EAAA8D,KAAAhG,QAAAolB,GAEApf,KAAA/J,IAAA,GAAAmpB,IACA9oB,OAAAA,EACAC,OAAAA,KAAAA,IACAC,QAAAA,IAMAwJ,KAAA/J,IAAAqjB,UAAApa,EAAAoa,WAEAtZ,KAAA/J,IAAAQ,EAAA4G,WACA/G,OAAAA,EACAC,OAAAA,KAAAA,IACAC,QAAAA,QAGAP,aAAAb,SAAA2D,SAAA9C,GAAA,OAAAA,EACA+J,KAAA/J,IAAAA,EACAiG,EAAA8D,KAAAhG,MAAAqlB,UACArf,KAAA/J,IAAAiG,EAAA8D,KAAAhG,MAAA/D,GAEA+J,KAAA/J,IAAA,GAAAiG,GAAA8D,KAAAhG,MAAA/D,MxBujDAuN,IAAA,SACAjO,MAAA,WwB/iDA,GAFAyK,KAAAwe,aAAA,EAEAxe,KAAAue,QAAA,CAIA,GAAAe,GAAAtf,KAAA/J,GAEA,KACAwI,EAAAA,uBAAAA,MACAuB,KAAAue,QAAAzd,UACAd,KAAAue,QAAAgB,UAEAvf,KAAAwf,QAAAxf,KAAAue,QAAArd,KAAAlB,KAAAb,YAAAa,KAAAd,eAAAc,KAAAyf,wBAAAzf,KAAAd,gBAEA,MAAAjH,GACAE,QAAAA,IAAAA,oCAAAA,EAAAA,SAAAA,UAAAA,SAAAA,KAAAA,KAAAA,QAAAA,OAIA,QACAsG,EAAAA,wBAGAuB,KAAAkf,YACAlf,KAAAkf,UAAAQ,WACArc,OAAAA,KAAAA,UAAAA,QAAAA,KAAAA,IACAgb,SAAAA,KAAAA,UAAAA,UAAAA,KAAAA,KACA3pB,KAAAA,KAAAA,UAAAA,MAAAA,EACAirB,GAAAA,KAAAA,UAAAA,IAAAA,KAAAA,MAEA3f,KAAAkf,UAAAU,WAGA5f,KAAA/J,MAAAqpB,GACAtf,KAAAye,QAAAze,KAAA/J,IAAAqpB,EAAAtf,KAAAjG,UxBqjDAyJ,IAAA,MACAjO,MAAA,WwB/hDA,MAhBAyK,MAAAwe,aAAA/nB,EAAAK,OAAA+S,iBAAApT,EAAAmT,kBAAAE,MAEA9J,KAAA6f,SAKAphB,EAAA2d,oBAEApc,KAAAye,QAAA5d,QAAApC,EAAA2d,mBAAA3d,EAAAtJ,UAAA0qB,OAAAppB,EAAAgO,OAAAoC,kBAOA7G,KAAA/J,KAAA+J,KAAA/J,IAAA6pB,KACA9f,KAAA/J,IAAA6pB,OAGA9f,KAAA/J,OxBijDAuN,IAAA,MACAjO,MAAA,SAAA8mB,EAAA0D,EAAA5gB,EAAAD,GwB9iDA,GAAAogB,GAAAtf,KAAA/J,IAEAA,EAAAomB,CACA,IAAApmB,YAAAQ,GAAAwhB,WAAA,CACA,IAAA9Y,IAAAD,EACA,KAAA,IAAAb,OAAA,iDAOA,IALA2B,KAAAue,QAAAtoB,EACA+J,KAAAb,YAAAA,EACAa,KAAAd,eAAAA,EACAc,KAAAyf,uBAAAvgB,EAAAoa,UAEA7iB,EAAAK,OAAA+S,iBAAApT,EAAAmT,kBAAAE,KAcA,WADArT,GAAAA,OAAAA,iBAAAA,KAAAA,KAZAR,GAAA6K,UACA7K,EAAAA,SAEA,KACAwI,EAAAA,uBAAAA,MACAuB,KAAAwe,aAAA,EACAvoB,EAAAA,KAAAA,QAAAA,KAAAA,EAAAA,EAAAA,KAAAA,wBAEA,QACAwI,EAAAA,6BAOAshB,KAAAthB,EAAAuhB,kBACAhgB,KAAAue,QAAA,MAEAtoB,YAAA5B,SACA4B,EAAAA,EAAAA,QAIA8pB,KAAAthB,EAAAwhB,YAAA,mBAAAhqB,IACAwI,EAAAyhB,kBAAAnlB,eAAAiF,KAAAhG,QACA/D,EAAAA,EAAAA,kBAAAA,KAAAA,OAIA+J,KAAAwf,QAAAvpB,EAAAiJ,GAEAc,KAAA/J,MAAAqpB,IACAtf,KAAAkf,WAAAa,IAAAthB,EAAA0hB,aACAngB,KAAAkf,UAAApG,SAAA,EACA9Y,KAAAkf,UAAAQ,WACArc,OAAAA,KAAAA,UAAAA,QAAAA,KAAAA,IACAgb,SAAAA,KAAAA,UAAAA,UAAAA,KAAAA,KACA3pB,KAAAA,KAAAA,UAAAA,MAAAA,EACAirB,GAAAA,KAAAA,UAAAA,IAAAA,KAAAA,MAEA3f,KAAAkf,UAAApG,SAAA,GAEA9Y,KAAA9I,IAAAkpB,gCAAA3mB,WAAAsmB,IAAAthB,EAAA0hB,WAGAngB,KAAA9I,IAAAkpB,sBAAApgB,KAAAjG,KAAA9D,GAEA+J,KAAAye,QAAAze,KAAA/J,IAAAqpB,EAAAtf,KAAAjG,YxBkjDAyJ,IAAA,gBACAjO,MAAA,WwB7iDAkJ,EAAAA,gCAAAA,KAAAA,EAAAA,yBAGAA,EAAAA,2BACAA,EAAAA,mBAAAA,UxBgjDA+E,IAAA,eACAjO,MAAA,WwB5iDAkJ,EAAAA,wBAAAA,EAAAA,gCAAAA,UAEAA,EAAAA,mBAAAA,EAAAA,wBAAAA,EAAAA,wBAAAA,OAAAA,MxB+iDA+E,IAAA,yBACAjO,MAAA,SAAAmJ,GwBtiDAD,EAAA4hB,wBAAA9nB,QAAAmG,IAAA,GACAvG,QAAAA,MAAAA,8CAAAA,EAAAA,MAAAA,GAAAA,MAAAA,IAKAsG,EAAAA,mBAAAA,EACAA,EAAAA,wBAAAA,KAAAA,MxB0iDA+E,IAAA,wBACAjO,MAAA,WwBviDAkJ,EAAAA,wBAAAA,MACAA,EAAAA,mBAAAA,EAAAA,wBAAAA,EAAAA,wBAAAA,OAAAA,OxB4iDAA,IwBniDAA,GAAAA,mBAAAA,OACAA,EAAAA,0BAAAA,EACAA,EAAAA,2BACAA,EAAAA,mCAEAA,EAAAA,mBACA6hB,MAAAA,EACAC,KAAAA,EACAC,SAAAA,EACAC,OAAAA,GACAC,MAAAA,EACArqB,QACAsqB,OAAAA,EACA/oB,IAAAA,IAGA6G,EAAAA,WAAAA,EACAA,EAAAA,WAAAA,EACAA,EAAAA,gBAAAA,EAEAhI,EAAAA,YAAAA,EnB9PAG,EAAAA,WAAAA,EACAH,EAAAA,UAAAA,ECDAI,EAAAA,WAAAA,EACAJ,EAAAA,OAAAA,ECDAO,EAAAA,WAAAA,EACAP,EAAAA,WAAAA,EkBJAuS,OAAAA,iBAAAA,OAAAA,WAEA,IAAA,GADA4X,GAAA9e,SAAAC,qBAAA,QACAxN,EAAA,EAAAA,EAAAqsB,EAAAnsB,SAAAF,EAAA,CACA,GAAAssB,GAAAD,EAAArsB,GACAiF,EAAAqnB,EAAAC,aAAA,WACA,IAAAtnB,EAAA,CACA/C,EAAAA,UAAAA,GAAAA,GAAAA,UACAA,EAAAA,UAAAA,SAAAA,GACAA,EAAAA,UAAAA,OACA,UCTA,IAAAsqB,IACAC,OAAAA,EACAC,OAAAA,EAAAA,QAAAA,EAAAA,UAAAA,EAAAA,UAAAA,EACAC,QAAAA,EAAAA,SAAAA,EAAAA,WAAAA,EAAAA,WAAAA,EACAC,QAAAA,GAAAA,SAAAA,GAAAA,WAAAA,GAAAA,WAAAA,GACAC,QAAAA,GAAAA,SAAAA,GAAAA,WAAAA,GAAAA,WAAAA,GACAC,OAAAA,GAAAA,QAAAA,GAAAA,UAAAA,GAAAA,UAAAA,GACAC,OAAAA,GAAAA,QAAAA,GAAAA,UAAAA,GAAAA,UAAAA,GACAC,OAAAA,GAAAA,QAAAA,GAAAA,UAAAA,GAAAA,UAAAA,GACAC,UAAAA,GAAAA,WAAAA,GAAAA,aAAAA,GAAAA,aAAAA,GACAC,OAAAA,GAAAA,QAAAA,GAAAA,UAAAA,GAAAA,UAAAA,GACAC,SAAAA,GAAAA,UAAAA,GAAAA,YAAAA,GAAAA,YAAAA,GAIAjrB,GAAAA,MAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACA,OAAAuD,GAEA,IAAA+mB,GAAAC,OACA,MAAA5C,EAGA,KAAA2C,GAAAE,OACA,MAAA7b,MAAAuc,IAAAvD,EAAA,EACA,KAAA2C,GAAAa,QACA,OAAAxc,KAAAuc,IAAAvD,EAAA,EAAA,GAAA,CACA,KAAA2C,GAAAc,UACA,MAAAzD,GAAA,GACA,EAAAhZ,KAAAuc,IAAAvD,EAAA,MAEAhZ,KAAAuc,IAAAvD,EAAA,EAAA,GAAA,CACA,KAAA2C,GAAAe,UACA,MAAA1D,GAAA,MACAhZ,KAAAuc,IAAAvD,EAAA,GAAA,GAAA,GAEA,EAAAhZ,KAAAuc,IAAAvD,EAAA,GAAA,GAAA,EAGA,KAAA2C,GAAAG,QACA,MAAA9b,MAAAuc,IAAAvD,EAAA,EACA,KAAA2C,GAAAgB,SACA,MAAA3c,MAAAuc,IAAAvD,EAAA,EAAA,GAAA,CACA,KAAA2C,GAAAiB,WACA,MAAA5D,GAAA,GACA,EAAAhZ,KAAAuc,IAAAvD,EAAA,GAEA,EAAAhZ,KAAAuc,IAAAvD,EAAA,EAAA,GAAA,CACA,KAAA2C,GAAAkB,WACA,MAAA,GAAA7c,KAAAuc,IAAAvD,EAAA,GAAA,GAAA,EAGA,KAAA2C,GAAAI,QACA,MAAA/b,MAAAuc,IAAAvD,EAAA,EACA,KAAA2C,GAAAmB,SACA,OAAA9c,KAAAuc,IAAAvD,EAAA,EAAA,GAAA,CACA,KAAA2C,GAAAoB,WACA,MAAA/D,GAAA,GACA,EAAAhZ,KAAAuc,IAAAvD,EAAA,MAEAhZ,KAAAuc,IAAAvD,EAAA,EAAA,GAAA,CACA,KAAA2C,GAAAqB,WACA,MAAAhE,GAAA,MACAhZ,KAAAuc,IAAAvD,EAAA,GAAA,GAAA,GAEA,EAAAhZ,KAAAuc,IAAAvD,EAAA,GAAA,GAAA,EAGA,KAAA2C,GAAAK,QACA,MAAAhc,MAAAuc,IAAAvD,EAAA,EACA,KAAA2C,GAAAsB,SACA,MAAAjd,MAAAuc,IAAAvD,EAAA,EAAA,GAAA,CACA,KAAA2C,GAAAuB,WACA,MAAAlE,GAAA,GACA,GAAAhZ,KAAAuc,IAAAvD,EAAA,GAEA,GAAAhZ,KAAAuc,IAAAvD,EAAA,EAAA,GAAA,CACA,KAAA2C,GAAAwB,WACA,MAAAnE,GAAA,GACA,GAAAhZ,KAAAuc,IAAAvD,EAAA,GAAA,GAAA,GAEA,GAAAhZ,KAAAuc,IAAAvD,EAAA,GAAA,GAAA,EAGA,KAAA2C,GAAAM,OACA,OAAAjc,KAAAod,IAAA,GAAApd,KAAAqd,GAAArE,GAAA,CACA,KAAA2C,GAAA2B,QACA,MAAAtd,MAAAud,IAAA,GAAAvd,KAAAqd,GAAArE,EACA,KAAA2C,GAAA6B,UACA,UAAAxd,KAAAod,IAAApd,KAAAqd,GAAArE,GAAA,EACA,KAAA2C,GAAA8B,UACA,MAAAzE,GAAA,GACA,GAAAhZ,KAAAud,IAAAvd,KAAAqd,GAAArE,OAEAhZ,KAAAud,IAAAvd,KAAAqd,GAAArE,GAAA,CAGA,KAAA2C,GAAAO,OACA,MAAA,GAAA,MAAAlc,KAAAuc,IAAA,EAAA,GAAAvD,GAAA,EACA,KAAA2C,GAAA+B,QACA,YAAA,MAAA1d,KAAAuc,IAAA,MAAAvD,GAAA,EACA,KAAA2C,GAAAgC,UACA,MAAA3E,GAAA,GACA,EAAA,IAAAhZ,KAAAuc,IAAA,EAAA,GAAAvD,GAAA,QAEA,GAAAhZ,KAAAuc,IAAA,MAAAvD,GAAA,GAAA,EACA,KAAA2C,GAAAiC,UACA,MAAA5E,GAAA,OACA,IAAAhZ,KAAAuc,IAAA,MAAAvD,GAAA,GAEA,EAAA,KAAAhZ,KAAAuc,IAAA,EAAA,GAAAvD,GAAA,GAAA,EAGA,KAAA2C,GAAAQ,OACA,MAAA,GAAAnc,KAAA6d,KAAA,EAAA7E,EAAAA,EACA,KAAA2C,GAAAmC,QACA,MAAA9d,MAAA6d,KAAA,EAAA7d,KAAAuc,IAAAvD,EAAA,EAAA,GACA,KAAA2C,GAAAoC,UACA,MAAA/E,GAAA,GACA,IAAA,EAAAhZ,KAAA6d,KAAA,EAAA,EAAA7E,EAAAA,IAEA,IAAAhZ,KAAA6d,KAAA,EAAA,EAAA7d,KAAAuc,IAAAvD,EAAA,EAAA,IAAA,EACA,KAAA2C,GAAAqC,UACA,MAAAhF,GAAA,GACA,GAAAhZ,KAAA6d,KAAA,EAAA7d,KAAAuc,IAAA,EAAAvD,EAAA,EAAA,IAEA,IAAA,EAAAhZ,KAAA6d,KAAA,EAAA7d,KAAAuc,IAAA,EAAAvD,EAAA,EAAA,IAGA,KAAA2C,GAAAS,UACA,OAAA6B,EAAAje,KAAAuc,IAAA,EAAA,GAAAvD,EAAA,IAAAhZ,KAAAud,IAAA,EAAAvE,EAAAhZ,KAAAqd,GAAAa,EAAAle,KAAAme,KAAA,EAAAF,GAEA,KAAAtC,GAAAyC,WACA,MAAAH,GAAAje,KAAAuc,IAAA,MAAAvD,GAAAhZ,KAAAud,IAAA,EAAAvE,EAAAhZ,KAAAqd,GAAAa,EAAAle,KAAAme,KAAA,EAAAF,IAAA,CAEA,KAAAtC,GAAA0C,aACA,MAAArF,GAAA,OACAiF,EAAAje,KAAAuc,IAAA,EAAA,GAAAvD,EAAA,IAAAhZ,KAAAud,IAAA,EAAAvE,EAAAhZ,KAAAqd,GAAAa,EAAAle,KAAAme,KAAA,EAAAF,QAGAA,EAAAje,KAAAuc,IAAA,MAAAvD,EAAA,IAAAhZ,KAAAud,IAAA,EAAAvE,EAAAhZ,KAAAqd,GAAAa,EAAAle,KAAAme,KAAA,EAAAF,IAAA,CAEA,KAAAtC,GAAA2C,aACA,MAAAtF,GAAA,GACA,GAAAiF,EAAAje,KAAAuc,IAAA,MAAAvD,GAAAhZ,KAAAud,IAAA,EAAAvE,EAAAhZ,KAAAqd,GAAAa,EAAAle,KAAAme,KAAA,EAAAF,IAAA,OAGAA,EAAAje,KAAAuc,IAAA,EAAA,GAAAvD,EAAA,IAAAhZ,KAAAud,IAAA,EAAAvE,EAAAhZ,KAAAqd,GAAAa,EAAAle,KAAAme,KAAA,EAAAF,IAAA,EAIA,KAAAtC,GAAAU,OACA,OAAAkC,EAAA,GAAAve,KAAAuc,IAAAvD,EAAA,GAAAuF,EAAAve,KAAAuc,IAAAvD,EAAA,EACA,KAAA2C,GAAA6C,QACA,OAAAD,EAAA,GAAAve,KAAAuc,IAAAvD,EAAA,EAAA,GAAAuF,EAAAve,KAAAuc,IAAAvD,EAAA,EAAA,GAAA,CAEA,KAAA2C,GAAA8C,UACA,MAAAzF,GAAA,GACA,GAAAuF,EAAA,GAAAve,KAAAuc,IAAAvD,EAAA,GAAA,EAAAuF,EAAAve,KAAAuc,IAAAvD,EAAA,GAGA,IAAAuF,EAAA,GAAAve,KAAAuc,IAAA,EAAAvD,EAAA,EAAA,GAAAuF,EAAA,EAAAve,KAAAuc,IAAA,EAAAvD,EAAA,EAAA,GAAA,CAEA,KAAA2C,GAAA+C,UACA,MAAA1F,GAAA,GACA,KAAAuF,EAAA,GAAAve,KAAAuc,IAAA,EAAAvD,EAAA,EAAA,GAAAuF,EAAAve,KAAAuc,IAAA,EAAAvD,EAAA,EAAA,GAAA,GAGA,GAAAuF,EAAA,GAAAve,KAAAuc,IAAAvD,EAAA,GAAA,GAAA,EAAAuF,EAAAve,KAAAuc,IAAAvD,EAAA,GAAA,GAAA,EAGA,KAAA2C,GAAAW,SACA,MAAAtD,GAAA,EAAA,GACA,KAAAiF,EAAA,IAAAjF,EAAAA,EAAA,EAAA,GAAAA,GACAA,EAAA,EAAA,GACA,KAAAiF,EAAA,IAAAjF,EAAAA,EAAA,EAAA,GAAAA,EAAA,EAAA,KACAA,EAAA,EAAA,GACA,KAAAiF,EAAA,IAAAjF,EAAAA,EAAA,GAAA,GAAAA,EAAA,GAAA,cAEAA,EAAAA,EAAA,EAAAA,EAAA,GAAA,CACA,KAAA2C,GAAAgD,UACA,MAAA3F,GAAA,EAAA,GACA,OAAAA,EAAAA,EACAA,EAAA,EAAA,GACA,OAAAiF,GAAAjF,EAAAA,EAAA,GAAA,GAAAA,EAAA,GAAA,KAAA,EACAA,EAAA,GAAA,GACA,OAAAiF,GAAAjF,EAAAA,EAAA,GAAA,GAAAA,EAAA,GAAA,KAAA,EAEA,OAAAiF,GAAAjF,EAAAA,EAAA,GAAA,GAAAA,EAAA,GAAA,IAAA,CACA,KAAA2C,GAAAiD,YACA,MAAA5F,GAAA,EAAA,GACA,KAAAiF,EAAA,GAAAjF,EAAAA,EAAA,EAAA,GAAAA,GACAA,EAAA,EAAA,GACA,KAAAiF,EAAA,GAAAjF,EAAAA,EAAA,EAAA,GAAAA,EAAA,EAAA,KACAA,EAAA,EAAA,GACA,KAAAiF,EAAA,GAAAjF,EAAAA,EAAA,EAAA,GAAAA,EAAA,GAAA,KACAA,EAAA,QACA,GAAAA,EAAAA,EAAAA,EAAA,KAAA,GACAA,EAAA,GAAA,GACA,IAAA,GAAAA,EAAAA,EAAAA,GAAA,IAAA,GACAA,EAAA,GAAA,GACA,IAAAiF,EAAA,GAAAjF,EAAAA,EAAA,GAAA,GAAAA,EAAA,IAAA,KAAA,EACAA,EAAA,GAAA,GACA,IAAAiF,EAAA,GAAAjF,EAAAA,EAAA,GAAA,GAAAA,EAAA,IAAA,KAAA,EAEA,IAAAiF,EAAA,GAAAjF,EAAAA,EAAA,GAAA,GAAAA,EAAA,GAAA,IAAA,CACA,KAAA2C,GAAAkD,YACA,MAAA7F,GAAA,EAAA,GACA,IAAA,EAAAA,EAAAA,EACAA,EAAA,EAAA,GACA,KAAAiF,EAAA,GAAAjF,EAAAA,EAAA,EAAA,GAAAA,EAAA,EAAA,KAAA,GACAA,EAAA,GAAA,GACA,KAAAiF,EAAA,GAAAjF,EAAAA,EAAA,EAAA,GAAAA,EAAA,GAAA,KAAA,GACAA,EAAA,GACA,KAAAiF,EAAA,GAAAjF,EAAAA,EAAA,GAAA,GAAAA,EAAA,EAAA,IAAA,GACAA,EAAA,GAAA,GACA,IAAAiF,EAAA,GAAAjF,EAAAA,EAAA,GAAA,GAAAA,EAAA,EAAA,IAAA,GACAA,EAAA,GAAA,GACA,IAAAiF,EAAA,GAAAjF,EAAAA,EAAA,GAAA,GAAAA,EAAA,GAAA,KAAA,GACAA,EAAA,GAAA,GACA,IAAAiF,EAAA,GAAAjF,EAAAA,EAAA,GAAA,GAAAA,EAAA,GAAA,KAAA,QAEA,GAAAA,EAAAA,EAAA,EAAAA,EAAA,IAAA,KAAA,EAGA,SAEA,MADAjmB,SAAAA,MAAAA,+BAAAA,GACAimB,IAIA3nB,EAAAA,OAAAA,ElB3MAA,EAAAA,YAAAA,EACAA,EAAAA,YAAAA,EACAA,EAAAA,kBAAAA,CR6iEA,IAAAytB,GAAA,WACA,QAAAA,KACAruB,EAAAmK,KAAAkkB,GAuCA,MApCA/gB,GAAA+gB,EAAA,OACA1gB,IAAA,iBACAjO,MAAA,SAAA4uB,EAAA5J,G2B9kEA,IAAAlmB,MAAAc,UAAAivB,UAAA,CACA,IAAA,GAAA5gB,KAAA2gB,GACA,GAAA5J,EAAA4J,EAAA3gB,GAAAA,EAAA2gB,GACA,MAAA3gB,EAGA,UAEA,MAAAnP,OAAAc,UAAAivB,UAAAvvB,KAAAsvB,EAAA5J,M3BmlEA/W,IAAA,eACAjO,MAAA,W2BllEA,IAAA,GACA8uB,MADAC,EAAA9lB,UAAA/J,OAAA8L,EAAAlM,MAAAiwB,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAhkB,EAAAA,GAAAA,UAAAA,EAEA,KAAA,GAAAhM,KAAAgM,GAAA,CACA,GAAAikB,GAAAjkB,EAAAhM,EACA,IAAAiwB,EAGA,IAAA,GAAAhhB,KAAAghB,GACAH,EAAAA,GAAAA,EAAAA,GAGA,MAAAA,O3B2lEAH,I2BvlEAztB,GAAAA,QAAAA,ElBiCA,mBAAAA,GAAAqB,kBACArB,EAAAA,oBAsFAA,EAAAA,eAAAA,EACAA,EAAAA,WAAAA,ECzIAA,EAAAA,0BAAAA,EkBZAA,EAAAA,YAAAA,SAAAA,GACA,GAAA0H,GAAA1H,EAAA0H,EAEA,OADAlG,GAAAA,OAAAA,EAAAA,SAAAA,IAAAA,EAAAA,SAAAA,IACAA,EAAAwsB,UAAAtmB,EAAA6M,SAAA/S,EAAAysB,SACAvmB,EAAA8M,YAEAhT,EAAAwsB,SAAA,IAAAxsB,EAAAwsB,SAAA,IACAxsB,EAAAwsB,SAAA,GAAAtmB,EAAAiR,OAEAnX,EAAAwsB,SAGAhuB,EAAAA,gBAAAA,SAAAA,GAAA,OACAmnB,UAAAA,EACA+G,MAAAA,EACAC,cAAAA,EACAphB,IAAAA,EAAAA,YAAAA,GACAqhB,UAAAA,EAAAA,QAAAA,EAAAA,GAAAA,aAAAA,EAAAA,OAAAA,EAAAA,GAAAA,YAAAA,EAAAA,SAAAA,EAAAA,GAAAA,cAAAA,EAAAA,QAAAA,EAAAA,GAAAA,aAAAA,EAAAA,OAAAA,EAAAA,GAAAA,eAKAC,KAAAA,OAAAA,aAAAA,EAAAA,YAGAruB,EAAAA,oBACA,WAAA,OAAA,UAAA,OAAA,SAAA,SAAA,SAAA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,SAAA,OAAA,KAAA,SAAA,SAAA,QAAA,MAAA,aAAA,WAAA,MAAA,KAAA,QAAA,OAAA,QAAA6jB,QAAA,SAAA9W,GAKA,GAAAzJ,GAAAyJ,EAAA8B,WACAyf,EAAA,OAAAhrB,EAAA,GAAAirB,cAAAjrB,EAAAyF,MAAA,GACAylB,EAAA,gBAAAzhB,GAAA,QAAA,EACA/M,GAAAA,gBAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,YjBlCAA,EAAAA,iBAAAA,IAEA,IAAAwD,IACAsC,MACA+jB,MAAAA,EAAAA,WACAC,KAAAA,EAAAA,UACAC,SAAAA,EAAAA,UACAC,OAAAA,EAAAA,UACAC,KAAAA,EAAAA,WACArqB,KAAAA,EAAAA,QACA6uB,MAAAA,EAAAA,OACAvE,OAAAA,EAAAA,UACA/oB,IAAAA,EAAAA,OACAutB,QAAAA,EAAAA,WACAC,MAAAA,EAAAA,YAKA3uB,GAAAA,aAAAA,EAAAA,IAEA,IAAAqE,OAEAgC,MACAuoB,GAAA,CAoRA5uB,GAAAA,QAAAA,EACAA,EAAAA,sBAAAA,EACAA,EAAAA,gBAAAA,EACAA,EAAAA,eAAAA,EACAA,EAAAA,YAAAA,EACAA,EAAAA,UAAAA,EACAA,EAAAA,UAAAA,ECrDAA,EAAAA,eAAAA,EACAA,EAAAA,gBAAAA,EACAA,EAAAA,cAAAA,CZyoFA,IAAAqJ,IAAA,SAAAwlB,GAGA,QAAAxlB,KAGA,MAFAjK,GAAAmK,KAAAF,GAEAnL,EAAAqL,MAAAF,EAAAlK,WAAAR,OAAA4Q,eAAAlG,IAAAsG,MAAApG,KAAAxB,YAGA,MARAzJ,GAAA+K,EAAAwlB,GAQAxlB,GACArJ,EAAAwhB,YAUAtX,GAAA,QAAAA,IAAA3G,EAAAzE,Gax3FAM,EAAAmK,KAAAW,IACAX,KAAAhG,KAAAA,EACAgG,KAAAzK,MAAAA,Gb63FAwK,GAAA,QAAAA,IAAAwlB,EAAApuB,Gax3FAtB,EAAAmK,KAAAD,IACAC,KAAAC,WAAAslB,EACAvlB,KAAAE,aAAA/I,Gbo4FA0I,GAAA,QAAAA,IAAAzC,Ga13FAvH,EAAAmK,KAAAH,IACAG,KAAAgB,WAAA5D,Gbq4FAwD,GAAA,QAAAA,MACA/K,EAAAmK,KAAAY,KAUAlK,GAAA,QAAAA,IAAAsD,EAAAwrB,Ga/3FA3vB,EAAAmK,KAAAtJ,IACAsJ,KAAAvC,OAAAzD,EACAgG,KAAAZ,aACAY,KAAAylB,IAAAD,EAiCArkB,GAAAA,SACAukB,SAAAA,SAAAA,EAAAA,GACA,GAAApoB,IAAAG,OAAA,YAGA,OAFAH,GAAAA,SAAAA,EACAA,EAAAA,WAAAA,EAAAA,KAAAA,IACAA,GAEAqoB,QAAAA,SAAAA,EAAAA,EAAAA,GACA,GAAAroB,GAAA,GAAA5G,IAAA4K,EAAAC,GAAAikB,EAEA,KAAA,GAAAjxB,KAAAqxB,GAAA,CACA,GAAAC,GAAAD,EAAArxB,GACAwF,EAAA8rB,EAAA,GACA5vB,EAAAkL,EAAAE,KAAAwkB,EACA,QAAAA,EAAA,IACA,IAAA,iBACAvoB,EAAAA,iBAAAA,EACAA,EAAAA,GAAAA,CACA,MACA,KAAA,UACA,IAAA,aACA,IAAA,cACA,IAAA,YACA,IAAA,eACAmE,EAAAA,EAAAA,EAAAA,EACA,MACA,KAAA,UACAnE,EAAAA,UAAAA,KAAAA,EACA,MACA,KAAA,YACA,KAAA,IAAAe,OAAA,iEAGA,KAAA,SAEAf,EAAAA,GAAAA,EAAAA,IAAAA,GAAAA,GACA,KAAA,GAAAyD,KAAA9K,GACAqH,EAAAA,GAAAA,GAAAA,EAAAA,EAEA,MACA,SACAnF,QAAAA,IAAAA,oBAAAA,IAQA,MAJA,KAAAmF,EAAA8B,UAAA3K,SACA6I,EAAAA,UAAAA,EAAAA,UAAAA,IAGAA,GAEAwoB,QAAAA,SAAAA,EAAAA,EAAAA,GACA,MAAA,OAAA/rB,EAEAqH,EAAA,GAAA,GAEAD,EAAA4kB,QAAA3kB,EAAAY,IAEAgkB,UAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAA,MAAA7kB,GAAA4kB,QAAA3kB,EAAAY,IAEAikB,OAAAA,SAAAA,EAAAA,GACA,GAAA3oB,KACA,KAAA,GAAA/I,KAAAqxB,GAAA,CACA,GAAAC,GAAAD,EAAArxB,GACAwF,EAAA8rB,EAAA,GACA5vB,EAAAkL,EAAAE,KAAAwkB,EACA,aAAAA,EAAA,IACApkB,EAAAA,EAAAA,EAAAA,GAGA,MAAAnE,IAEA4oB,UAAAA,SAAAA,EAAAA,EAAAA,GAAA,MAAA,IAAApmB,IAAAkC,IAEAmkB,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAA,MAAA,IAAAxlB,IAAA3G,EAAAoH,EAAAD,EAAA4kB,QAAA3kB,EAAAY,GAAAjJ,SAKAqtB,YAAAA,SAAAA,EAAAA,EAAAA,GAAA,MAAA,IAAArmB,IAAAwlB,EAAApuB,IAEAkvB,aAAAA,SAAAA,EAAAA,GAAA,MAAA,IAAAxmB,IAAAzC,IAEAkpB,eAAAA,SAAAA,GAAA,MAAAnlB,GAAAE,KAAAD,IACArH,KAAAA,SAAAA,GACA,MAAA,SAAAiI,GAAA,UAAAA,EACA,SAAAA,EACA,iBAAAA,GAEAA,EAEA,GAAAvL,GAAAwhB,WAAAjW,GAAA,OAAAA,KAEAukB,IAAAA,SAAAA,GAAA,OAAAvkB,GACAye,OAAAA,SAAAA,GAAA,MAAA1Z,QAAA/E,IACAmiB,MAAAA,SAAAA,EAAAA,GACA,GAAA7b,MACAke,GAAA,EACAC,GAAA,CACA,KAAA,GAAAlyB,KAAA6M,GAAA,CACA,GAAAnL,GAAAkL,EAAA4kB,QAAA3kB,EAAA7M,GACA+T,GAAAA,KAAAA,GAEArS,YAAAS,IACA8vB,GAAAA,EACAvwB,YAAAQ,GAAAwhB,aACAwO,GAAAA,GAIA,GAAAA,EAAA,CACA,GAAAD,EACA,KAAA,IAAAtxB,WAAA,+DAIA,OAAA,IAAAuB,GAAAwhB,WAAAjW,EAAAZ,GAGA,MAAAkH,KAIAnH,EAAAA,KAAAA,SAAAA,GACA,GAAAnH,GAAAoH,EAAA,GACAslB,EAAAvlB,EAAAwlB,QAAA3sB,EACA,OAAA0sB,GAIAA,EAAAtgB,MAAApM,EAAAoH,EAAA5B,MAAA,QAHArH,SAAAA,IAAAA,iBAAAA,IAOAgJ,EAAAA,QAAAA,SAAAA,EAAAA,GAGA,GAAAC,GAAA,SAAAykB,EAAA,GAAAA,EAAA,GAAAA,EAEA7rB,EAAAoH,EAAA,GACAslB,EAAAvlB,EAAAwlB,QAAA3sB,EACA,OAAA0sB,GACAA,EAAAtgB,MAAApM,EAAAoH,EAAA5B,MAAA,IAEA,GAAA/I,GAAAwhB,WAAAsG,EAAAnd,IAIAD,EAAAA,KAAAA,SAAAA,EAAAA,GACAhJ,QAAAA,IAAAA,GACAiJ,GAAAjJ,QAAAyuB,IAAAC,KAAAC,UAAA1lB,EAAA,KAAA,QAqCA3K,EAAAA,UAAAA,GACAA,EAAAA,sBAAAA,GACAA,EAAAA,mBAAAA,GACAA,EAAAA,oBAAAA,GACAA,EAAAA,qBAAAA,GACAA,EAAAA,eAAAA,GACAA,EAAAA,gBAAAA,EACAA,EAAAA,WAAAA,EACAA,EAAAA,SAAAA,EgBnRAA,EAAAA,OC7BAA,EAAAA,iBACA0E,OAAAA,aACApB,KAAAA,aACAqB,SAAAA,KACAhB,UAAAA,eACAoB,YACAurB,SAAAA,KAAAA,SAAAA,aAAAA,SANA,WASA,QAAAC,GAAA5wB,GAAAP,EAAAmK,KAAAgnB,GACAvwB,EAAAA,UAAAA,KAAAA,EAEA,IAAAswB,GAAA3wB,EAAAE,OAAAywB,SAAA,KACA/mB,MAAA1B,IAAAwD,SAAAmZ,cAAA8L,GAbA,MAAAC,OCAAvwB,EAAAA,iBACA0E,OAAAA,SACApB,KAAAA,YACAqB,SAAAA,KACAhB,UAAAA,eACAoB,YACA5D,IAAAA,SACAqvB,UAAAA,OACAC,UAAAA,KAAAA,SAAAA,aAAAA,oBACAC,eACAntB,KAAAA,SACAotB,aAAAA,iCAGA9rB,SACA+rB,WACAC,WAhBA,WAmBA,QAAAC,GAAAnxB,GAAAP,EAAAmK,KAAAunB,GACA9wB,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAAwnB,WAAAxnB,KAAAynB,gBACAznB,KAAA0nB,gBAAA,EAvBA,MAAAvkB,GAAAokB,IAAA/jB,IAAA,QAAAjO,MAAA,WAyBA,GAAAoyB,GAAA3nB,IACAA,MAAA4nB,OACAC,OAAAA,MACAX,SAAAA,KAAAA,SACAY,QAAAA,SAAAA,GACAH,EAAAI,iBAAAhwB,GACA4vB,EAAAN,gBA/BA7jB,IAAA,SAAAjO,MAAA,WAmCA,GAAAyyB,GAAAhoB,IACAA,MAAA4nB,OACAC,OAAAA,SACAC,QAAAA,WACAE,EAAAC,gBAvCAzkB,IAAA,SAAAjO,MAAA,WA4CAyK,KAAAkoB,cAAA,WA5CA1kB,IAAA,OAAAjO,MAAA,WA+CAyK,KAAAkoB,cAAA,UA/CA1kB,IAAA,gBAAAjO,MAAA,SAAAsyB,GAiDA,GAAAM,GAAAnoB,IACAA,MAAA4nB,OACAC,OAAAA,EACAX,SAAAA,KAAAA,cACAkB,KAAAA,KAAAA,4BACAN,QAAAA,SAAAA,GACAK,EAAAJ,iBAAAhwB,GACAowB,EAAAb,cAxDA9jB,IAAA,4BAAAjO,MAAA,WA8DA,IAAA,GADAe,MACA/B,EAAA,EAAAA,EAAAyL,KAAAwnB,WAAA/yB,SAAAF,EACA+B,EAAAA,KAAAA,WAAAA,IAAAA,KAAAA,YAAAA,KAAAA,WAAAA,IAAAA,KAGA,QADA6B,QAAAA,IAAAA,GACA6H,KAAAmnB,eACA,IAAA,mBACA,IAAA,YACA,MAAAN,MAAAC,UAAAxwB,EACA,KAAA,+BACA,MAAA0J,MAAAqoB,oBAAA/xB,OAvEAkN,IAAA,sBAAAjO,MAAA,SAAAe,EAAA2uB,GA4EA,GAAAqD,KACA,KAAA,GAAA9kB,KAAAlN,GACA,GAAAA,EAAAyE,eAAAyI,GAAA,CACA,GAAAjO,GAAAe,EAAAkN,EAIA,IAHA,mBAAAyhB,KACAzhB,EAAAA,EAAAA,IAAAA,EAAAA,KAEA,YAAA,mBAAAjO,GAAA,YAAA0F,EAAA1F,IACA+yB,EAAAA,KAAAA,KAAAA,oBAAAA,EAAAA,QACA,CACA,GAAAC,GAAAvoB,KAAAwoB,sBAAAhlB,GACAilB,EAAAzoB,KAAAwoB,sBAAAjzB,EACA+yB,GAAAA,KAAAA,EAAAA,IAAAA,IAIA,MAAAA,GAAAzuB,KAAA,QA5FA2J,IAAA,wBAAAjO,MAAA,SAAAmzB,GA+FA,MAAAC,oBAAAD,GAAAvvB,QAAA,WAAA,SAAAwE,GAAA,MAAA,IAAAA,EAAAirB,WAAA,GAAAtjB,SAAA,SA/FA9B,IAAA,QAAAjO,MAAA,SAAA4E,GAmGA,GAAA0uB,GAAA7oB,KACAjI,EAAA,GAAAC,eACAD,GAAAA,iBAAAA,KAAAA,UACAA,EAAAA,mBAAAA,WACAA,EAAA+wB,aAAA9wB,eAAA+wB,OACA,MAAAhxB,EAAAG,OACAiC,EAAAA,QAAAA,GAEAA,EAAAA,QAAAA,GAEA0uB,EAAAnB,iBAAA,EACAmB,EAAAnB,iBAAA,IACAmB,EAAA5B,WAAA,KAIAlvB,EAAAA,KAAAA,EAAAA,OAAAA,KAAAA,KAAAA,GACA,mBAAAoC,GAAAiuB,MACArwB,EAAAA,iBAAAA,eAAAA,KAAAA,eACAA,EAAAA,KAAAA,EAAAA,OAEAA,EAAAA,KAAAA,MAEAiI,KAAA0nB,iBAAA,EACA1nB,KAAAinB,WAAA,KA3HAzjB,IAAA,mBAAAjO,MAAA,SAAAwC,GA8HA,GAAAixB,GAAA,MACA,sBAAAhpB,KAAAknB,UAAA,cAAAlnB,KAAAknB,WACA8B,EAAAA,KAAAA,MAAAA,EAAAA,eAEAhpB,KAAAipB,oCAAAD,MAlIAxlB,IAAA,sCAAAjO,MAAA,SAAAyzB,GAqIA,GAAAvqB,GAAAhI,EAAAgI,WACA,KAAA,GAAA+E,KAAAwlB,GACAA,EAAAjuB,eAAAyI,IAAAxD,KAAAkpB,aAAA1lB,IACAxD,KAAArB,YAAA6E,GAAAjM,IAAAyxB,EAAAxlB,GAAA/E,EAAA0hB,eAxIA3c,IAAA,eAAAjO,MAAA,SAAAwE,GA6IA,MAAA,mBAAAiG,MAAArB,YAAA5E,OA7IAwtB,MCAA9wB,EAAAA,iBACA0E,OAAAA,mBACApB,KAAAA,WACAqB,SAAAA,KACAhB,UAAAA,eACAoB,YACA2tB,SAAAA,WANA,WASA,QAAAC,GAAAhzB,GAAAP,EAAAmK,KAAAopB,GACA3yB,EAAAA,UAAAA,KAAAA,GAEA,mBAAAuS,QAAAqgB,cAIArpB,KAAAspB,UAAAC,UAAA1oB,QAAAb,KAAAA,KAAAwpB,uBAhBA,MAAArmB,GAAAimB,IAAA5lB,IAAA,wBAAAjO,MAAA,WAmBAyK,KAAAypB,kBACAzpB,KAAA0pB,2BApBAlmB,IAAA,UAAAjO,MAAA,SAAAo0B,GAuBA,MAAA3pB,MAAAmpB,SAAA,IAAAQ,KAvBAnmB,IAAA,kBAAAjO,MAAA,WAyBA,GAAAq0B,GAAA5pB,IACAA,MAAA6pB,YAAAvP,QAAA,SAAAqP,GACA,GAAAC,EAAAjrB,YAAAgrB,GAAA,CAEA,GAAAnmB,GAAAomB,EAAAE,QAAAH,EACAC,GAAAD,GAAAN,aAAAU,QAAAvmB,SA9BAA,IAAA,wBAAAjO,MAAA,WAiCA,GAAAy0B,GAAAhqB,IACAA,MAAA6pB,YAAAvP,QAAA,SAAAqP,GACA,GAAAK,EAAArrB,YAAAgrB,GAAA,CAEA,GAAAM,GAAAD,EACA1qB,EAAAqqB,EAAA,SAEA,WAAAK,EAAArrB,YAAAgrB,GAAA3vB,OACAiwB,EAAAA,EAAAA,SAAAA,EAAAA,YAAAA,GAAAA,IAAAA,YACA3qB,EAAAA,EAAAA,YAAAA,GAAAA,IAAAA,aAAAA,WAGA2qB,EAAAA,GAAAA,QAAAA,EAAAA,WACAZ,aAAAA,QAAAA,EAAAA,QAAAA,GAAAA,EAAAA,aA9CAD,MCAA3yB,EAAAA,iBACA0E,OAAAA,qBACApB,KAAAA,WACAqB,SAAAA,KACAhB,UAAAA,eACAoB,YACA0uB,OAAAA,OACA1wB,QAAAA,KAAAA,MAAAA,aAAAA,QAPA,WAUA,QAAA2wB,GAAA/zB,GAAAP,EAAAmK,KAAAmqB,GACA1zB,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAAoqB,gBAAA,KACApqB,KAAAqqB,cAAAtxB,OAEAiH,KAAAsqB,cAAAzpB,QAAAb,KAAAA,KAAAuqB,kBACAvqB,KAAAwqB,cAAA3pB,QAAAb,KAAAA,KAAAyqB,kBAjBA,MAAAtnB,GAAAgnB,IAAA3mB,IAAA,mBAAAjO,MAAA,WAoBAyK,KAAA0qB,cAAA1qB,KAAAxG,WApBAgK,IAAA,mBAAAjO,MAAA,WAuBAyK,KAAA0qB,cAAA1qB,KAAAxG,WAvBAgK,IAAA,sBAAAjO,MAAA,WA0BAyK,KAAAqqB,eACAM,cAAAA,SACAC,UAAAA,OACA5pB,WAAAA,KAAAA,OAAAA,SA7BAwC,IAAA,gBAAAjO,MAAA,SAAAiE,GAkCA,GADArB,QAAAA,IAAAA,mBACA6H,KAAAoqB,gBAAA,CACA,GAAAhmB,GAAApE,KAAAoqB,gBAAAS,UAAAtyB,QAAAyH,KAAAqqB,cACArqB,MAAAoqB,gBAAAS,UAAAxmB,OAAAD,EAAA,GACApE,KAAAoqB,gBAAAU,mBAEAtxB,GAAAA,EAAAqxB,WACA7qB,KAAA+qB,sBACA5yB,QAAAA,IAAAA,mBAAAA,KAAAA,cAAAA,GACAqB,EAAAA,UAAAA,KAAAA,KAAAA,eACAA,EAAAA,mBACAwG,KAAAoqB,gBAAA5wB,GAEAwG,KAAAoqB,gBAAA,SA9CAD,MCAA1zB,EAAAA,iBACA0E,OAAAA,aACApB,KAAAA,cACAqB,SAAAA,KACAhB,UAAAA,eACAoB,YACAwvB,SAAAA,SACAC,SAAAA,SACAC,iBAAAA,SACAC,QAAAA,SACAC,SAAAA,SACAC,UAAAA,SACAC,MAAAA,SACAC,UAAAA,OACAC,MAAAA,WAdA,WAiBA,QAAAC,GAAAr1B,GAAA,GAAAs1B,GAAA1rB,IAAAnK,GAAAmK,KAAAyrB,GACAh1B,EAAAA,UAAAA,KAAAA,GAEAk1B,UAAAC,cAIAD,UAAAA,YAAAA,mBAAAA,SAAAA,GAAA,MAAAD,GAAAG,gBAAAjR,KACA+Q,UAAAA,YAAAA,cAAAA,SAAAA,GAAA,MAAAD,GAAAG,gBAAAjR,MAzBA,MAAAzX,GAAAsoB,IAAAjoB,IAAA,kBAAAjO,MAAA,SAAAu2B,GA4BA9rB,KAAAgrB,SAAAc,EAAAC,OAAAf,SACAhrB,KAAAirB,SAAAa,EAAAC,OAAAd,SACAjrB,KAAAkrB,iBAAAY,EAAAC,OAAAb,iBACAlrB,KAAAmrB,QAAAW,EAAAC,OAAAZ,QACAnrB,KAAAorB,SAAAU,EAAAC,OAAAX,SACAprB,KAAAqrB,UAAAS,EAAAC,OAAAV,UACArrB,KAAAsrB,MAAAQ,EAAAC,OAAAT,MACAtrB,KAAAurB,UAAAO,EAAAP,cAnCAE,MCAAh1B,EAAAA,iBACA0E,OAAAA,eACApB,KAAAA,QACAqB,SAAAA,OACAhB,UAAAA,eACAiB,OACA2wB,aACAC,QAAAA,EAAAA,cAAAA,EAAAA,YAAAA,EAAAA,aAAAA,EACAC,aAAAA,EAAAA,eAAAA,GAEAC,aAAAA,EAAAA,aAAAA,EAAAA,YAAAA,EAEAC,QAAAA,EAAAA,QAAAA,EAAAA,OAAAA,EAAAA,UAAAA,EAAAA,QAAAA,EACAC,WAAAA,GAAAA,aAAAA,GAAAA,cAAAA,IAEAC,aAAAA,kBAAAA,EAAAA,mBAAAA,EAAAA,QAAAA,IAEA9wB,YACAhC,OAAAA,SACA+yB,SAAAA,MACAT,SAAAA,MACAU,SAAAA,OACAC,MAAAA,OACAC,OAAAA,OACAC,aAAAA,OACAC,cAAAA,OACAC,SAAAA,OACA30B,OAAAA,OACA40B,MAAAA,QAEAxxB,SACAyxB,UACAC,WACAC,aAjCA,WAoCA,QAAAC,GAAA92B,GAAA,GAAA+2B,GAAAntB,IAAAnK,GAAAmK,KAAAktB,GACAz2B,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAAotB,sBAAA,EAEAptB,KAAAqY,KAAAvW,SAAAmZ,cAAA,SACAjb,KAAAqY,KAAAgV,MAAAxnB,MAAA7F,KAAAqY,KAAAgV,MAAAvnB,OAAA,OACA9F,KAAAqY,KAAAgV,MAAAC,OAAA,IACAttB,KAAA1B,IAAAivB,YAAAvtB,KAAAqY,MAEArY,KAAA0sB,OAAA1sB,KAAAqY,KAAAqU,OACA1sB,KAAAusB,SAAAvsB,KAAAqY,KAAAkU,SAEAvsB,KAAAqY,KAAAmV,iBAAA,OAAA,WACAL,EAAAH,UACAG,EAAAP,cAAAO,EAAAnB,YAAAyB,eAGAztB,KAAAqY,KAAAmV,iBAAA,QAAA,WACAL,EAAAJ,SACAI,EAAAP,cAAAO,EAAAnB,YAAA0B,cAGA1tB,KAAAqY,KAAAmV,iBAAA,aAAA,WACAL,EAAAC,wBACAD,EAAArB,SAAA,IAAAqB,EAAA9U,KAAAsV,YACAR,EAAAC,0BAGAptB,KAAAqY,KAAAmV,iBAAA,QAAA,WACAL,EAAAF,UACAE,EAAAP,cAAAO,EAAAnB,YAAAG,eAGAnsB,KAAAqY,KAAAmV,iBAAA,WAAA,WACAL,EAAA9U,KAAAuV,SAAAn5B,OAAA,IACA04B,EAAAU,SAAAV,EAAA9U,KAAAuV,SAAAE,IAAA,GAAAX,EAAA9U,KAAAkU,SACAY,EAAAj1B,OAAAi1B,EAAAU,SAAA,EAAAV,EAAAnB,YAAA+B,UAAAZ,EAAAnB,YAAAgC,YAMAhuB,KAAAqY,KAAAmV,iBAAA,UAAA,WACAL,EAAAj1B,OAAAi1B,EAAAnB,YAAAiC,UAGAjuB,KAAAqY,KAAAmV,iBAAA,iBAAA,WACAL,EAAAj1B,OAAAi1B,EAAAnB,YAAAgC,WAGAhuB,KAAAqY,KAAAmV,iBAAA,YAAA,WACAL,EAAAj1B,OAAAi1B,EAAAnB,YAAAkC,UAGAluB,KAAAqY,KAAAmV,iBAAA,kBAAA,WACAL,EAAAZ,SAAAY,EAAA9U,KAAAkU,WAGAvsB,KAAAqY,KAAAmV,iBAAA,gBAAA,WACAL,EAAAC,wBACAD,EAAAT,OAAAS,EAAA9U,KAAAqU,OACAS,EAAAC,0BAGAptB,KAAAqY,KAAAmV,iBAAA,UAAA,WACAL,EAAAL,OAAAK,EAAAnB,YAAAmC,eAGAnuB,KAAAqY,KAAAmV,iBAAA,QAAA,WACAL,EAAAL,OAAAK,EAAAnB,YAAAoC,gBAGApuB,KAAAqY,KAAAmV,iBAAA,aAAA,WACAL,EAAAC,wBACAD,EAAAR,aAAAQ,EAAA9U,KAAAsU,aACAQ,EAAAC,0BAGAptB,KAAAquB,gBAAAxtB,QAAAb,KAAAA,KAAAsuB,oBACAtuB,KAAAwqB,cAAA3pB,QAAAb,KAAAA,KAAAyqB,kBACAzqB,KAAAuuB,gBAAA1tB,QAAAb,KAAAA,KAAAwuB,oBACAxuB,KAAAyuB,cAAA5tB,QAAAb,KAAAA,KAAA0uB,kBACA1uB,KAAA2uB,oBAAA9tB,QAAAb,KAAAA,KAAA4uB,wBACA5uB,KAAA6uB,aAAAhuB,QAAAb,KAAAA,KAAA8uB,iBACA9uB,KAAA+uB,gBAAAluB,QAAAb,KAAAA,KAAAgvB,oBAzHA,MAAA7rB,GAAA+pB,IAAA1pB,IAAA,qBAAAjO,MAAA,SAAA8mB,GA4HArc,KAAAqY,KAAA4W,SAAA5S,KA5HA7Y,IAAA,mBAAAjO,MAAA,SAAAiE,GA+HA,GAAA8uB,GAAA9uB,EAAAP,MAAA,KACAi2B,EAAA5G,EAAAA,EAAA7zB,OAAA,GAAA8K,cACA4vB,EAAAnvB,KAAAovB,sBAAAF,EACAlvB,MAAAqY,KAAArW,IAAAxI,EACAwG,KAAAqY,KAAAgX,YAAAF,KACAnvB,KAAA8sB,OAAA9sB,KAAAgsB,YAAAsD,gBApIA9rB,IAAA,qBAAAjO,MAAA,SAAAo4B,GAwIA3tB,KAAAotB,sBAAA,IACAptB,KAAAqY,KAAAsV,YAAAA,EAAA,QAzIAnqB,IAAA,mBAAAjO,MAAA,SAAAm3B,GA4IA1sB,KAAAotB,sBAAA,IACAptB,KAAAqY,KAAAqU,OAAAA,MA7IAlpB,IAAA,yBAAAjO,MAAA,SAAAo3B,GAgJA3sB,KAAAotB,sBAAA,IACAptB,KAAAqY,KAAAsU,aAAAA,MAjJAnpB,IAAA,kBAAAjO,MAAA,SAAAg6B,GAoJAA,GACAvvB,KAAAwvB,eAAAxvB,KAAAqY,KAAAqU,OACA1sB,KAAA0sB,OAAA,GAEA1sB,KAAA0sB,OAAA1sB,KAAAyvB,iBAxJAjsB,IAAA,qBAAAjO,MAAA,SAAAg6B,GA4JA,OAAAA,GACA,IAAAvvB,MAAAssB,YAAAoD,QACA1vB,KAAAqY,KAAAgV,MAAAsC,UAAA,MACA,MACA,KAAA3vB,MAAAssB,YAAAsD,kBACA5vB,KAAAqY,KAAAgV,MAAAsC,UAAA,EACA,MACA,KAAA3vB,MAAAssB,YAAAuD,mBACA7vB,KAAAqY,KAAAgV,MAAAsC,UAAA,YApKAnsB,IAAA,QAAAjO,MAAA,WAyKAyK,KAAAqY,KAAAyX,WAzKAtsB,IAAA,OAAAjO,MAAA,WA4KAyK,KAAAqY,KAAA0X,UA5KAvsB,IAAA,OAAAjO,MAAA,SAAAy6B,GA+KAhwB,KAAAqY,KAAAsV,YAAA,IAAAqC,KA/KAxsB,IAAA,OAAAjO,MAAA,eAAAiO,IAAA,wBAAAjO,MAAA,SAAA25B,GAoLA,GAAAe,IACAC,IAAAA,YACAC,IAAAA,YACAC,IAAAA,YACAC,IAAAA,YACAC,KAAAA,aAEA,OAAAL,GAAAf,IAAA,OA3LAhC,MCAAz2B,EAAAA,iBACA0E,OAAAA,QACApB,KAAAA,UACAqB,SAAAA,KACAhB,UAAAA,iBACAoB,YACA6H,QAAAA,KAAAA,WAAAA,aAAAA,MACAgb,UAAAA,KAAAA,SAAAA,aAAAA,IACA9oB,OAAAA,KAAAA,MAAAA,aAAAA,QACAg7B,MAAAA,KAAAA,OAAAA,cAAAA,KATA,WAYA,QAAAC,GAAAp6B,GAAAP,EAAAmK,KAAAwwB,GACA/5B,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAAywB,UAAA13B,OAEAiH,KAAA0wB,aAAA7vB,QAAAb,KAAAA,KAAA2wB,iBACA3wB,KAAA4wB,cAAA/vB,QAAAb,KAAAA,KAAA6wB,gBACA7wB,KAAA8wB,gBAAAjwB,QAAAb,KAAAA,KAAA6wB,gBACA7wB,KAAA+wB,YAAAlwB,QAAAb,KAAAA,KAAA6wB,gBApBA,MAAA1tB,GAAAqtB,IAAAhtB,IAAA,iBAAAjO,MAAA,WAwBA,MAAAyK,MAAAuwB,MAAAvwB,KAAAqD,QAAArD,KAAAqD,OAAAtI,eAAAiF,KAAAqe,WAAAtlB,SAAAiH,KAAAzK,OAOAyK,KAAAywB,UAAAzwB,KAAAqD,OAAA1E,YAAAqB,KAAAqe,cACAre,MAAA2wB,gBAAA3wB,KAAAzK,aAJAyK,KAAAywB,UAAA13B,WA5BAyK,IAAA,kBAAAjO,MAAA,SAAAA,GAoCAwD,SAAAxD,GAAAyK,KAAAywB,WACAzwB,KAAAywB,UAAAl5B,IAAAhC,OArCAi7B,KpC42HA,IAAAQ,IAAA,WACA,QAAAA,KACAn7B,EAAAmK,KAAAgxB,GAeA,MAZA7tB,GAAA6tB,IACAxtB,IAAA,gBACAjO,MAAA,SAAA2B,GqCj3HA,IAAA,GAAA6C,KAAAiG,MACA,GAAAA,KAAAjG,KAAA7C,EACA,MAAA6C,OrCy3HAi3B,KAGAznB,GAAA,WqCp3HA,QAAAA,GAAAnT,GAAA,GAAA66B,GAAAjxB,IAAAnK,GAAAmK,KAAAuJ,GACA9S,EAAAyF,aAAA9F,EAAAE,OAAAmH,UAAA8L,EACAvJ,KAAAkxB,YAAA96B,EAAAE,OAAA8I,UAAA,GAEAY,KAAAkxB,YAAA96B,EAAAE,OAEA0J,KAAAzG,SAAAnD,EAAAI,QAEAwJ,KAAAmxB,cAEA/6B,EAAAE,OAAAilB,mBAAAlnB,SAAA,WAUA,IAAA,GATA+8B,MACA3U,EAAA,SAAA4U,GACA,QAAAr1B,KAAAq1B,EAAA,IACAJ,EAAAE,WAAAluB,KAAAouB,GAEAD,EAAAA,KAAAA,IAIA78B,EAAA,EAAAA,EAAA6B,EAAAE,OAAAilB,SAAA9mB,SAAAF,EACAkoB,EAAAA,EAAAA,OAAAA,SAAAA,GAEAhmB,GAAAA,YAAAA,EAAAA,GACAw6B,EAAA13B,UACA03B,EAAAK,gBAAAL,EAAA13B,aAOAR,SAAAiH,KAAAzC,kBACAyC,KAAAzC,gBAAAnH,EAAAI,QAAA+G,iBrCq9HA,MAtFA4F,GAAAoG,IACA/F,IAAA,kBACAjO,MAAA,SAAAgE,GqC53HA,IAAA,GADAzC,GAAAL,EAAAK,OACAvC,EAAA,EAAAA,EAAAyL,KAAAmxB,WAAA18B,SAAAF,EAAA,CACA,GAAA88B,GAAArxB,KAAAmxB,WAAA58B,GACA0kB,EAAAniB,EAAAy6B,OAAAz6B,EAAAC,aAAAs6B,EAAA,IAEApY,GAMA,KAAAoY,EAAA,IACA93B,EAAAA,EAAAA,OACA9C,EAAAA,0BAAAA,EAAAA,EAAAA,EAAAA,MAEAA,EAAAA,0BAAAA,EAAAA,GATA0B,QAAAA,IAAAA,yDAAAA,EAAAA,QrC24HAqL,IAAA,gBACAjO,MAAA,SAAAgB,GqC/3HA,GAAAiF,GAAAgD,UAAA/J,OAAA,GAAAsE,SAAAyF,UAAA,GAAAA,UAAA,MAAAhI,EAAAgI,UAAA/J,OAAA,GAAAsE,SAAAyF,UAAA,GAAAA,UAAA,GAAAwB,KAAAzG,SACAzC,EAAAL,EAAAK,OACA06B,EAAA16B,EAAA+S,cACA/S,GAAAA,eAAAA,EAAAA,kBAAAA,IAEA,IAAA26B,GAAA36B,EAAAwiB,SACAxiB,GAAAA,UAAAA,KAAAA,UAAAA,KAAAA,UAAAA,EAAAA,SAEA,IAAA46B,GAAAl7B,EAAApB,OAAAC,OAAAmB,GAAA,GAAAw6B,GAEAj4B,UAAAiH,KAAAzC,kBACAm0B,EAAAA,gBAAAA,KAAAA,gBAGA,IAAAp0B,GAAA7G,EAAA4G,WACA/G,OAAAA,KAAAA,YACAC,OAAAA,EACAC,QAAAA,EACAm7B,iBAAAA,GAYA,OATAv8B,QAAAA,KAAAA,GAAAA,QAAAA,SAAAA,GACAkI,EAAAA,GAAAA,EAAAA,WAKAxG,EAAAA,UAAAA,EAEAA,EAAAA,eAAAA,EACAwG,KrCq4HAkG,IAAA,eACAjO,MAAA,SAAAgB,GqCp4HA,GAAAiF,GAAAgD,UAAA/J,OAAA,GAAAsE,SAAAyF,UAAA,GAAAA,UAAA,MACAlB,EAAA0C,KAAAwb,cAAAjlB,EAAAiF,GACAo2B,EAAAn7B,EAAAoF,eAAA,UAAA,MAAA,OAMA,OAJAyB,aAAAs0B,IACAt0B,EAAAA,YAAAA,OAAAA,IAAAA,EAAAA,EAAAA,YAAAA,YAGAA,OrCy4HAkG,IAAA,oBACAjO,MAAA,WqCh4HA,MAPAyK,MAAAiE,aACAjE,KAAAiE,WAAA,GAAAxN,GAAAmN,QAAA5D,MACAA,KAAAiE,WAAAslB,UAAA9yB,EAAAgO,OAAAE,WACAlO,EAAAA,OAAAA,iBAAAA,KAAAA,KAAAA,WAAAA,WAEAuJ,KAAAiE,WAAAC,YAAAzN,EAAAgO,OAAAE,YAEA3E,KAAAiE,erC44HAsF,IqCx4HA9S,GAAAA,iBACAvC,QAAAA,EACAiH,OAAAA,QACApB,KAAAA,YACAqB,SAAAA,KACAhB,UAAAA,WACA9E,YAAAA,KChIAmB,EAAAA,iBACA0E,OAAAA,QACApB,KAAAA,cACAqB,SAAAA,KACAhB,UAAAA,WACAoB,YACA6H,OAAAA,WACAwuB,qBAAAA,SAPA,WAUA,QAAAC,GAAA17B,GAAAP,EAAAmK,KAAA8xB,GACAr7B,EAAAA,UAAAA,KAAAA,GACAuJ,KAAAqD,OAAArD,KAAA6D,QACA7D,KAAA+xB,gBAEA/xB,KAAAgyB,YAAAhyB,KAAAqD,OACArD,KAAA4wB,cAAA/vB,QAAAb,KAAAA,KAAAiyB,kBACAjyB,KAAAspB,UAAAC,UAAA1oB,QAAAb,KAAAA,KAAAwpB,uBAjBA,MAAArmB,GAAA2uB,IAAAtuB,IAAA,mBAAAjO,MAAA,WAoBAyK,KAAAkyB,sBApBA1uB,IAAA,wBAAAjO,MAAA,WAuBAyK,KAAAkyB,sBAvBA1uB,IAAA,mBAAAjO,MAAA,WA0BA,GAAA48B,GAAAnyB,KAAAgyB,WACA,KAAA,GAAAz9B,KAAAyL,MAAA+xB,aAAA,CACA,GAAAp0B,GAAAqC,KAAA+xB,aAAAx9B,EACAoJ,GAAAy0B,oBAAAD,GAAAA,EAAA59B,IAAA,kBAAA49B,GAAA59B,GAAA+P,YAEA6tB,EAAAA,GAAAA,WAAAA,EAAAA,oBAEAnyB,KAAAqD,SACA1F,EAAAA,mBAAAA,EAAAA,cAAAA,KAAAA,OAAAA,EAAAA,EAAAA,MAAAA,EAAAA,YAAAA,EAAAA,iBAIAqC,KAAAgyB,YAAAhyB,KAAAqD,UAtCAG,IAAA,iBAAAjO,MAAA,SAAA4B,EAAA5B,EAAA4J,EAAAD,GAyCAc,KAAA+xB,aAAA56B,IAAA5B,MAAAA,EAAA4J,YAAAA,EAAAD,eAAAA,OAzCA4yB,MCEAr7B,EAAAA,iBACA0E,OAAAA,QACApB,KAAAA,WACAqB,SAAAA,MAHA,SAAAi3B,GAKA,QAAAC,GAAAl8B,GAAAP,EAAAmK,KAAAsyB,EAAA,IAAAC,GAAA59B,EAAAqL,MAAAsyB,EAAA18B,WAAAR,OAAA4Q,eAAAssB,IAAAz9B,KAAAmL,KAAA5J,EAAAG,QAGAg8B,GAAAzzB,iBAAA1I,EAAAu7B,gBACAY,EAAAh5B,SAAAnD,EAAAI,QAGA+7B,EAAA1I,cACA,KAAA,GAAArmB,KAAApN,GAAAE,OACA,GAAAF,EAAAE,OAAAyE,eAAAyI,IAAApN,EAAAE,OAAAkN,GAAA,CAGA,GAAAzJ,GAAA3D,EAAAE,OAAAkN,GAAA5N,UAAAN,YAAAyE,IACA,2BAAAA,GAAA,uBAAAA,GACAw4B,EAAA1I,YAAA5mB,KAAAO,GAIA,GAAAiB,GAAAhO,EAAAgO,MAEA8tB,GAAAC,KAAA,GAAA/7B,GAAAmN,QAAA2uB,GACAA,EAAAC,KAAAC,eAAAhuB,EAAAE,SACA4tB,EAAAC,KAAAE,YAAAjuB,EAAAE,SACA4tB,EAAAC,KAAAG,eAAAluB,EAAAE,SACA4tB,EAAAC,KAAAI,YAAAnuB,EAAAE,SACA4tB,EAAAC,KAAAK,cAAApuB,EAAAE,SACA4tB,EAAAC,KAAAM,cAAAruB,EAAAE,QACA,KAAA,GAAApQ,GAAA,EAAAA,EAAA,KAAAA,EACAg+B,EAAAC,KAAA,QAAAj+B,EAAA,WAAAkQ,EAAAE,QA5BA,OA8BA4tB,GAAAC,KAAAO,cAAAtuB,EAAAE,SACA4tB,EAAAC,KAAAQ,YAAAvuB,EAAAE,SACA4tB,EAAAC,KAAAS,cAAAxuB,EAAAE,SACA4tB,EAAAC,KAAAU,YAAAzuB,EAAAE,SACA4tB,EAAAC,KAAAW,YAAA1uB,EAAAE,SACA4tB,EAAAC,KAAAY,UAAA3uB,EAAAE,SACA4tB,EAAAC,KAAAa,QAAA5uB,EAAAE,SACA4tB,EAAAC,KAAAc,SAAA7uB,EAAAE,SACA4tB,EAAAC,KAAAe,cAAA9uB,EAAAE,SACA4tB,EAAAC,KAAAgB,aAAA/uB,EAAAE,SACA4tB,EAAAC,KAAAiB,cAAAhvB,EAAAE,SACA4tB,EAAAC,KAAAkB,aAAAjvB,EAAAE,SACA4tB,EAAAC,KAAAmB,WAAAlvB,EAAAE,SACA4tB,EAAAC,KAAAoB,UAAAnvB,EAAAE,SACA4tB,EAAAC,KAAAqB,kBAAApvB,EAAAE,SACA4tB,EAAAC,KAAAsB,gBAAArvB,EAAAE,SACA4tB,EAAAC,KAAAuB,WAAAtvB,EAAAE,SA9CA4tB,EALA,MAAAx9B,GAAAu9B,EAAAD,GAAAlvB,EAAAmvB,IAAA9uB,IAAA,gBAAAjO,MAAA,WAsDA,MAAAyK,MAAA6pB,gBAtDAyI,GAAA77B,EAAAmN,UCFAnN,EAAAA,iBACA0E,OAAAA,QACApB,KAAAA,QACAqB,SAAAA,KACAhB,UAAAA,WACAoB,YACAw4B,UAAAA,KAAAA,MAAAA,aAAAA,KACAz9B,QAAAA,KAAAA,WAAAA,UAAAA,GACA09B,OAAAA,OACAnb,QAAAA,OACAob,iBAAAA,QAEA54B,SACA64B,eAbA,WAgBA,QAAAC,GAAAh+B,GAAA,GAAAi+B,GAAAr0B,IAAAnK,GAAAmK,KAAAo0B,GACA39B,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAArB,YAAApI,OAAAgB,IAAAyI,KAAA6D,QAAApN,EAAAgI,YAAAwhB,YAIAjgB,KAAAs0B,eAAAzzB,QAAAb,KAAAA,KAAAu0B,mBAEA99B,EAAAA,OAAAA,WAAAA,WAAA,MAAA49B,GAAAG,QAAApuB,MAAAiuB,EAAA71B,aAEA/H,EAAAA,OAAAA,eAAAA,WACA49B,EAAAvb,SACAub,EAAAzU,YAIAnpB,EAAAA,OAAAA,cAAAA,WAAA,MAAA49B,GAAAI,SAjCA,MAAAtxB,GAAAixB,IAAA5wB,IAAA,QAAAjO,MAAA,WAoCAyK,KAAA8Y,SAAA,KApCAtV,IAAA,OAAAjO,MAAA,WAuCAyK,KAAA8Y,SAAA,KAvCAtV,IAAA,UAAAjO,MAAA,WA0CAyK,KAAAy0B,OACAz0B,KAAA0b,WA3CAlY,IAAA,UAAAjO,MAAA,SAAAqkB,GA8CA5Z,KAAA8Y,SACAc,EAAA5Z,KAAA00B,cAAA10B,KAAAg0B,WACAh0B,KAAA00B,aAAA9a,EACA5Z,KAAA20B,eAjDAnxB,IAAA,oBAAAjO,MAAA,WAqDAyK,KAAA8Y,UACA9Y,KAAA00B,aAAA/a,KAAAC,MACA5Z,KAAAk0B,kBACAl0B,KAAA20B,eAxDAnxB,IAAA,WAAAjO,MAAA,WA6DAyK,KAAAi0B,SAGAj0B,KAAArB,YAAAma,QAAA7iB,KAAA,GAIA+J,KAAAm0B,YAEAn0B,KAAAi0B,QAEAj0B,KAAAs0B,qBAxEAF,MCAA39B,EAAAA,iBACA0E,OAAAA,mBACApB,KAAAA,SACAqB,SAAAA,KACAhB,UAAAA,eACAoB,YACAspB,KAAAA,SACA8P,SAAAA,KAAAA,OAAAA,cAAAA,IAEAt5B,SACAu5B,aAVA,WAaA,QAAAC,GAAA1+B,GAAA,GAAA2+B,GAAA/0B,IAAAnK,GAAAmK,KAAA80B,GACAr+B,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAAspB,UAAAC,UAAA1oB,QAAAb,KAAAA,KAAAwpB,uBACAxpB,KAAAg1B,YAAAn0B,QAAAb,KAAAA,KAAAi1B,gBACAj1B,KAAAk1B,eAAAr0B,QAAAb,KAAAA,KAAAm1B,kBAEA,IAAAC,GAAAp1B,KAAAqY,KAAAvW,SAAAmZ,cAAA,SACAma,GAAAA,MAAAA,cAAAA,OACAp1B,KAAA1B,IAAAivB,YAAA6H,GAEAA,EAAAA,QAAAA,WACAL,EAAAF,WAzBA,MAAA1xB,GAAA2xB,IAAAtxB,IAAA,wBAAAjO,MAAA,WA6BAyK,KAAAq1B,cAAAr1B,KAAAqY,KAAAid,YACAt1B,KAAAu1B,eAAAv1B,KAAAqY,KAAAmd,gBA9BAhyB,IAAA,iBAAAjO,MAAA,SAAA8mB,GAiCArc,KAAAqY,KAAAod,YAAApZ,EAEArc,KAAAq1B,cAAAr1B,KAAAqY,KAAAid,YACAt1B,KAAAu1B,eAAAv1B,KAAAqY,KAAAmd,gBApCAhyB,IAAA,oBAAAjO,MAAA,SAAA8mB,GAuCArc,KAAAqY,KAAAqd,UAAArZ,MAvCAyY,MCAAr+B,EAAAA,iBACA0E,OAAAA,mBACApB,KAAAA,WACAqB,SAAAA,KACAhB,UAAAA,eACAoB,YACAspB,KAAAA,SACA6Q,QAAAA,OACAzQ,MAAAA,UARA,WAWA,QAAA0Q,GAAAx/B,GAAA,GAAAy/B,GAAA71B,IAAAnK,GAAAmK,KAAA41B,GACAn/B,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAAqY,KAAAvW,SAAAmZ,cAAA,SACAjb,KAAAqY,KAAAgV,MAAAyI,cAAA,MAEA,IAAAC,GAAAj0B,SAAAmZ,cAAA,QACA8a,GAAAA,KAAAA,WACAA,EAAAA,MAAAA,cAAAA,cACAA,EAAAA,iBAAAA,SAAAA,WACAF,EAAAF,QAAAI,EAAAJ,UAEA31B,KAAAqY,KAAAkV,YAAAwI,EAEA,IAAAC,GAAAl0B,SAAAmZ,cAAA,OACAjb,MAAAqY,KAAAkV,YAAAyI,GAEAh2B,KAAA1B,IAAAivB,YAAAvtB,KAAAqY,KAEA,IAAA4d,GAAAx/B,EAAAoF,eAAA,UAAA,MAAA,OACAmE,MAAAk2B,KAAA,GAAAD,GAAAj2B,MAEAA,KAAAspB,UAAAC,UAAA1oB,QAAAb,KAAAA,KAAAwpB,uBACAxpB,KAAAg1B,YAAAn0B,QAAAb,KAAAA,KAAAi1B,gBACAj1B,KAAAm2B,aAAAt1B,QAAAb,KAAAA,KAAAo2B,iBACAp2B,KAAAq2B,eAAAx1B,QAAAb,KAAAA,KAAAs2B,mBApCA,MAAAnzB,GAAAyyB,IAAApyB,IAAA,iBAAAjO,MAAA,SAAA8mB,GAuCArc,KAAAqY,KAAAke,SAAA,GAAAC,UAAAna,EACArc,KAAAu1B,eAAAv1B,KAAAqY,KAAAmd,aACAx1B,KAAAq1B,cAAAr1B,KAAAqY,KAAAid,YAAA,EAAAt1B,KAAAqY,KAAAid,YAAA,EAAA,KAzCA9xB,IAAA,kBAAAjO,MAAA,SAAA8mB;AA8CArc,KAAAqY,KAAAke,SAAA,GAAAlJ,MAAAnI,MAAA,GAAAzuB,GAAAwO,OAAAoX,MA9CA7Y,IAAA,oBAAAjO,MAAA,WAiDAyK,KAAAqY,KAAAke,SAAA,GAAAZ,QAAA31B,KAAA21B,WAjDAnyB,IAAA,wBAAAjO,MAAA,WAoDAyK,KAAAu1B,eAAAv1B,KAAAqY,KAAAmd,aACAx1B,KAAAq1B,cAAAr1B,KAAAqY,KAAAid,YAAA,EAAAt1B,KAAAqY,KAAAid,YAAA,EAAA,MArDAM,MCAAn/B,EAAAA,iBACA0E,OAAAA,mBACApB,KAAAA,WACAqB,SAAAA,KACAhB,UAAAA,eACAoB,YACAmpB,MAAAA,MACA8R,aAAAA,MACAC,YAAAA,SACAC,MAAAA,KAAAA,QAAAA,iBACAC,OAAAA,KAAAA,QAAAA,iBACAvD,QAAAA,QAEA/3B,SACAsiB,YACAiZ,YAAAA,KAAAA,MAAAA,KAAAA,YAfA,WAkBA,QAAAC,GAAA1gC,GAAA,GAAA2gC,GAAA/2B,IAAAnK,GAAAmK,KAAA82B,GACArgC,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAA1B,IAAA+uB,MAAAyI,cAAA,OACA91B,KAAAjG,KAAA,cAEAiG,KAAAspB,UAAAC,UAAA1oB,QAAAb,KAAAA,KAAAwpB,uBACAxpB,KAAAg3B,aAAAn2B,QAAAb,KAAAA,KAAAi3B,iBAEAj3B,KAAA1B,IAAA44B,QAAA,WACA,GAAA9yB,GAAA2yB,EAAAz4B,IAAA64B,WAAAC,aACAL,GAAAN,aAAAryB,EACA2yB,EAAAL,YAAAK,EAAAH,MAAAxyB,GACA2yB,EAAAnZ,WACAmZ,EAAAF,UAAAzyB,IAhCA,MAAAjB,GAAA2zB,IAAAtzB,IAAA,OAAAjO,MAAA,SAAAuvB,GAoCA,MAAA9kB,MAAA42B,MAAAr+B,QAAAusB,MApCAthB,IAAA,YAAAjO,MAAA,eAAAiO,IAAA,SAAAjO,MAAA,SAAA6O,GA0CA,MAAApE,MAAA42B,MAAAxyB,MA1CAZ,IAAA,cAAAjO,MAAA,WA6CAyK,KAAAy2B,aAAA,EACAz2B,KAAA2kB,MAAA3kB,KAAA42B,MAAAniC,MAEA,KAAA,GADA4iC,MACA9iC,EAAA,EAAAA,EAAAyL,KAAA2kB,MAAApwB,IAAA,CACA,GAAA+iC,GAAAt3B,KAAA42B,MAAAriC,EAOA8iC,GAAAA,KAAAA,WAAAA,EAAAA,aAGAr3B,KAAA1B,IAAAk4B,UAAA,WAAAa,EAAAx9B,KAAA,IAAA,YACAmG,KAAAqY,KAAArY,KAAA1B,IAAA64B,cA5DA3zB,IAAA,wBAAAjO,MAAA,WA+DAyK,KAAAu3B,cACAv3B,KAAAq1B,cAAAr1B,KAAAqY,KAAAid,YACAt1B,KAAAu1B,eAAAv1B,KAAAqY,KAAAmd,gBAjEAhyB,IAAA,kBAAAjO,MAAA,WAoEAyK,KAAAu3B,kBApEAT,MCAArgC,EAAAA,iBACA0E,OAAAA,mBACApB,KAAAA,aACAqB,SAAAA,KACAhB,UAAAA,eACAoB,YACAg8B,YAAAA,OACAC,cAAAA,OACAC,SAAAA,OACAC,aAAAA,OACAC,iBAAAA,OACAC,wBAAAA,OACAC,0BAAAA,OACAzK,MAAAA,aAEA9xB,gBAAAA,eAfA,WAiBA,QAAAw8B,GAAA3hC,GAAAP,EAAAmK,KAAA+3B,GACAthC,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAAg4B,IAAAlC,cAAA,OACA91B,KAAAi4B,gBAAAj4B,KAAA1B,KAEA0B,KAAAk4B,mBAAAr3B,QAAAb,KAAAA,KAAAm4B,uBACAn4B,KAAAo4B,qBAAAv3B,QAAAb,KAAAA,KAAAq4B,yBACAr4B,KAAAs4B,gBAAAz3B,QAAAb,KAAAA,KAAAu4B,oBACAv4B,KAAAw4B,oBAAA33B,QAAAb,KAAAA,KAAAy4B,wBACAz4B,KAAA04B,wBAAA73B,QAAAb,KAAAA,KAAA24B,4BACA34B,KAAA44B,iCAAA/3B,QAAAb,KAAAA,KAAA64B,qCAEA74B,KAAA84B,+BAAAj4B,QAAAb,KAAAA,KAAA+4B,mCAEA/4B,KAAAg5B,aAAAn4B,QAAAb,KAAAA,KAAAi5B,iBACAj5B,KAAAk5B,gBAAAr4B,QAAAb,KAAAA,KAAAm5B,oBACAn5B,KAAAo5B,aAAAv4B,QAAAb,KAAAA,KAAAq5B,iBAEAr5B,KAAA6F,MAAA7F,KAAAq1B,cAAA,IACAr1B,KAAA8F,OAAA9F,KAAAu1B,eAAA,IACAv1B,KAAA6F,MAAA7F,KAAAq1B,cACAr1B,KAAA8F,OAAA9F,KAAAu1B,cAEA,IAAAp3B,GAAA1H,EAAA0H,EACA6B,MAAAw3B,YAAAz+B,OACAiH,KAAAy3B,cAAA1+B,OACAiH,KAAA03B,SAAA3+B,OACAiH,KAAA23B,cAAA,EACA33B,KAAA43B,kBAAA,EACA53B,KAAA63B,wBAAA15B,EAAA2Z,kBACA9X,KAAA83B,0BAAA35B,EAAA2Z,kBACA9X,KAAAqtB,MAAAt0B,OAjDA,MAAAoK,GAAA40B,IAAAv0B,IAAA,wBAAAjO,MAAA,SAAA+jC,GAoDAvgC,UAAA,mBAAAugC,GAAA,YAAAr+B,EAAAq+B,MACAA,EAAAA,OAAAA,SArDA91B,IAAA,0BAAAjO,MAAA,eAAAiO,IAAA,6BAAAjO,MAAA,eAAAiO,IAAA,qBAAAjO,MAAA,eAAAiO,IAAA,kBAAAjO,MAAA,SAAAgkC,GA+DAv5B,KAAAg4B,IAAAwB,QAAAx5B,KAAAy5B,WAAAF,EAAA,gCAAA,MA/DA/1B,IAAA,yBAAAjO,MAAA,SAAAmkC,GAoEA15B,KAAAg4B,IAAA2B,OAAAD,EAAA,iBAAA,YApEAl2B,IAAA,sCAAAjO,MAAA,SAAAqkC,GAuEA55B,KAAAg4B,IAAA6B,UAAA75B,KAAA85B,8BAAAF,MAvEAp2B,IAAA,oCAAAjO,MAAA,SAAAqkC,GA0EA55B,KAAAg4B,IAAA+B,UAAA/5B,KAAA85B,8BAAAF,MA1EAp2B,IAAA,kBAAAjO,MAAA,eAAAiO,IAAA,qBAAAjO,MAAA,WA+EA,mBAAAyK,MAAAw3B,aAAA,IAAAx3B,KAAAu2B,SAAA9hC,SACAuL,KAAAw3B,YAAAx3B,KAAAu2B,SAAA,OAhFA/yB,IAAA,gCAAAjO,MAAA,SAAAykC,GAoFA,GAAA77B,GAAA1H,EAAA0H,EACA,QAAA67B,GACA,IAAA77B,GAAA2Z,kBACA,MAAA,MACA,KAAA3Z,GAAA4Z,mBACA,MAAA,QACA,KAAA5Z,GAAA6Z,kBACA,MAAA,SAEA,MAAA,WA7FA+f,MCAAthC,EAAAA,iBACA0E,OAAAA,mBACApB,KAAAA,WACAqB,SAAAA,KACAhB,UAAAA,oBAJA,WAMA,QAAA6/B,GAAA7jC,GAAAP,EAAAmK,KAAAi6B,GACAxjC,EAAAA,UAAAA,KAAAA,EACA,IAAAyjC,GAAAl6B,KAAAqY,IACA6hB,GAAAA,MAAAA,QAAAA,MACAA,EAAAA,MAAAA,YAAAA,MACAA,EAAAA,MAAAA,gBAAAA,OAXA,MAAAD,OCYAxjC,EAAAA,iBACA0E,OAAAA,mBACApB,KAAAA,YACAqB,SAAAA,KACAhB,UAAAA,eACAiB,OACA8+B,WAAAA,OAAAA,EAAAA,SAAAA,EAAAA,OAAAA,EAAAA,mBAAAA,IAEA3+B,YACAspB,KAAAA,SACAsV,eAAAA,KAAAA,MAAAA,iBACAx7B,SAAAA,OACAy7B,UAAAA,MACAC,SAAAA,QAEAh/B,SACAsiB,cAhBA,WAmBA,QAAA2c,GAAAnkC,GAAA,GAAAokC,GAAAx6B,IAAAnK,GAAAmK,KAAAu6B,GACA9jC,EAAAA,UAAAA,KAAAA,EAEA,IAAAw/B,GAAAx/B,EAAAoF,eAAA,UAAA,MAAA,OACAmE,MAAAk2B,KAAA,GAAAD,GAAAj2B,KAEA,IAAAy6B,GAAAz6B,KAAAqY,KAAAvW,SAAAmZ,cAAA,QACAwf,GAAAA,KAAAA,OACAA,EAAAA,UAAAA,EACAA,EAAAA,MAAAA,cAAAA,OACAA,EAAAA,MAAAA,OAAAA,IACAA,EAAAA,MAAAA,MAAAA,OACAz6B,KAAA1B,IAAAivB,YAAAkN,GACAz6B,KAAAi4B,gBAAAwC,GACAA,EAAAA,UAAAA,EAEAz6B,KAAAspB,UAAAC,UAAA1oB,QAAAb,KAAAA,KAAAwpB,uBACAxpB,KAAAg1B,YAAAn0B,QAAAb,KAAAA,KAAAi1B,gBACAj1B,KAAA06B,gBAAA75B,QAAAb,KAAAA,KAAA26B,oBACA36B,KAAA46B,qBAAA/5B,QAAAb,KAAAA,KAAA66B,yBACA76B,KAAA86B,gBAAAj6B,QAAAb,KAAAA,KAAA+6B,oBACA/6B,KAAAwyB,KAAAa,QAAAxyB,QAAAb,KAAAA,KAAAg7B,gBAEAh7B,KAAAqY,KAAAmV,iBAAA,QAAA,WAAA,MAAAgN,GAAAS,iBA1CA,MAAA93B,GAAAo3B,IAAA/2B,IAAA,wBAAAjO,MAAA,WA6CAyK,KAAAq1B,cAAAr1B,KAAAqY,KAAAid,YACAt1B,KAAAu1B,eAAAv1B,KAAAqY,KAAAmd,gBA9CAhyB,IAAA,iBAAAjO,MAAA,SAAA8mB,GAkDArc,KAAAqY,KAAA9iB,QAAA8mB,IACArc,KAAAqY,KAAA9iB,MAAA8mB,MAnDA7Y,IAAA,qBAAAjO,MAAA,SAAA8mB,GAuDA,GAAA8d,GAAAn6B,KAAAm6B,UACAM,EAAAz6B,KAAAqY,IACA,QAAAgE,GACA,IAAA8d,GAAAe,OACAT,EAAAA,KAAAA,MACA,MACA,KAAAN,GAAAgB,SACAV,EAAAA,KAAAA,UACA,MACA,KAAAN,GAAAiB,OAEAX,EAAAA,KAAAA,UACA,MACA,KAAAN,GAAAkB,mBAEAZ,EAAAA,KAAAA,eAtEAj3B,IAAA,0BAAAjO,MAAA,SAAA8mB,GA2EArc,KAAAqY,KAAAijB,UAAAjf,EAAA,EAAA,KAAAA,KA3EA7Y,IAAA,qBAAAjO,MAAA,SAAA8mB,GA8EArc,KAAAqY,KAAAqd,SAAArZ,KA9EA7Y,IAAA,iBAAAjO,MAAA,SAAA0C,GAiFA,GAAAkG,GAAA1H,EAAA0H,GACAo9B,EAAAtjC,EAAAuL,MAAArF,EAAAgN,YAAAlT,EAAAuL,MAAArF,EAAAiN,SACAmwB,IAAAv7B,KAAAw7B,mBACAx7B,KAAA4d,WACA3lB,EAAAA,UAAAA,MArFAuL,IAAA,iBAAAjO,MAAA,WAyFA,OAAAyK,KAAAq6B,WACAr6B,KAAAq6B,UAAAoB,SAAAz7B,KAAA8kB,SA1FAthB,IAAA,eAAAjO,MAAA,WA+FAyK,KAAA8kB,OAAA9kB,KAAAqY,KAAA9iB,QACAyK,KAAAnB,4BAAA,EACAmB,KAAA8kB,KAAA9kB,KAAAqY,KAAA9iB,MACAyK,KAAAnB,4BAAA,OAlGA07B,MCZA9jC,EAAAA,iBACA0E,OAAAA,iBACApB,KAAAA,SACAqB,SAAAA,KACAhB,UAAAA,eACAoB,YACAzB,KAAAA,SACA2hC,YAAAA,OACAC,sBAAAA,OACAC,mBAAAA,OACAC,aAAAA,OACAC,iBAAAA,OACAC,uBAAAA,MACAC,sBAAAA,MACAl2B,OAAAA,MACAD,MAAAA,QAfA,WAkBA,QAAAo2B,GAAA7lC,GAAAP,EAAAmK,KAAAi8B,GACAxlC,EAAAA,UAAAA,KAAAA,GAGAuJ,KAAAspB,UAAAC,UAAA1oB,QAAAb,KAAAA,KAAAwpB,uBAtBA,MAAArmB,GAAA84B,IAAAz4B,IAAA,wBAAAjO,MAAA,WAyBA,GAAA4I,GAAA1H,EAAA0H,EACA6B,MAAA+7B,uBAAA/yB,OAAAkzB,YACAl8B,KAAAg8B,sBAAAhzB,OAAAmzB,WACAn8B,KAAA87B,iBAAA9yB,OAAA8yB,iBACA97B,KAAA8F,OAAAkD,OAAAozB,YACAp8B,KAAAjG,KAAAiG,KAAAjG,KACAiG,KAAA07B,YAAAv9B,EAAA6X,mBACAhW,KAAA27B,sBAAA,EACA37B,KAAA67B,aAAA,IACA77B,KAAA47B,mBAAAz9B,EAAA6X,mBACAhW,KAAA6F,MAAAmD,OAAAqzB,eAnCAJ,MCAAxlC,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,gBACAqB,SAAAA,KACAhB,UAAAA,SAJA,WAMA,QAAAkiC,GAAAlmC,GAAAP,EAAAmK,KAAAs8B,GACA7lC,EAAAA,UAAAA,KAAAA,GAPA,MAAA6lC,OCAA7lC,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,YACAqB,SAAAA,KACAhB,UAAAA,iBACAiB,OACAkhC,WAAAA,aACAxb,OAAAA,EAAAA,QAEAvlB,YACAghC,eAAAA,OACAC,OAAAA,KAAAA,MAAAA,aAAAA,GACA1P,OAAAA,OACAjU,QAAAA,SAbA,WAgBA,QAAA4jB,GAAAtmC,GAAAP,EAAAmK,KAAA08B,GACAjmC,EAAAA,UAAAA,KAAAA,GAjBA,MAAA0M,GAAAu5B,IAAAl5B,IAAA,UAAAjO,MAAA,WAoBAyK,KAAAy0B,OACAz0B,KAAA0b,WArBAlY,IAAA,QAAAjO,MAAA,WAwBAyK,KAAA8Y,SAAA,KAxBAtV,IAAA,OAAAjO,MAAA,WA2BAyK,KAAA8Y,SAAA,KA3BAtV,IAAA,QAAAjO,MAAA,WA8BAyK,KAAA+sB,QAAA,KA9BAvpB,IAAA,SAAAjO,MAAA,WAiCAyK,KAAA+sB,QAAA,KAjCAvpB,IAAA,WAAAjO,MAAA,WAqCA4C,QAAAA,IAAAA,qBAAAA,UArCAukC,MCAAjmC,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,WACAqB,SAAAA,KACAhB,UAAAA,iBACAoB,YACA0jB,UAAAA,YACA0V,SAAAA,KAAAA,OAAAA,cAAAA,IAEAr5B,gBAAAA,aATA,WAWA,QAAAohC,GAAAvmC,GAAAP,EAAAmK,KAAA28B,GACAlmC,EAAAA,UAAAA,KAAAA,GACAuJ,KAAAylB,IAAArvB,EAAAE,OAAAmvB,IAEAzlB,KAAA48B,iBAAA/7B,QAAAb,KAAAA,KAAA68B,qBACA78B,KAAAk1B,eAAAr0B,QAAAb,KAAAA,KAAAm1B,mBAhBA,MAAAhyB,GAAAw5B,IAAAn5B,IAAA,sBAAAjO,MAAA,SAAA8mB,GAmBAA,EAAAA,OAAAA,KAAAA,QACAA,EAAAA,SAAAA,KAAAA,IACArc,KAAA6D,QAAAlF,YAAAqB,KAAAylB,KAAAvG,UAAA7C,KArBA7Y,IAAA,oBAAAjO,MAAA,SAAA8mB,GAwBArc,KAAA6D,QAAAlF,YAAAqB,KAAAylB,KAAAvG,UAAA7C,EAAArc,KAAAkf,UAAA,SAxBAyd,MCAAlmC,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,cACAqB,SAAAA,KACAhB,UAAAA,OACAiB,OACAyhC,aACApN,QAAAA,UAAAA,OAAAA,SAAAA,MAAAA,QACAqN,KAAAA,EAAAA,MAAAA,EAAAA,QAAAA,EAAAA,MAAAA,IAGAvhC,YACAhC,OAAAA,MACAwjC,QAAAA,KAAAA,OAAAA,cAAAA,GAEAC,oBAAAA,KAAAA,OAAAA,aAAAA,WAEAC,kBAAAA,KAAAA,OAAAA,aAAAA,WACArP,SAAAA,OACA31B,QAAAA,KAAAA,OAAAA,aAAAA,KAnBA,WAsBA,QAAAilC,GAAA/mC,GAAA,GAAAgnC,GAAAp9B,IAAAnK,GAAAmK,KAAAm9B,GACA1mC,EAAAA,UAAAA,KAAAA,EAEA,IAAA8H,GAAA9H,EAAA8H,cACAyB,MAAA25B,OAAA,GAAAljC,GAAAmN,QAAA5D,MACAzB,EAAAA,MAAAA,KAAAA,OAAAA,QACAA,EAAAA,MAAAA,KAAAA,OAAAA,SACAA,EAAAA,MAAAA,KAAAA,OAAAA,OACAA,EAAAA,MAAAA,KAAAA,OAAAA,SAEA,IAAA8+B,GAAAr9B,KAAAqY,KAAAvW,SAAAmZ,cAAA,MACAoiB,GAAAA,MAAAA,cAAAA,OACAA,EAAAA,MAAAA,OAAAA,OACAA,EAAAA,MAAAA,UAAAA,aACAr9B,KAAA1B,IAAAivB,YAAA8P,GAEAr9B,KAAAs9B,KAAA,GAAAC,OACAv9B,KAAAs9B,KAAA9P,iBAAA,OAAA,WACA4P,EAAAvP,SAAA,EACAuP,EAAAllC,OAAAklC,EAAAN,YAAAU,QAEAx9B,KAAAs9B,KAAA9P,iBAAA,QAAA,WACA4P,EAAAllC,OAAAklC,EAAAN,YAAAz+B,QAGA2B,KAAAwqB,cAAA3pB,QAAAb,KAAAA,KAAAyqB,kBACAzqB,KAAA25B,OAAA8D,YAAA58B,QAAAb,KAAAA,KAAA09B,eACA19B,KAAA25B,OAAAgE,aAAA98B,QAAAb,KAAAA,KAAA09B,eACA19B,KAAA25B,OAAAiE,WAAA/8B,QAAAb,KAAAA,KAAA09B,eACA19B,KAAA25B,OAAAkE,cAAAh9B,QAAAb,KAAAA,KAAA09B,eACA19B,KAAA89B,0BAAAj9B,QAAAb,KAAAA,KAAA09B,eACA19B,KAAA+9B,wBAAAl9B,QAAAb,KAAAA,KAAA09B,eACA19B,KAAAg+B,cAAAn9B,QAAAb,KAAAA,KAAAi+B,kBAtDA,MAAA96B,GAAAg6B,IAAA35B,IAAA,mBAAAjO,MAAA,SAAAiE,GAyDAwG,KAAA6tB,SAAA,EACA7tB,KAAA9H,OAAA8H,KAAA88B,YAAA5O,OACA,IAAAb,GAAArtB,KAAAqY,KAAAgV,MACA6Q,EAAAznC,EAAAK,OAAAqnC,iBAAA3kC,EACA6zB,GAAAA,mBAAAA,QAAAA,EAAAA,KACAA,EAAAA,kBAAAA,QAAAA,EAAAA,KACArtB,KAAAs9B,KAAAt7B,IAAAk8B,EACAl+B,KAAAs9B,KAAAc,WACAp+B,KAAA6tB,SAAA,EACA7tB,KAAA9H,OAAA8H,KAAA88B,YAAAU,UAlEAh6B,IAAA,gBAAAjO,MAAA,WAsEA,GAAA83B,GAAArtB,KAAAqY,KAAAgV,MADAgR,EAAAr+B,KAAA25B,OAAA2E,EAAAD,EAAAC,MAAAC,EAAAF,EAAAE,KAAAC,EAAAH,EAAAG,IAAAC,EAAAJ,EAAAI,OAGAj/B,EAAAg/B,EAAA,IAAAF,EAAA,IAAAG,EAAA,IAAAF,EAAA,QACA14B,EAAA24B,EAAA,MAAAF,EAAA,MAAAG,EAAA,MAAAF,EAAA,KACAtK,EAAAj0B,KAAAi9B,mBAAA,IAAAj9B,KAAAk9B,gBACA7P,GAAAA,kBAAAA,EACAA,EAAAA,mBAAAA,EACAA,EAAAA,kBAAAA,EACAA,EAAAA,iBAAAA,EACAA,EAAAA,kBAAAA,EACAA,EAAAA,iBAAAA,KAhFA7pB,IAAA,mBAAAjO,MAAA,SAAAU,GAmFA,GAAAo3B,GAAArtB,KAAAqY,KAAAgV,KACAp3B,GACAo3B,EAAAA,eAAAA,QAEAA,EAAAA,eAAAA,4BACAA,EAAAA,eAAAA,mBACAA,EAAAA,eAAAA,cACAA,EAAAA,eAAAA,iBA1FA8P,MCGA1mC,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,SACAqB,SAAAA,KACAhB,UAAAA,OACAoB,YACAkjC,WAAAA,KAAAA,OAAAA,cAAAA,GACAC,YAAAA,KAAAA,MAAAA,cAAAA,EAAAA,IACAC,cAAAA,KAAAA,MAAAA,cAAAA,EAAAA,EAAAA,EAAAA,IACApoC,SAAAA,KAAAA,MAAAA,iBACAqoC,aAAAA,KAAAA,SAAAA,aAAAA,eACAC,eAAAA,OACAC,aAAAA,OACAC,UAAAA,KAAAA,MAAAA,cAAAA,EAAAA,KAEA1jC,SACA2jC,eACAC,QAAAA,KAAAA,MAAAA,KAAAA,WACAC,aAlBA,WAqBA,QAAAC,GAAAhpC,GAAAP,EAAAmK,KAAAo/B,GACA3oC,EAAAA,UAAAA,KAAAA,GAtBA,MAAA0M,GAAAi8B,IAAA57B,IAAA,8BAAAjO,MAAA,WAyBA,OAAA,KAzBAiO,IAAA,aAAAjO,MAAA,WA4BA,YA5BAiO,IAAA,eAAAjO,MAAA,WA+BA,OAAA,KA/BAiO,IAAA,gBAAAjO,MAAA,WAkCA,OAAA,KAlCAiO,IAAA,iBAAAjO,MAAA,WAqCA,OAAA,KArCAiO,IAAA,YAAAjO,MAAA,SAAA8pC,GAyCAr/B,KAAAs/B,cAAAD,IACAr/B,KAAAi/B,iBA1CAz7B,IAAA,YAAAjO,MAAA,SAAAgqC,GA+CAv/B,KAAAk/B,MAAAK,MA/CA/7B,IAAA,wBAAAjO,MAAA,WAkDA,MAAA,MAlDAiO,IAAA,eAAAjO,MAAA,eAAAiO,IAAA,OAAAjO,MAAA,WAuDA,OAAA,KAvDAiO,IAAA,YAAAjO,MAAA,WA0DA,MAAA,MA1DAiO,IAAA,cAAAjO,MAAA,gBAAA6pC,MCHA3oC,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,SACAqB,SAAAA,KACAhB,UAAAA,cAJA,WAMA,QAAAolC,GAAAppC,GAAAP,EAAAmK,KAAAw/B,GACA/oC,EAAAA,UAAAA,KAAAA,GAPA,MAAA0M,GAAAq8B,IAAAh8B,IAAA,iBAAAjO,MAAA,WAYA,IAAA,GAFAkqC,GAAA,EACAC,EAAA,EACAnrC,EAAA,EAAAA,EAAAyL,KAAAu2B,SAAA9hC,OAAAF,IAAA,CACA,GAAAorC,GAAA3/B,KAAAu2B,SAAAhiC,EACAorC,GAAAjG,SAAAiG,EAAA95B,OAAA85B,EAAA75B,SAGA45B,EAAAA,EAAAA,MAAAA,EAAAA,EAAAA,MAAAA,EACAC,EAAAA,EAAAA,EACAF,GAAAA,EAAAA,OAAAA,KAAAA,SAEAz/B,KAAAq1B,cAAAqK,EACA1/B,KAAAu1B,eAAAkK,EAAAz/B,KAAA4/B,YAtBAJ,MCAA/oC,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,kBACAqB,SAAAA,KACAhB,UAAAA,OACAiB,OACAwkC,iBAAAA,iBAAAA,EAAAA,mBAAAA,IAEArkC,YACAijC,QAAAA,KAAAA,OAAAA,eAAAA,EAAAA,IACAD,KAAAA,KAAAA,OAAAA,aAAAA,EAAAA,GACAsB,UAAAA,KAAAA,MAAAA,aAAAA,KAEAC,UAAAA,KAAAA,OAAAA,aAAAA,KAbA,WAgBA,QAAAC,GAAA5pC,GAAAP,EAAAmK,KAAAggC,GACAvpC,EAAAA,UAAAA,KAAAA,GACAuJ,KAAAigC,gBAAA,gCACAjgC,KAAAkgC,kBAAA,iDAnBA,MAAA/8B,GAAA68B,IAAAx8B,IAAA,uBAAAjO,MAAA,SAAAwqC,GAsBA,OAAAA,GACA,IAAA//B,MAAA6/B,gBAAAM,mBACA,MAAAngC,MAAAkgC,iBACA,KAAAlgC,MAAA6/B,gBAAAO,iBACA,MAAApgC,MAAAigC,gBAEA,MAAA,SA5BAz8B,IAAA,wBAAAjO,MAAA,SAAA8qC,GA+BA,GAAAj7B,KAAAC,MAAAg7B,KAAAA,EACA,MAAA,EAEA,IAAA3X,GAAA,GAAA2X,CACA,OAAA,OAAAC,KAAA5X,GAAA,GAAA,UAnCAllB,IAAA,WAAAjO,MAAA,SAAAkrB,GAsCA,GAAA8f,GAAAvgC,KAAAwgC,qBAAAxgC,KAAA+/B,SACA,KAAAQ,EAAAvkC,KAAAykB,EAAAnI,QACA,OAAA,CAEA,IAAA/iB,GAAAkrC,WAAAhgB,EACA,OAAAzgB,MAAAy+B,QAAAlpC,GAAAyK,KAAAw+B,KAAAjpC,GAAAyK,KAAA0gC,sBAAAnrC,IAAAyK,KAAA8/B,aA3CAE,MCAAvpC,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,OACAqB,SAAAA,KACAhB,UAAAA,aACAiB,OACAslC,MAAAA,YAAAA,EAAAA,YAAAA,IAEAnlC,YACAolC,KAAAA,OACAC,gBAAAA,SAVA,WAaA,QAAAC,GAAA1qC,GAAAP,EAAAmK,KAAA8gC,GACArqC,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAA+gC,YAAAlgC,QAAAb,KAAAA,KAAAghC,gBACAhhC,KAAAihC,uBAAApgC,QAAAb,KAAAA,KAAAghC,gBACAhhC,KAAAkhC,aAAArgC,QAAAb,KAAAA,KAAAghC,gBACAhhC,KAAAmhC,cAAAtgC,QAAAb,KAAAA,KAAAghC,gBACAhhC,KAAAghC,iBApBA,MAAA79B,GAAA29B,IAAAt9B,IAAA,iBAAAjO,MAAA,WAwBA,GAAAwD,SAAAiH,KAAA4gC,KAAA,CAQA,IAAA,GAHAQ,GAAA,EACAC,EAAA,EACAC,EAAA,EACA/sC,EAAA,EAAAA,EAAAyL,KAAAu2B,SAAA9hC,OAAAF,IAAA,CACA,GAAAorC,GAAA3/B,KAAAu2B,SAAAhiC,EACAorC,GAAAjG,SAAAiG,EAAA95B,OAAA85B,EAAA75B,SAIA9F,KAAA4gC,OAAA5gC,KAAA2gC,KAAAh2B,cACA3K,KAAAuhC,uBAAAH,EAAAzB,EAAA95B,MAAA7F,KAAA6F,QACAu7B,EAAAA,EACAC,GAAAA,EAAAA,KAAAA,QACAC,EAAAA,GAEAA,EAAAA,EAAAA,OAAAA,EAAAA,EAAAA,OAAAA,EACA3B,EAAAA,EAAAA,KAAAA,kBAAAA,KAAAA,KAAAA,YAAAA,KAAAA,MAAAA,EAAAA,EAAAA,MAAAA,EAEAA,EAAAA,EAAAA,EACAyB,GAAAA,EAAAA,MAAAA,KAAAA,WAEAphC,KAAAwhC,wBAAAH,EAAA1B,EAAA75B,OAAA9F,KAAA8F,SAGAu7B,EAAAA,EACAD,GAAAA,EAAAA,KAAAA,QACAE,EAAAA,GAEAA,EAAAA,EAAAA,MAAAA,EAAAA,EAAAA,MAAAA,EACA3B,EAAAA,EAAAA,KAAAA,kBAAAA,KAAAA,KAAAA,YAAAA,KAAAA,MAAAA,EAAAA,EAAAA,MAAAA,EAEAA,EAAAA,EAAAA,EACA0B,GAAAA,EAAAA,OAAAA,KAAAA,UAIArhC,KAAA4gC,OAAA5gC,KAAA2gC,KAAAh2B,aACA3K,KAAAq1B,cAAA+L,EAAAphC,KAAA4/B,QACA5/B,KAAAu1B,eAAA8L,EAAAC,IAEAthC,KAAAq1B,cAAA+L,EAAAE,EACAthC,KAAAu1B,eAAA8L,EAAArhC,KAAA4/B,cAtEAkB,MCAArqC,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,OACAqB,SAAAA,KACAhB,UAAAA,kBAJA,SAAAqnC,GAMA,QAAAC,GAAAnrC,GAAAV,EAAAmK,KAAA0hC,EAAA,IAAAC,GAAAhtC,EAAAqL,MAAA0hC,EAAA9rC,WAAAR,OAAA4Q,eAAA07B,IAAA7sC,KAAAmL,KAAAzJ,GAEAorC,GAAAC,KAAA1tC,EAAA0tC,IAEA,IAAAA,GAAAD,EAAAC,KACArjC,EAAA9H,EAAA8H,cALA,OAOAA,GAAAA,OAAAA,EAAAA,QACAA,EAAAA,OAAAA,EAAAA,kBAAAA,aAAAA,EAAAA,YAEAA,EAAAA,SAAAA,EAAAA,UAAAA,aAAAA,eACAA,EAAAA,OAAAA,EAAAA,UACAA,EAAAA,OAAAA,EAAAA,iBACAA,EAAAA,MAAAA,EAAAA,aAAAA,aAAAA,KACAA,EAAAA,OAAAA,EAAAA,aAAAA,aAAAA,KACAA,EAAAA,OAAAA,EAAAA,aACAA,EAAAA,OAAAA,EAAAA,aACAA,EAAAA,OAAAA,EAAAA,UAAAA,aAAAA,EAAAA,SACAA,EAAAA,OAAAA,EAAAA,eAEAojC,EAAAE,WAAA,EAEAF,EAAAG,YAAAjhC,QAAA8gC,EAAAA,EAAAI,gBACAJ,EAAAK,sBAAAnhC,QAAA8gC,EAAAA,EAAAM,0BACAN,EAAAO,cAAArhC,QAAA8gC,EAAAA,EAAAQ,kBACAR,EAAAS,cAAAvhC,QAAA8gC,EAAAA,EAAAU,kBACAV,EAAAW,qBAAAzhC,QAAA8gC,EAAAA,EAAAY,yBACAZ,EAAAa,iBAAA3hC,QAAA8gC,EAAAA,EAAAc,qBACAd,EAAAe,iBAAA7hC,QAAA8gC,EAAAA,EAAAgB,qBACAhB,EAAAiB,iBAAA/hC,QAAA8gC,EAAAA,EAAAkB,qBACAlB,EAAAmB,iBAAAjiC,QAAA8gC,EAAAA,EAAAoB,qBACApB,EAAAqB,cAAAniC,QAAA8gC,EAAAA,EAAAsB,iBACAtB,EAAAuB,mBAAAriC,QAAA8gC,EAAAA,EAAAwB,uBAhCAxB,EANA,MAAA5sC,GAAA2sC,EAAAD,GAAAt+B,EAAAu+B,IAAAl+B,IAAA,iBAAAjO,MAAA,SAAA8mB,GAyCA,GAAAulB,GAAA5hC,KAAA4hC,IACA5hC,MAAAojC,OAAA/mB,EAAAulB,EAAAyB,KAAAzB,EAAA1G,UA1CA13B,IAAA,2BAAAjO,MAAA,SAAA8mB,GA6CA,GAAAgR,GAAArtB,KAAA6D,QAAAvF,IAAA64B,WAAA9J,KACAA,GAAAA,YAAAA,IAAAA,KAAAA,KAAAA,UAAAA,aAAAA,OACAA,EAAAA,cAAAA,KAAAA,+BAAAA,MA/CA7pB,IAAA,mBAAAjO,MAAA,SAAA8mB,GAkDA,GAAAgR,GAAArtB,KAAA6D,QAAAvF,IAAA64B,WAAA9J,KACAA,GAAAA,WAAAA,KAnDA7pB,IAAA,mBAAAjO,MAAA,SAAA8mB,GAsDA,GAAAgR,GAAArtB,KAAA6D,QAAAvF,IAAA64B,WAAA9J,KACAA,GAAAA,UAAAA,EAAAA,SAAAA,YAvDA7pB,IAAA,0BAAAjO,MAAA,SAAA8mB,GA0DA,GAAAgR,GAAArtB,KAAA6D,QAAAvF,IAAA64B,WAAA9J,KACAA,GAAAA,cAAAA,SAAAA,EAAAA,EAAAA,KAAAA,MA3DA7pB,IAAA,sBAAAjO,MAAA,SAAA8mB,GA8DArc,KAAA6hC,YACA7hC,KAAAsjC,UAAA,IAAAjnB,EAEA,IAAApmB,GAAAomB,EAAA,IACArc,MAAA6D,QAAAvF,IAAA+uB,MAAAkW,SAAAttC,EACA+J,KAAA6D,QAAAvF,IAAA64B,WAAA9J,MAAAkW,SAAAttC,KAnEAuN,IAAA,sBAAAjO,MAAA,SAAA8mB,GAsEArc,KAAA6hC,WAAA,EACA7hC,KAAAwjC,UAAAp+B,KAAAC,MAAAgX,EAAA,KACArc,KAAA6hC,WAAA,KAxEAr+B,IAAA,sBAAAjO,MAAA,SAAA8mB,GA2EA,GAAAgR,GAAArtB,KAAA6D,QAAAvF,IAAA64B,WAAA9J,KACAA,GAAAA,eAAAA,EAAAA,eAAAA,KAAAA,QAAAA,KAAAA,UAAAA,YAAAA,UA5EA7pB,IAAA,sBAAAjO,MAAA,SAAA8mB,GAmFA,GAAAgR,GAAArtB,KAAA6D,QAAAvF,IAAA64B,WAAA9J,KACAA,GAAAA,eAAAA,KAAAA,QAAAA,KAAAA,UAAAA,eAAAA,EAAAA,YAAAA,UApFA7pB,IAAA,kBAAAjO,MAAA,SAAA8mB,GA2FA,GAAAgR,GAAArtB,KAAA6D,QAAAvF,IAAA64B,WAAA9J,KACAA,GAAAA,WAAAA,KAAAA,aAAAA,MA5FA7pB,IAAA,wBAAAjO,MAAA,SAAA8mB,GA+FA,GAAAgR,GAAArtB,KAAA6D,QAAAvF,IAAA64B,WAAA9J,KACAA,GAAAA,YAAAA,SAAAA,EAAAA,EAAAA,KAAAA,MAhGA7pB,IAAA,eAAAjO,MAAA,SAAA6tC,GAoGA,GAAAxB,GAAA5hC,KAAA4hC,IACA,QAAAwB,GACA,IAAAxB,GAAA6B,KAAA,MAAA,KACA,KAAA7B,GAAA8B,WAAA,MAAA,KACA,KAAA9B,GAAA+B,MAAA,MAAA,KACA,KAAA/B,GAAA1G,OAAA,MAAA,KACA,KAAA0G,GAAAgC,OAAA,MAAA,KACA,KAAAhC,GAAAiC,SAAA,MAAA,KACA,KAAAjC,GAAAyB,KAAA,MAAA,KACA,KAAAzB,GAAAkC,UAAA,MAAA,KACA,KAAAlC,GAAAmC,MAAA,MAAA,MAEA,MAAA,YAhHAvgC,IAAA,iCAAAjO,MAAA,SAAAyuC,GAmHA,GAAApC,GAAA5hC,KAAA4hC,IACA,QAAAoC,GACA,IAAApC,GAAAqC,aAAA,MAAA,WACA,KAAArC,GAAAsC,aAAA,MAAA,WACA,KAAAtC,GAAAuC,WAAA,MAAA,aAEA,MAAA,WAzHAzC,GAAAjrC,EAAAmN,UCAA1P,EAAAA,MAEAkwC,UAAAA,EACAH,aAAAA,EACAC,aAAAA,EACAG,UAAAA,EACAF,WAAAA,EAEAV,KAAAA,EACAC,WAAAA,GACAC,MAAAA,GACAzI,OAAAA,GACA0I,OAAAA,GACAC,SAAAA,GACAR,KAAAA,GACAS,UAAAA,GACAC,MAAAA,IChBAttC,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,aACAqB,SAAAA,KACAhB,UAAAA,iBACAiB,OACAipC,YAAAA,KAAAA,EAAAA,MAAAA,EAAAA,QAAAA,EAAAA,MAAAA,IAEA9oC,YACAzB,KAAAA,SACAP,OAAAA,MACAtB,OAAAA,SAXA,WAcA,QAAAqsC,GAAAnuC,GAAAP,EAAAmK,KAAAukC,GACA9tC,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAAwkC,UAAA1iC,SAAAmZ,cAAA,SACAjb,KAAAykC,UAAA,GACAzkC,KAAA0kC,cAAA,EAoBA1kC,KAAA2kC,WAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,MAEA3kC,KAAAwqB,cAAA3pB,QAAAb,KAAAA,KAAAyqB,kBACAzqB,KAAA4kC,YAAA/jC,QAAAb,KAAAA,KAAA6kC,gBA1CA,MAAA1hC,GAAAohC,IAAA/gC,IAAA,YAAAjO,MAAA,SAAAuvC,GA4CA,GAAAC,GAAA/kC,IAEA,IAAAA,KAAAykC,YAAAK,IAAA9kC,KAAA0kC,aAAA,CAKA,GAFA1kC,KAAAykC,UAAAK,GAEAA,EAEA,YADA9kC,KAAA9H,OAAA8H,KAAAskC,WAAAvH,KAIA,IADA/8B,KAAA9H,OAAA8H,KAAAskC,WAAApW,QACA,kBAAAoW,YAAA,CACA,GAAAU,GAAA,GAAAV,aAAAQ,IACAG,YAAAA,SAAAA,GACA,OAAAnY,GACAiY,EAAAN,YAAAK,GAAAhY,EAAAoY,sBAAA,KAAAJ,IAGAC,EAAAhrC,KAAA+qC,EACAC,EAAA7sC,OAAA6sC,EAAAT,WAAAjmC,QAIA8mC,WAAAA,SAAAA,GACAJ,EAAAN,YAAAK,GAAAM,IAAAN,IACAC,EAAAhrC,KAAA+qC,EACAC,EAAA7sC,OAAA6sC,EAAAT,WAAA9G,SAdAx9B,KAAA2kC,UAAA3kC,KAAA2kC,UAAAlwC,OAAA,GAmBA6vC,YAAAA,QAAAA,KACAU,EAAAA,gBAEA7sC,SAAAA,KAAAA,kKAIA6H,KAAA9H,OAAA8H,KAAAskC,WAAAjmC,MACA2B,KAAAjG,KAAA+qC,EACA9kC,KAAAqlC,gBAAAP,EAAA,OArFAthC,IAAA,kBAAAjO,MAAA,SAAAuvC,EAAAvwC,GAwFA,GAAA+wC,GAAAtlC,IACA,IAAAA,KAAAykC,YAAAK,EAAA,CAGA,GAAAvwC,EAAA,EAAA,CACA,GAAAwF,GAAAiG,KAAAjG,IACAiG,MAAA0kC,cAAA,EAGA1kC,KAAAjG,KAAA,aACAiG,KAAAjG,KAAAA,EACAiG,KAAA0kC,cAAA,EAEAnwC,EAAAyL,KAAA2kC,UAAAlwC,QACA8wC,WAAAA,WACAD,EAAAD,gBAAAP,EAAAvwC,EAAA,IACAyL,KAAA2kC,UAAApwC,IAAAA,EAAA,EAAAyL,KAAA2kC,UAAApwC,EAAA,GAAA,QAxGAiP,IAAA,mBAAAjO,MAAA,SAAAiwC,GA4GA,GAAAC,GAAArgC,KAAAC,MAAA,KAAAD,KAAAsgC,UACAZ,EAAA,QAAAnrB,KAAAC,MAAAtU,SAAA,IAAA,IAAAmgC,EAAAngC,SAAA,GACAtF,MAAAwkC,UAAAhO,UAAA,oCAAAsO,EAAA,sBAAAU,EAAA,aAIA1jC,SAAAA,qBAAAA,QAAAA,GAAAA,YAAAA,KAAAA,WACA9B,KAAA2lC,UAAAb,MAnHAthC,IAAA,iBAAAjO,MAAA,SAAAuvC,GAsHA9kC,KAAA2lC,UAAAb,OAtHAP,MCAA9tC,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,OACAqB,SAAAA,KACAhB,UAAAA,aACAiB,OACAuqC,MAAAA,YAAAA,EAAAA,YAAAA,IAEApqC,YACAqqC,QAAAA,MACAC,KAAAA,MACAlF,KAAAA,OACAC,gBAAAA,SAZA,WAeA,QAAAkF,GAAA3vC,GAAAP,EAAAmK,KAAA+lC,GACAtvC,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAAgmC,eAAAnlC,QAAAb,KAAAA,KAAAghC,gBACAhhC,KAAAimC,YAAAplC,QAAAb,KAAAA,KAAAghC,gBACAhhC,KAAA+gC,YAAAlgC,QAAAb,KAAAA,KAAAghC,gBACAhhC,KAAAihC,uBAAApgC,QAAAb,KAAAA,KAAAghC,gBACAhhC,KAAAghC,iBAtBA,MAAA79B,GAAA4iC,IAAAviC,IAAA,iBAAAjO,MAAA,WA0BA,GAAA2wC,GAAAlmC,KAAAmmC,mBAFAC,EAAApmC,KAAAqmC,eAAAH,EAAAzxC,QAAA6xC,EAAA5pC,EAAA0pC,EAAA,GAAAzoC,EAAA2oC,EAAA,GAAAr+B,EAAAq+B,EAAA,GAAAC,EAAAvmC,KAAAwmC,eAAAN,EAAAvoC,EAAAsK,GAAAw+B,EAAA/pC,EAAA6pC,EAAA,GAAAG,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GAYAG,EAAA,IAAA5mC,KAAA6gC,mBAAA,EACAgG,EAAA,IAAA7mC,KAAA6gC,gBAAAljC,EAAA,EAAA,EACAmpC,EAAA,IAAA9mC,KAAA6gC,mBAAAljC,EACAyjC,EAAA,EACAC,EAAA,CACA,IAAA,IAAArhC,KAAA4gC,KACA,IAAA,GAAArsC,GAAA,EAAAA,EAAA0T,EAAA1T,IAAA,CACA,IAAA,GAAAwM,GAAA8lC,EAAA9lC,IAAA+lC,EAAA/lC,GAAA6lC,EAAA,CACA,GAAAtpC,GAAA4oC,EAAA3xC,EAAAoJ,EAAAoD,EACA,KAAAzD,EACA,KAEAA,GAAAA,EAAAA,EACAA,EAAAA,EAAAA,EAEA8jC,GAAAA,EAAAA,GAAAA,KAAAA,QAEAC,GAAAA,EAAAA,GAAAA,KAAAA,QACAD,EAAAA,MAGA,KAAA,GAAA2F,GAAAF,EAAAE,IAAAD,EAAAC,GAAAH,EAAA,CACA,IAAA,GAAAI,GAAA,EAAAA,EAAA/+B,EAAA++B,IAAA,CACA,GAAAC,GAAAf,EAAAa,EAAA9+B,EAAA++B,EACA,KAAAC,EACA,KAEA3pC,GAAAA,EAAAA,EACAA,EAAAA,EAAAA,EAEA+jC,GAAAA,EAAAA,GAAAA,KAAAA,QAEAD,GAAAA,EAAAA,GAAAA,KAAAA,QACAC,EAAAA,EAKA,GAAA6F,IAAAlnC,KAAA4/B,QACAuH,GAAAnnC,KAAA4/B,OACA,KAAA,GAAAwH,KAAAV,GACAQ,GAAAA,EAAAA,GAAAA,KAAAA,OAEA,KAAA,GAAAG,KAAAV,GACAQ,GAAAA,EAAAA,GAAAA,KAAAA,OAEAnnC,MAAAq1B,cAAA6R,EACAlnC,KAAAu1B,eAAA4R,KAnFA3jC,IAAA,mBAAAjO,MAAA,WAsFA,MAAAyK,MAAAu2B,SAAA57B,OAAA,SAAAglC,GAAA,MAAAA,GAAAjG,SAAAiG,EAAA95B,OAAA85B,EAAA75B,YAtFAtC,IAAA,iBAAAjO,MAAA,SAAAd,GA2FA,GAAA6yC,GAAA,OACAxB,EAAA,MAWA,OAVA9lC,MAAA6lC,SAAA7lC,KAAA8lC,KAGA9lC,KAAA6lC,SAIAyB,EAAAA,KAAAA,QACAxB,EAAAA,KAAAA,KAAAA,EAAAA,KAJAA,EAAAA,KAAAA,KACAwB,EAAAA,KAAAA,KAAAA,EAAAA,KAJAA,EAAAA,EACAxB,EAAAA,KAAAA,KAAAA,EAAAA,KAQAwB,EAAAxB,MAvGAtiC,IAAA,iBAAAjO,MAAA,SAAA2wC,EAAAoB,EAAAxB,GA0GA,GAAAY,MACAC,IAEA,IAAA,IAAA3mC,KAAA4gC,KACA,IAAA,GAAArsC,GAAA,EAAAA,EAAAuxC,EAAAvxC,IACA,IAAA,GAAAwM,GAAA,EAAAA,EAAAumC,EAAAvmC,IAAA,CACA,GAAAzD,GAAA4oC,EAAA3xC,EAAA+yC,EAAAvmC,EACA,KAAAzD,EACA,QAEAopC,EAAA3lC,IAAAzD,EAAAuI,MAAA6gC,EAAA3lC,MACA2lC,EAAAA,GAAAA,EAAAA,SAEAC,EAAApyC,IAAA+I,EAAAwI,OAAA6gC,EAAApyC,MACAoyC,EAAAA,GAAAA,EAAAA,YAKA,KAAA,GAAAY,GAAA,EAAAA,EAAAD,EAAAC,IACA,IAAA,GAAAC,GAAA,EAAAA,EAAA1B,EAAA0B,IAAA,CACA,GAAAC,GAAAvB,EAAAqB,EAAAzB,EAAA0B,EACA,KAAAC,EACA,QAEAd,EAAAa,IAAAC,EAAA3hC,OAAA6gC,EAAAa,MACAb,EAAAA,GAAAA,EAAAA,UAEAD,EAAAa,IAAAE,EAAA5hC,MAAA6gC,EAAAa,MACAb,EAAAA,GAAAA,EAAAA,OAMA,OAAAA,EAAAC,OA7IAZ,MCAAtvC,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,QACAqB,SAAAA,KACAhB,UAAAA,OACAiB,OACAkiC,OACA7N,QAAAA,EAAAA,kBAAAA,EAAAA,mBAAAA,EACAgY,KAAAA,EAAAA,eAAAA,EAAAA,iBAAAA,EAEA3K,KAAAA,EAAAA,MAAAA,EAAAA,QAAAA,EAAAA,MAAAA,IAGAvhC,YACAmsC,cAAAA,KAAAA,OAAAA,cAAAA,GACAC,OAAAA,KAAAA,OAAAA,cAAAA,GACA5K,QAAAA,KAAAA,OAAAA,cAAAA,GACAnQ,UAAAA,KAAAA,OAAAA,aAAAA,GACAgb,OAAAA,OACAha,SAAAA,OACAr0B,OAAAA,MACAtB,QAAAA,KAAAA,OAAAA,aAAAA,KArBA,WAwBA,QAAA4vC,GAAA1xC,GAAA,GAAA2xC,GAAA/nC,IAAAnK,GAAAmK,KAAA8nC,GACArxC,EAAAA,UAAAA,KAAAA,EAEA,IAAA8H,GAAA9H,EAAA8H,cAEAyB,MAAAgoC,WAAA,GAAAvxC,GAAAmN,QAAA5D,MACAzB,EAAAA,MAAAA,KAAAA,WAAAA,SACAA,EAAAA,MAAAA,KAAAA,WAAAA,SAEA,IAAA8+B,GAAAr9B,KAAAqY,KAAAvW,SAAAmZ,cAAA,MACAoiB,GAAAA,MAAAA,cAAAA,OACAA,EAAAA,MAAAA,OAAAA,OACAr9B,KAAA1B,IAAAivB,YAAA8P,GAEAr9B,KAAAs9B,KAAA,GAAAC,OACAv9B,KAAAs9B,KAAA9P,iBAAA,OAAA,WACA,GAAAya,GAAAF,EAAAzK,KAAA4K,aACAz/B,EAAAs/B,EAAAzK,KAAA6K,aACAJ,GAAAC,WAAAniC,MAAAoiC,EACAF,EAAAC,WAAAliC,OAAA2C,EACAs/B,EAAA1S,cAAA4S,EACAF,EAAAxS,eAAA9sB,EACAs/B,EAAAla,SAAA,EACAka,EAAA7vC,OAAA6vC,EAAAxK,MAAAC,QAEAx9B,KAAAs9B,KAAA9P,iBAAA,QAAA,WACAua,EAAA7vC,OAAA6vC,EAAAxK,MAAAl/B,QAGA2B,KAAAwqB,cAAA3pB,QAAAb,KAAAA,KAAAyqB,kBACAzqB,KAAAooC,cAAAvnC,QAAAb,KAAAA,KAAAqoC,kBACAroC,KAAA+uB,gBAAAluB,QAAAb,KAAAA,KAAAgvB,oBACAhvB,KAAAg+B,cAAAn9B,QAAAb,KAAAA,KAAAi+B,kBAxDA,MAAA96B,GAAA2kC,IAAAtkC,IAAA,kBAAAjO,MAAA,WA0DA,GAAAU,GAAAuI,UAAA/J,OAAA,GAAAsE,SAAAyF,UAAA,GAAAA,UAAA,GAAAwB,KAAA6sB,SACAQ,EAAArtB,KAAAqY,KAAAgV,KACA,QAAAp3B,GACA,QACA,IAAA+J,MAAAu9B,MAAA7N,QACArC,EAAAA,iBAAAA,OACAA,EAAAA,eAAAA,YACAA,EAAAA,mBAAAA,MACA,MACA,KAAArtB,MAAAu9B,MAAAmK,KACAra,EAAAA,iBAAAA,OACAA,EAAAA,eAAAA,OACAA,EAAAA,mBAAAA,QACA,MACA,KAAArtB,MAAAu9B,MAAA3N,kBACAvC,EAAAA,iBAAAA,YACAA,EAAAA,eAAAA,UACAA,EAAAA,mBAAAA,QACA,MACA,KAAArtB,MAAAu9B,MAAA1N,mBACAxC,EAAAA,iBAAAA,YACAA,EAAAA,eAAAA,QACAA,EAAAA,mBAAAA,QACA,MACA,KAAArtB,MAAAu9B,MAAA+K,eACAjb,EAAAA,iBAAAA,WACAA,EAAAA,eAAAA,YACAA,EAAAA,mBAAAA,MACA,MACA,KAAArtB,MAAAu9B,MAAAgL,iBACAlb,EAAAA,iBAAAA,WACAA,EAAAA,eAAAA,YACAA,EAAAA,mBAAAA,WA1FA7pB,IAAA,mBAAAjO,MAAA,SAAAiE,GA+FAwG,KAAA6tB,SAAA,EACA7tB,KAAA9H,OAAA8H,KAAAu9B,MAAArP,OACA,IAAAgQ,GAAAznC,EAAAK,OAAAqnC,iBAAA3kC,EACAwG,MAAAqY,KAAAgV,MAAAmb,gBAAA,QAAAtK,EAAA,KACAl+B,KAAAs9B,KAAAt7B,IAAAk8B,EACAl+B,KAAAs9B,KAAAc,WACAp+B,KAAA6tB,SAAA,EACA7tB,KAAA9H,OAAA8H,KAAAu9B,MAAAC,OAEAx9B,KAAAyoC,qBAxGAjlC,IAAA,mBAAAjO,MAAA,SAAAU,GA2GA,GAAAyyC,GAAA,aACA,IAAAzyC,EAMA+J,KAAA6qB,UAAA5nB,KAAAylC,OANA,CACA,GAAAtkC,GAAApE,KAAA6qB,UAAAtyB,QAAAmwC,EACAtkC,IAAA,GACApE,KAAA6qB,UAAAxmB,OAAAD,EAAA,GAKApE,KAAA8qB,sBApHAtnB,IAAA,qBAAAjO,MAAA,SAAAU,GAuHA+J,KAAAyoC,gBAAAxyC,MAvHAuN,IAAA,mBAAAjO,MAAA,SAAAU,GA0HA,GAAAo3B,GAAArtB,KAAAqY,KAAAgV,KACAp3B,GACAo3B,EAAAA,eAAAA,QAEAA,EAAAA,eAAAA,4BACAA,EAAAA,eAAAA,mBACAA,EAAAA,eAAAA,cACAA,EAAAA,eAAAA,iBAjIAya,MCAArxC,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,eACAqB,SAAAA,KACAhB,UAAAA,OACAoB,YACAijC,QAAAA,KAAAA,MAAAA,0BACAD,KAAAA,KAAAA,MAAAA,aAAAA,cAPA,WAUA,QAAAmK,GAAAvyC,GAAAP,EAAAmK,KAAA2oC,GACAlyC,EAAAA,UAAAA,KAAAA,GAXA,MAAA0M,GAAAwlC,IAAAnlC,IAAA,WAAAjO,MAAA,SAAAkrB,GAcA,GAAA8f,GAAA,qBACAqI,EAAArI,EAAAvkC,KAAAykB,EAAAnI,OAEA,IAAAswB,EAAA,CACA,GAAArzC,GAAAszC,SAAApoB,EAAA,GACAmoB,GAAAA,KAAAA,QAAAA,GAAAA,KAAAA,KAAAA,EAEA,MAAAA,OArBAD,MCAAlyC,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,OACAqB,SAAAA,KACAhB,UAAAA,iBACAoB,YACAstC,UAAAA,KAAAA,OAAAA,aAAAA,GACAvyC,OAAAA,OACAwyC,MAAAA,SACAC,OAAAA,OACAC,YAAAA,OACAC,KAAAA,OACA3S,SAAAA,OACA4S,UAAAA,OACAte,UAAAA,OACAue,EAAAA,OACAC,EAAAA,OACAC,EAAAA,OACAzjC,MAAAA,OACAC,OAAAA,OACAuvB,cAAAA,OACAE,eAAAA,OACAgJ,KAAAA,OACAD,MAAAA,OACAE,IAAAA,OACAC,OAAAA,OACA8K,iBAAAA,OACAC,eAAAA,OACAC,SAAAA,OACAC,OAAAA,KAAAA,OAAAA,aAAAA,GACAC,SAAAA,KAAAA,OAAAA,aAAAA,GACAjQ,SAAAA,KAAAA,OAAAA,cAAAA,GACAkQ,KAAAA,OACArQ,MAAAA,QAEAh+B,gBAAAA,QAnCA,WAqCA,QAAAsuC,GAAAzzC,GAAA,GAAA0zC,GAAA9pC,IAAAnK,GAAAmK,KAAA6pC,GACApzC,EAAAA,UAAAA,KAAAA,GAEA,OAAAuJ,KAAA6D,SACA7D,KAAA1B,IAAA7H,EAAAK,OAAAiiB,aAAAjX,SAAAsmB,KACApoB,KAAA1B,IAAAk4B,UAAA,GAEAx2B,KAAA1B,IAAA+uB,MAAAvB,SAAA,WACA9rB,KAAA1B,IAAA+uB,MAAAmR,IAAA,IACAx+B,KAAA1B,IAAA+uB,MAAAkR,KAAA,IAEAv+B,KAAA1B,IAAA+uB,MAAA0c,SAAA,WAEA/pC,KAAA1B,MACA0B,KAAA1B,IAAAwD,SAAAmZ,cAAA,QAEAjb,KAAA1B,IAAA+uB,MAAAvB,SAAA,YAEA9rB,KAAA1B,IAAA+uB,MAAAyI,cAAA,MAGA,IAAAkU,GAAA5zC,EAAAE,OAAAmH,OAAAxE,MAAA,KAAA6hB,KACA9a,MAAA1B,IAAA2rC,UAAA,GAAAD,GAAAhqC,KAAArE,GAAA,IAAAqE,KAAArE,GAAA,IACAqE,KAAAg4B,IAAAh4B,KAAA1B,IAAA+uB,MACArtB,KAAAqY,KAAA,KAEArY,KAAAg4B,IAAAkS,UAAA,YAEA,IAAA3rC,GAAA9H,EAAA8H,cAgFA,IA9EAyB,KAAAlB,kBACAP,EAAAA,MAAAA,KAAAA,eAGAyB,KAAAmqC,cAAAtpC,QAAAb,KAAAA,KAAAoqC,mBACApqC,KAAA0E,YAAA7D,QAAAb,KAAAA,KAAAqqC,gBACArqC,KAAAsqC,aAAAzpC,QAAAb,KAAAA,KAAAuqC,iBACAvqC,KAAAwqC,eAAA3pC,QAAAb,KAAAA,KAAAyqC,oBACAzqC,KAAA0qC,YAAA7pC,QAAAb,KAAAA,KAAA2qC,gBACA3qC,KAAA4qC,SAAA/pC,QAAAb,KAAAA,KAAA6qC,aACA7qC,KAAA8qC,SAAAjqC,QAAAb,KAAAA,KAAA+qC,aACA/qC,KAAAgrC,SAAAnqC,QAAAb,KAAAA,KAAAirC,aACAjrC,KAAAkhC,aAAArgC,QAAAb,KAAAA,KAAAkrC,kBACAlrC,KAAAmhC,cAAAtgC,QAAAb,KAAAA,KAAAmrC,mBACAnrC,KAAAo5B,aAAAv4B,QAAAb,KAAAA,KAAAorC,kBAEAprC,KAAAkhC,aAAArgC,QAAAb,KAAAA,KAAA0e,kBACA1e,KAAAmhC,cAAAtgC,QAAAb,KAAAA,KAAA2e,kBACA3e,KAAAqrC,qBAAAxqC,QAAAb,KAAAA,KAAAsrC,yBACAtrC,KAAAurC,sBAAA1qC,QAAAb,KAAAA,KAAAwrC,0BAEAxrC,KAAAuhC,uBAAA,EACAvhC,KAAAwhC,wBAAA,EAEAxhC,KAAAyrC,QAAA,GAAAh1C,GAAAmN,QAAA5D,MACAzB,EAAAA,MAAAA,KAAAA,QAAAA,QACAA,EAAAA,MAAAA,KAAAA,QAAAA,SACAA,EAAAA,MAAAA,KAAAA,QAAAA,OACAA,EAAAA,MAAAA,KAAAA,QAAAA,UACAA,EAAAA,MAAAA,KAAAA,QAAAA,oBACAA,EAAAA,MAAAA,KAAAA,QAAAA,kBACAA,EAAAA,OAAAA,KAAAA,QAAAA,QACAA,EAAAA,OAAAA,KAAAA,QAAAA,YACAA,EAAAA,OAAAA,KAAAA,QAAAA,WACAA,EAAAA,OAAAA,KAAAA,QAAAA,cACAA,EAAAA,OAAAA,KAAAA,QAAAA,eACAA,EAAAA,OAAAA,KAAAA,QAAAA,aACAA,EAAAA,OAAAA,KAAAA,QAAAA,gBACAyB,KAAAyrC,QAAAhO,YAAA58B,QAAAb,KAAAA,KAAA0e,kBACA1e,KAAAyrC,QAAA9N,aAAA98B,QAAAb,KAAAA,KAAA0e,kBACA1e,KAAAyrC,QAAA7N,WAAA/8B,QAAAb,KAAAA,KAAA2e,kBACA3e,KAAAyrC,QAAA5N,cAAAh9B,QAAAb,KAAAA,KAAA2e,kBACA3e,KAAAyrC,QAAAC,wBAAA7qC,QAAAb,KAAAA,KAAA0e,kBACA1e,KAAAyrC,QAAAE,sBAAA9qC,QAAAb,KAAAA,KAAA2e,kBACA3e,KAAAyrC,QAAAG,YAAA/qC,QAAAb,KAAAA,KAAA0e,kBACA1e,KAAAyrC,QAAAG,YAAA/qC,QAAAb,KAAAA,KAAA2e,kBACA3e,KAAAyrC,QAAAI,gBAAAhrC,QAAAb,KAAAA,KAAA0e,kBACA1e,KAAAyrC,QAAAI,gBAAAhrC,QAAAb,KAAAA,KAAA2e,kBACA3e,KAAAyrC,QAAAK,kBAAAjrC,QAAAb,KAAAA,KAAA0e,kBACA1e,KAAAyrC,QAAAM,mBAAAlrC,QAAAb,KAAAA,KAAA0e,kBACA1e,KAAAyrC,QAAAO,iBAAAnrC,QAAAb,KAAAA,KAAA2e,kBACA3e,KAAAyrC,QAAAQ,oBAAAprC,QAAAb,KAAAA,KAAA2e,kBACA3e,KAAAyrC,QAAAS,eAAArrC,QAAAb,KAAAA,KAAA0e,kBACA1e,KAAAyrC,QAAAS,eAAArrC,QAAAb,KAAAA,KAAA2e,kBAGA3e,KAAAmsC,aAAA,GAAA11C,GAAAmN,QAAA5D,MACAzB,EAAAA,OAAAA,KAAAA,aAAAA,KACAA,EAAAA,OAAAA,KAAAA,aAAAA,KACAA,EAAAA,OAAAA,KAAAA,aAAAA,SACAA,EAAAA,OAAAA,KAAAA,aAAAA,UAEAyB,KAAAosC,gBAAAvrC,QAAAb,KAAAA,KAAA8qB,kBACA9qB,KAAAqsC,aAAAxrC,QAAAb,KAAAA,KAAA8qB,kBACA9qB,KAAAssC,iBAAAzrC,QAAAb,KAAAA,KAAA8qB,kBAEA9qB,KAAAspB,UAAAC,UAAA1oB,QAAAb,KAAAA,KAAAusC,wBACAvsC,KAAAwsC,eAAA3rC,QAAAb,KAAAA,KAAAysC,mBACAzsC,KAAA6D,SACA7D,KAAA6D,QAAA6oC,gBAAA7rC,QAAAb,KAAAA,KAAAysC,mBAGAzsC,KAAA4/B,QAAA,EACA5/B,KAAA2sC,kBACA3sC,KAAAg4B,IAAAuG,KAAAv+B,KAAAopC,EAAA,KACAppC,KAAAg4B,IAAAwG,IAAAx+B,KAAAqpC,EAAA,KAGA,OAAArpC,KAAA6D,QACA,GAAApN,EAAAK,OAAAiiB,YAqBA/Y,KAAA1B,IAAAsuC,kBAAA,WACA9C,EAAAvU,eAAAuU,EAAAxrC,IAAAk3B,aACAsU,EAAAzU,cAAAyU,EAAAxrC,IAAAg3B,aAEAtsB,OAAAA,iBAAAA,SAAAA,KAAAA,IAAAA,mBACAhJ,KAAA1B,IAAAsuC,wBA1BA,CAKA,GAAAA,GAAA,WACA9C,EAAAvU,eAAAvsB,OAAAozB,YACA0N,EAAAzU,cAAArsB,OAAAqzB,WAEArzB,QAAAA,iBAAAA,SAAAA,GACA4jC,KA5JA,MAAAzpC,GAAA0mC,IAAArmC,IAAA,oBAAAjO,MAAA,SAAAs3C,EAAAC,EAAA31C,GAiLA21C,IACAA,EAAAA,SAAAA,OAAAA,EAAAA,SAAAA,QAAAA,MAAAA,GACAA,EAAAA,kBACAA,EAAAA,IAAAA,YAAAA,KAAAA,MAEAD,GAAAA,EAAAtW,SAAAh+B,QAAAyH,aACA6sC,EAAAA,SAAAA,KAAAA,MACAA,EAAAA,mBAEAA,GACAA,EAAAA,IAAAA,YAAAA,KAAAA,KAEA7sC,KAAA0e,iBAAAmuB,EAAAC,EAAA31C,GACA6I,KAAA2e,iBAAAkuB,EAAAC,EAAA31C,MA9LAqM,IAAA,iBAAAjO,MAAA,SAAAw3C,GAiMA,GAAAnb,GAAAn7B,EAAAoF,eAAA,UAAA,MAAA,OACA,KAAA,GAAAtH,KAAAw4C,GAAA,CACA,GAAApN,GAAAoN,EAAAx4C,EACAorC,aAAA/N,GACA+N,EAAAA,OAAAA,KAEA3/B,KAAAmpC,UAAAlmC,KAAA08B,OAvMAn8B,IAAA,kBAAAjO,MAAA,SAAA8mB,EAAAiD,GA8MA,IAAA,GADA0tB,GAAA,OACAz4C,EAAA,EAAAA,EAAAyL,KAAAgpC,OAAAv0C,OAAAF,IACAyL,KAAAgpC,OAAAz0C,GAAAwF,OAAAsiB,IACA2wB,EAAAA,KAAAA,OAAAA,GASA,IAAAC,GAAAjtC,KAAA2sC,eAAAntC,OAGA,KAAA,GAAA0tC,KAAAD,GAAA,CACA,GAAAE,GAAAF,EAAAC,EACAC,GAAAA,KAAAA,EAAAA,OAAAA,EAAAA,UAEA,GAAAH,EAIA,IAAA,GAHAI,GAAAJ,EAAAK,iBAGAC,EAAA,EAAAA,EAAAF,EAAA34C,OAAA64C,IACAttC,KAAAutC,aAAAN,EAAAG,EAAAE,GAOA,KAAA,GAAAE,KAAAP,GAAA,CACA,GAAAQ,GAAAR,EAAAO,EACAL,GAAAA,OAAAA,YAAAA,EAAAA,UAAAA,IAAAA,EAAAA,MAAAA,EAAAA,YAAAA,WAAAA,EAAAA,OAAAA,EAAAA,EAAAA,SAAAA,EAAAA,OAAAA,UAKA,IAAA,GAAAO,KAAAT,GAAA,CACA,GAAAU,GAAAV,EAAAS,EACAP,GAAAA,GAAAA,EAAAA,OAAAA,EAAAA,UACAQ,EAAAC,WAEAT,EAAAA,OAAAA,EAAAA,UAAAA,EAAAA,OAAAA,EAAAA,UACAA,EAAAA,MAAAA,EAAAA,OAAAA,EAAAA,WAOA,IAAA,GAFAU,GAAA,OACAC,EAAA,EACAC,EAAA,EAAAA,EAAA/tC,KAAAipC,YAAAx0C,OAAAs5C,IAAA,CAGA/tC,KAAAipC,YAAA8E,GAAAC,OACA,IAAAC,GAAAjuC,KAAAipC,YAAA8E,GACAG,EAAA,CACA,IAAAD,EAAAv5C,OAAA4qB,GAAA2uB,EAAAE,YAAAF,EAAAv5C,OAAA2nB,EAEA6xB,GAAAA,MACA,CAAA,GAAA,MAAAD,EAAAv5C,KAGA;AAFAw5C,IAIA,GAAAD,EAAAtuB,KAAAtD,GAAA4xB,EAAAE,YAAAF,EAAAtuB,KAAAL,EAEA4uB,GAAAA,MACA,CAAA,GAAA,MAAAD,EAAAtuB,GAGA,QAFAuuB,KAIAA,EAAAJ,IACAA,EAAAA,EACAD,EAAAA,GAGAA,GACAA,EAAAA,OAAAA,MA5RArqC,IAAA,eAAAjO,MAAA,SAAA03C,EAAAmB,GAiSA,IAAA,GAFAC,GAAAruC,KACAsuC,EAAA73C,EAAA6F,QAAAgyC,eADAC,EAAA,SAAAxtC,GAGA,GAAAzD,GAAA8wC,EAAA1uB,SAAA3e,GAEAosC,GACA9pC,OAAAA,EAAAA,OACAgb,SAAAA,EAAAA,SACAmwB,UAAAA,EAAAA,OAAAA,YAAAA,EAAAA,UAAAA,SAAAA,EAAAA,OAAAA,YAAAA,EAAAA,UAAAA,IAEAj5C,MAAAA,EAAAA,MACAb,KAAAA,EAAAA,OAAAA,EAAAA,UACAirB,GAAAA,OACAiuB,SAAAA,EAAAA,UAGAa,EAAAH,EAAArB,EAAA,SAAAv0B,GAAA,MAAAA,GAAArV,SAAA8pC,EAAA9pC,QAAAqV,EAAA2F,WAAA8uB,EAAA9uB,UAIAowB,QACAxB,EAAAA,GAAAA,EAEAA,EAAAA,KAAAA,EAIA,IAAAyB,GAAAJ,EAAAD,EAAA1B,eAAA,SAAAj0B,GAAA,MAAAA,GAAArV,SAAA+qC,EAAA/qC,QAAAqV,EAAA2F,WAAA/gB,EAAA+gB,UAIAqwB,SAAAN,EAAAO,mBAGAD,QAAAN,EAAAO,oBACAN,EAAA1B,eAAA1pC,MACAI,OAAAA,EAAAA,OACAgb,SAAAA,EAAAA,SACA9oB,MAAAA,EAAAA,OAAAA,YAAAA,EAAAA,UAAAA,SAAAA,EAAAA,OAAAA,YAAAA,EAAAA,UAAAA,IAEAb,KAAAA,OACAirB,GAAAA,EAAAA,OAAAA,EAAAA,YARA0uB,EAAA1B,eAAAtoC,OAAAqqC,EAAA,IA/BA3tC,EAAA,EAAAA,EAAAqtC,EAAA1uB,SAAAjrB,OAAAsM,IAAAwtC,EAAAxtC,MAjSAyC,IAAA,qBAAAjO,MAAA,SAAA8mB,GA8UArc,KAAAg4B,IAAA4W,WAAAvyB,EAAA,UAAA,YA9UA7Y,IAAA,iBAAAjO,MAAA,SAAA8mB,GAiVArc,KAAAg4B,IAAA+R,SAAA1tB,EAAA,SAAA,aAjVA7Y,IAAA,cAAAjO,MAAA,WAoVAyK,KAAA8qB,sBApVAtnB,IAAA,cAAAjO,MAAA,SAAA8mB,GAuVArc,KAAAg4B,IAAAuG,KAAAliB,EAAA,KACArc,KAAA0e,sBAxVAlb,IAAA,cAAAjO,MAAA,SAAA8mB,GA2VArc,KAAAg4B,IAAAwG,IAAAniB,EAAA,KACArc,KAAA2e,sBA5VAnb,IAAA,mBAAAjO,MAAA,SAAA8mB,GA+VArc,KAAAg4B,IAAAnyB,MAAAwW,EAAAA,EAAA,KAAA,UA/VA7Y,IAAA,oBAAAjO,MAAA,SAAA8mB,GAkWArc,KAAAg4B,IAAAlyB,OAAAuW,EAAAA,EAAA,KAAA,UAlWA7Y,IAAA,kBAAAjO,MAAA,SAAA8mB,GAqWAA,GACArc,KAAA1B,IAAA64B,YACAn3B,KAAA1B,IAAA64B,WAAAoC,QAEAz3B,SAAAA,SAAAA,KACA9B,KAAAzG,SAAA8jB,YAAArd,MACA8B,SAAA+sC,WAAA7uC,OACA8B,SAAAA,qBAAAA,QAAAA,GAAAA,QACAA,SAAAA,SAAAA,EAAAA,OAAAA,cAAAA,KACA9B,KAAAzG,SAAA8jB,YAAA,SA9WA7Z,IAAA,kBAAAjO,MAAA,SAAAmjB,GAiXA,GAAAo2B,GAAA9uC,KACA+uC,EAAA,WACA,GAAAC,GAAAltC,SAAAmtC,gBAAAH,EAAAxwC,KAAAwD,SAAAmtC,gBAAAH,EAAAxwC,IAAA64B,UAEA2X,GAAAvV,QAAAyV,IACAF,EAAAvV,MAAAyV,GAGAt2B,GAAAA,iBAAAA,QAAAA,GACAA,EAAAA,iBAAAA,OAAAA,MA1XAlV,IAAA,mBAAAjO,MAAA,WAoYA,IAAA,GAPA25C,GAAAz4C,EAAAoF,eAAA,UAAA,MAAA,aACAszC,EAAA14C,EAAAoF,eAAA,UAAA,MAAA,YACAuzC,EAAA34C,EAAAoF,eAAA,UAAA,MAAA,SACAgvB,EAAA,UAAA7qB,KAAAypC,SAAA,cAAAzpC,KAAA0pC,MAAA,IACA/uC,EAAA,GACA00C,EAAA,cAEA96C,EAAA,EAAAA,EAAAyL,KAAA6qB,UAAAp2B,OAAAF,IAAA,CACA,GAAA6pB,GAAApe,KAAA6qB,UAAAt2B,EACA,IAAA6pB,YAAA+wB,GAAA,CACA,GAAAG,GAAAlxB,EAAAmxB,IACA1kB,IAAAA,aAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,MAAAA,WACAzM,aAAAgxB,GACAvkB,GAAAA,UAAAA,EAAAA,OAAAA,KAAAA,EAAAA,OAAAA,IACAzM,YAAA8wB,GACArkB,GAAAA,cAAAA,EAAAA,EAAAA,OAAAA,EAAAA,EAAAA,MACA,mBAAAzM,GAAAuM,cACA,WAAAvM,EAAAuM,gBACAhwB,GAAAA,EAAAA,UAAAA,IAAAA,EAAAA,WAAAA,MAEA,gBAAAyjB,KACAyM,GAAAA,GAGA,gBAAA7qB,MAAAspC,IACAze,GAAAA,sBAAAA,KAAAA,EAAAA,OAEA7qB,KAAA1B,IAAA+uB,MAAAxC,UAAAA,EACA7qB,KAAA1B,IAAA+uB,MAAAgiB,eAAAA,EACArvC,KAAA1B,IAAA+uB,MAAAmiB,gBAAA3kB,EACA7qB,KAAA1B,IAAA+uB,MAAAoiB,qBAAAJ,EACArvC,KAAA1B,IAAA+uB,MAAAqiB,YAAA7kB,EACA7qB,KAAA1B,IAAA+uB,MAAA1yB,OAAAA,EACAqF,KAAA1B,IAAA+uB,MAAAsiB,aAAAh1C,KA9ZA6I,IAAA,yBAAAjO,MAAA,WAiaAyK,KAAAysC,uBAjaAjpC,IAAA,oBAAAjO,MAAA,WA0aA,GAAAq6C,GAAA5vC,KAAA6D,SAAA7D,KAAA6D,QAAAilC,UAAA,CACA9oC,MAAA8oC,SAAA9oC,KAAA2pC,QAAAiG,EACA5vC,KAAAqY,OACArY,KAAAqY,KAAAgV,MAAAsc,QAAA3pC,KAAA8oC,aA7aAtlC,IAAA,0BAAAjO,MAAA,WAibAyK,KAAAuhC,wBACAvhC,KAAA6F,MAAA7F,KAAAq1B,cACAr1B,KAAAuhC,uBAAA,MAnbA/9B,IAAA,2BAAAjO,MAAA,WAubAyK,KAAAwhC,yBACAxhC,KAAA8F,OAAA9F,KAAAu1B,eACAv1B,KAAAwhC,wBAAA,MAzbAh+B,IAAA,mBAAAjO,MAAA,SAAA8mB,EAAAiD,EAAAnoB,GA6bA,GAAAs0C,GAAAzrC,KAAAyrC,SAAAzrC,IACA,KAAAA,KAAA6vC,mBAAA,CAGA7vC,KAAA6vC,oBAAA,CAEA,IAAAC,GAAAr5C,EAAAgO,OAAAoC,iBACAkpC,EAAAtE,EAAAuE,YAAAvE,EAAAwE,QACAC,EAAAzE,EAAA0E,aAAA1E,EAAAwE,QACAhI,EAAAjoC,KAAA6F,MACA04B,EAAAv+B,KAAAzJ,OAAAyJ,KAAAzJ,OAAAgoC,KAAA,CAGA,WAAApnC,IACA6I,KAAAuhC,uBAAA,EAKA,IAAA6O,KAEA,IAAAr3C,SAAA0yC,EAAA4E,KAAA,CACA,GAAAA,GAAA5E,EAAA4E,KACA/sC,EAAA+sC,EAAA1xC,WACA2E,GAAAA,KAAAA,QAAAA,QAAAA,KAAAA,KAAAA,iBAAAA,GACAA,EAAAA,MAAAA,QAAAA,QAAAA,KAAAA,KAAAA,iBAAAA,GACAA,EAAAA,MAAAA,QAAAA,QAAAA,KAAAA,KAAAA,iBAAAA,GAEAtD,KAAAuhC,uBAAA,EACA6O,EAAAA,MAAAA,EAAAA,MAAAA,EAAAA,EACAA,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EACAA,EAAAA,KAAAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,EAAAA,MAAAA,EACAA,EAAAA,kBAAAA,EAAAA,KAAAA,EAAAA,OAAAA,MACA,IAAAr3C,SAAA0yC,EAAA6E,SAAA,CACA,GAAA/G,GAAAkC,EAAA6E,SAAA3xC,YAAA4qC,gBACAA,GAAAA,QAAAA,QAAAA,KAAAA,KAAAA,iBAAAA,GAEA6G,EAAAA,iBAAAA,EAAAA,SAAAA,iBACAA,EAAAA,EAAAA,EAAAA,iBAAAA,EAAAA,EAAAA,EACAA,EAAAA,KAAAA,EAAAA,iBAAAA,EAAAA,EACAA,EAAAA,MAAAA,EAAAA,iBAAAA,EAAAA,MACA,IAAAr3C,SAAA0yC,EAAAlN,KACA6R,EAAAA,KAAAA,EAAAA,KAAAA,EACAr3C,SAAA0yC,EAAAnN,OACA8R,EAAAA,MAAAA,EAAAA,MAAAA,EACApwC,KAAAuhC,uBAAA,EACA6O,EAAAA,MAAAA,EAAAA,MAAAA,EAAAA,KACAA,EAAAA,EAAAA,EAAAA,KAAAA,EACAA,EAAAA,kBAAAA,EAAAA,MAAAA,EAAAA,MAAAA,GACAr3C,SAAA0yC,EAAAlC,kBACA6G,EAAAA,iBAAAA,EAAAA,iBACApwC,KAAAuhC,uBAAA,EACA6O,EAAAA,MAAAA,GAAAA,EAAAA,iBAAAA,EAAAA,MACAA,EAAAA,EAAAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,EAAAA,EAAAA,iBAAAA,EAAAA,OAEAA,EAAAA,EAAAA,EAAAA,KAAAA,EACAA,EAAAA,MAAAA,EAAAA,KAAAA,EACAA,EAAAA,iBAAAA,EAAAA,KAAAA,EAAAA,OAEA,IAAAr3C,SAAA0yC,EAAAnN,MACA8R,EAAAA,MAAAA,EAAAA,MAAAA,EACAr3C,SAAA0yC,EAAAlC,kBACA6G,EAAAA,iBAAAA,EAAAA,iBACApwC,KAAAuhC,uBAAA,EACA6O,EAAAA,MAAAA,GAAAA,EAAAA,MAAAA,EAAAA,kBACAA,EAAAA,EAAAA,EAAAA,EAAAA,iBAAAA,EAAAA,MAAAA,EACAA,EAAAA,KAAAA,EAAAA,EAAAA,iBAAAA,EAAAA,QAEAA,EAAAA,EAAAA,EAAAA,MAAAA,EAAAA,EACAA,EAAAA,KAAAA,EAAAA,MAAAA,EACAA,EAAAA,iBAAAA,EAAAA,MAAAA,EAAAA,OAEA,IAAAr3C,SAAA0yC,EAAAlC,iBACA6G,EAAAA,iBAAAA,EAAAA,iBACAA,EAAAA,EAAAA,EAAAA,iBAAAA,EAAAA,EAAAA,EACAA,EAAAA,KAAAA,EAAAA,iBAAAA,EAAAA,EACAA,EAAAA,MAAAA,EAAAA,iBAAAA,EAAAA,MACA,CACA,GAAApwC,KAAAzJ,OAAA,CACA,GAAAg6C,GAAAvwC,KAAAzJ,OAAAoI,YAAA4/B,IACAgS,GAAAA,QAAAA,QAAAA,KAAAA,KAAAA,iBAAAA,GAGAH,EAAAA,KAAAA,KAAAA,EAAAA,EACAA,EAAAA,MAAAA,EAAAA,KAAAA,EACAA,EAAAA,iBAAAA,EAAAA,KAAAA,EAAAA,EAGA,IAAA,GAAA5sC,KAAA4sC,GACApwC,KAAAwD,GAAA4sC,EAAA5sC,EAGAxD,MAAA6vC,oBAAA,EAEA7vC,KAAAzJ,QAAAyJ,KAAAwwC,oBAAAxwC,KAAAzJ,YA7hBAiN,IAAA,mBAAAjO,MAAA,SAAA8mB,EAAAiD,EAAAnoB,GAgiBA,GAAAs0C,GAAAzrC,KAAAyrC,SAAAzrC,IACA,KAAAA,KAAAywC,mBAAA,CAGAzwC,KAAAywC,oBAAA,CAEA,IAAAX,GAAAr5C,EAAAgO,OAAAoC,iBACA6pC,EAAAjF,EAAAkF,WAAAlF,EAAAwE,QACAW,EAAAnF,EAAAoF,cAAApF,EAAAwE,QACAxnC,EAAAzI,KAAA8F,OACA04B,EAAAx+B,KAAAzJ,OAAAyJ,KAAAzJ,OAAAioC,IAAA,CAGA,YAAArnC,IACA6I,KAAAwhC,wBAAA,EAKA,IAAA4O,KAEA,IAAAr3C,SAAA0yC,EAAA4E,KAAA,CACA,GAAAA,GAAA5E,EAAA4E,KACA/sC,EAAA+sC,EAAA1xC,WACA2E,GAAAA,IAAAA,QAAAA,QAAAA,KAAAA,KAAAA,iBAAAA,GACAA,EAAAA,OAAAA,QAAAA,QAAAA,KAAAA,KAAAA,iBAAAA,GACAA,EAAAA,OAAAA,QAAAA,QAAAA,KAAAA,KAAAA,iBAAAA,GAEAtD,KAAAwhC,wBAAA,EACA4O,EAAAA,OAAAA,EAAAA,OAAAA,EAAAA,EACAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EACAA,EAAAA,IAAAA,EAAAA,IAAAA,EACAA,EAAAA,OAAAA,EAAAA,OAAAA,EACAA,EAAAA,gBAAAA,EAAAA,IAAAA,EAAAA,QAAAA,MACA,IAAAr3C,SAAA0yC,EAAA6E,SAAA,CACA,GAAA9G,GAAAiC,EAAA6E,SAAA3xC,YAAA6qC,cACAA,GAAAA,QAAAA,QAAAA,KAAAA,KAAAA,iBAAAA,GAEA4G,EAAAA,eAAAA,EAAAA,SAAAA,eACAA,EAAAA,EAAAA,EAAAA,eAAAA,EAAAA,EAAAA,EACAA,EAAAA,IAAAA,EAAAA,eAAAA,EAAAA,EACAA,EAAAA,OAAAA,EAAAA,eAAAA,EAAAA,MACA,IAAAr3C,SAAA0yC,EAAAjN,IACA4R,EAAAA,IAAAA,EAAAA,IAAAA,EACAr3C,SAAA0yC,EAAAhN,QACA2R,EAAAA,OAAAA,EAAAA,OAAAA,EACApwC,KAAAwhC,wBAAA,EACA4O,EAAAA,OAAAA,EAAAA,OAAAA,EAAAA,IACAA,EAAAA,EAAAA,EAAAA,IAAAA,EACAA,EAAAA,gBAAAA,EAAAA,OAAAA,EAAAA,KAAAA,GACAr3C,UAAAq3C,EAAA5G,eAAAiC,EAAAjC,iBACAxpC,KAAAwhC,wBAAA,EACA4O,EAAAA,OAAAA,GAAAA,EAAAA,eAAAA,EAAAA,KACAA,EAAAA,EAAAA,EAAAA,IAAAA,EACAA,EAAAA,OAAAA,EAAAA,EAAAA,eAAAA,EAAAA,MAEAA,EAAAA,EAAAA,EAAAA,IAAAA,EACAA,EAAAA,OAAAA,EAAAA,IAAAA,EACAA,EAAAA,eAAAA,EAAAA,IAAAA,EAAAA,OAEA,IAAAr3C,SAAA0yC,EAAAhN,OACA2R,EAAAA,OAAAA,EAAAA,OAAAA,EACAr3C,UAAAq3C,EAAA5G,eAAAiC,EAAAjC,iBACAxpC,KAAAwhC,wBAAA,EACA4O,EAAAA,OAAAA,GAAAA,EAAAA,OAAAA,EAAAA,gBACAA,EAAAA,EAAAA,EAAAA,EAAAA,eAAAA,EAAAA,OAAAA,EACAA,EAAAA,IAAAA,EAAAA,EAAAA,eAAAA,EAAAA,SAEAA,EAAAA,EAAAA,EAAAA,OAAAA,EAAAA,EACAA,EAAAA,IAAAA,EAAAA,OAAAA,EACAA,EAAAA,eAAAA,EAAAA,OAAAA,EAAAA,OAEA,IAAAr3C,SAAA0yC,EAAAjC,eACA4G,EAAAA,eAAAA,EAAAA,eACAA,EAAAA,EAAAA,EAAAA,eAAAA,EAAAA,EAAAA,EACAA,EAAAA,IAAAA,EAAAA,eAAAA,EAAAA,EACAA,EAAAA,OAAAA,EAAAA,eAAAA,EAAAA,MACA,CACA,GAAApwC,KAAAzJ,OAAA,CACA,GAAAu6C,GAAA9wC,KAAAzJ,OAAAoI,YAAA6/B,GACAsS,GAAAA,QAAAA,QAAAA,KAAAA,KAAAA,iBAAAA,GAGAV,EAAAA,IAAAA,KAAAA,EAAAA,EACAA,EAAAA,OAAAA,EAAAA,IAAAA,EACAA,EAAAA,eAAAA,EAAAA,IAAAA,EAAAA,EAGA,IAAA,GAAA5sC,KAAA4sC,GACApwC,KAAAwD,GAAA4sC,EAAA5sC,EAGAxD,MAAAywC,oBAAA,EAEAzwC,KAAAzJ,QAAAyJ,KAAAwwC,oBAAAxwC,KAAAzJ,YA9nBAiN,IAAA,sBAAAjO,MAAA,SAAA2I,GAioBA,GAAAA,GAAAA,EAAAq4B,UAAA,IAAAr4B,EAAAq4B,SAAA9hC,OAAA,CAUA,IAAA,GAPA8hC,GAAAr4B,EAAAq4B,SAEAmJ,EAAA,EACAqR,EAAA,EACAC,EAAAza,EAAA9hC,OAAA,EAAA8hC,EAAA,GAAA6S,EAAA,EACA6H,EAAA1a,EAAA9hC,OAAA,EAAA8hC,EAAA,GAAA8S,EAAA,EAEA90C,EAAA,EAAAA,EAAAgiC,EAAA9hC,OAAAF,IAAA,CACA,GAAAorC,GAAApJ,EAAAhiC,EACAmrC,GAAAA,KAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OACAqR,EAAAA,KAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,SACAC,EAAAA,KAAAA,IAAAA,EAAAA,EAAAA,GACAC,EAAAA,KAAAA,IAAAA,EAAAA,EAAAA,GAGA/yC,EAAAA,aAAAA,EAAAA,EACAA,EAAAA,aAAAA,EAAAA,EACAA,EAAAA,aAAAA,MAAAA,EACAA,EAAAA,aAAAA,OAAAA,OAtpBA2rC,MCAApzC,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,cACAqB,SAAAA,KACAhB,UAAAA,kBAJA,WAMA,QAAA82C,GAAA96C,GAAAP,EAAAmK,KAAAkxC,GACAz6C,EAAAA,UAAAA,KAAAA,EAEA,IAAA8H,GAAA9H,EAAA8H,cACA,KAAA,GAAAhK,KAAA6B,GAAAE,OACA,MAAA/B,EAAA,IACAgK,EAAAA,UAAAA,KAAAA,EAGA9H,GAAAA,gBAAAA,EAAAA,OAAAA,KAAAA,KAAAA,KAAAA,UAfA,MAAAy6C,OCAAz6C,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,YACAqB,SAAAA,KACAhB,UAAAA,iBACAoB,YACAmpB,MAAAA,MACAwsB,OAAAA,QAEA51C,gBAAAA,UATA,WAWA,QAAA61C,GAAAh7C,GAAA,GAAAi7C,GAAArxC,IAAAnK,GAAAmK,KAAAoxC,GACA36C,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAAsxC,YAAA,EACAtxC,KAAAuxC,cAAA1wC,QAAAb,KAAAA,KAAAwxC,kBACAxxC,KAAAyxC,OAAA,GAAAh7C,GAAA8N,YACAvE,KAAAyxC,OAAAvI,KAAA,SAAA9kC,EAAAstC,GAAA,MAAAL,GAAAF,OAAA/sC,GAAAstC,IACA1xC,KAAAyxC,OAAAE,SAAA,WAAA,MAAAN,GAAAF,OAAA18C,QAlBA,MAAA0O,GAAAiuC,IAAA5tC,IAAA,mBAAAjO,MAAA,SAAA8mB,GAsBA,GADArc,KAAA2kB,MAAA3kB,KAAAmxC,OAAA18C,OACAuL,KAAAsxC,YAAAj1B,EAAA5nB,OAAA,EAAA,CACA,GAAAm9C,GAAAn7C,EAAAoF,eAAA,UAAA,MAAA,cAGAmE,MAAAsxC,YAAA,CACA,IAAA9sC,MACAqtC,EAAAx1B,EAAA,EACAw1B,aAAAD,KACAC,EAAAA,EAAAA,YAEA,KAAA,GAAAt9C,KAAAs9C,GACA,UAAAt9C,GACAiQ,EAAAA,KAAAA,EAGAxE,MAAAyxC,OAAAK,aAAAttC,OArCAhB,IAAA,SAAAjO,MAAA,SAAAs8C,GAyCA,GAAAztC,GAAApE,KAAAmxC,OAAA18C,OACAkJ,EAAA,CAEA,IAAAk0C,YAAAx9C,OACA,IAAA,GAAAmP,KAAAquC,GACA7xC,KAAAmxC,OAAAluC,KAAA4uC,EAAAruC,IACA7F,QAGAqC,MAAAmxC,OAAAluC,KAAA4uC,GACAl0C,EAAAA,CAGAqC,MAAAuxC,cAAAvxC,KAAAmxC,QACAnxC,KAAAyxC,OAAA7sC,aAAAR,EAAAA,EAAAzG,MAvDA6F,IAAA,QAAAjO,MAAA,WA0DAyK,KAAAmxC,OAAA18C,OAAA,EACAuL,KAAA2kB,MAAA,EACA3kB,KAAAyxC,OAAA1sC,gBA5DAvB,IAAA,MAAAjO,MAAA,SAAA6O,GA+DA,MAAApE,MAAAmxC,OAAA/sC,MA/DAZ,IAAA,SAAAjO,MAAA,SAAA6O,EAAAytC,GAkEA7xC,KAAAmxC,OAAA9sC,OAAAD,EAAA,EAAAytC,GACA7xC,KAAAuxC,cAAAvxC,KAAAmxC,QACAnxC,KAAAyxC,OAAA7sC,aAAAR,EAAAA,EAAA,MApEAZ,IAAA,OAAAjO,MAAA,SAAAb,EAAAirB,EAAAoyB,GAwEA,IAAA,GADAC,GAAAhyC,KAAAmxC,OAAA9sC,OAAA3P,EAAAq9C,GACAx9C,EAAA,EAAAA,EAAAy9C,EAAAv9C,OAAAF,IACAyL,KAAAmxC,OAAA9sC,OAAAsb,EAAAprB,EAAA,EAAAy9C,EAAAz9C,GAEAyL,MAAAyxC,OAAA5sC,UAAAnQ,EAAAA,EAAAq9C,EAAApyB,MA3EAnc,IAAA,SAAAjO,MAAA,SAAA6O,GA8EApE,KAAAmxC,OAAA9sC,OAAAD,EAAA,GACApE,KAAAyxC,OAAA3sC,YAAAV,EAAAA,EAAA,GACApE,KAAA2kB,MAAA3kB,KAAAmxC,OAAA18C,UAhFA+O,IAAA,MAAAjO,MAAA,SAAA6O,EAAAytC,GAmFA7xC,KAAAmxC,OAAA/sC,GAAAytC,EACA7xC,KAAAyxC,OAAA/sC,YAAAN,EAAAA,MApFAZ,IAAA,cAAAjO,MAAA,SAAA6O,EAAAia,EAAA9oB,GAuFAyK,KAAAmxC,OAAA/sC,GAAAia,GAAA9oB,EACAyK,KAAAyxC,OAAA/sC,YAAAN,EAAAA,OAxFAgtC,MCAA36C,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,WACAqB,SAAAA,KACAhB,UAAAA,WACAoB,YACAkgC,YAAAA,OACAkE,QAAAA,SAPA,WAUA,QAAAqS,GAAA77C,GAAAP,EAAAmK,KAAAiyC,GACAx7C,EAAAA,UAAAA,KAAAA,GACAuJ,KAAAg3B,aAAAn2B,QAAAb,KAAAA,KAAAkyC,eACAlyC,KAAAmyC,gBAAAtxC,QAAAb,KAAAA,KAAAkyC,eACAlyC,KAAAoyC,mBAAAvxC,QAAAb,KAAAA,KAAAkyC,eACAlyC,KAAAqyC,eAAAxxC,QAAAb,KAAAA,KAAAkyC,eACAlyC,KAAAsyC,kBAAAzxC,QAAAb,KAAAA,KAAAuyC,mBAhBA,MAAApvC,GAAA8uC,IAAAzuC,IAAA,YAAAjO,MAAA,WAmBA,MAAAyK,SAnBAwD,IAAA,oBAAAjO,MAAA,SAAAi9C,GAsBA,GAAAr0C,GAAA1H,EAAA0H,EACAq0C,GAAAA,IAAAA,MAAAA,SAAAA,UACAxyC,KAAA07B,cAAAv9B,EAAA2M,YACA0nC,EAAAA,IAAAA,MAAAA,QAAAA,eACAA,IAAAxyC,KAAAmxC,OAAA,KACAqB,EAAAA,IAAAA,MAAAA,eAAAA,KAAAA,QAAAA,QAGAA,EAAAA,IAAAA,MAAAA,QAAAA,QACAA,IAAAxyC,KAAAmxC,OAAA,KACAqB,EAAAA,IAAAA,MAAAA,cAAAA,KAAAA,QAAAA,UAhCAhvC,IAAA,gBAAAjO,MAAA,WAqCA,IAAA,GAAAhB,GAAA,EAAAA,EAAAyL,KAAAmxC,OAAA18C,SAAAF,EACAyL,KAAAuyC,kBAAAvyC,KAAAmxC,OAAA58C,QAtCA09C,MCAAx7C,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,SACAqB,SAAAA,KACAhB,UAAAA,OACAoB,YACAi3C,QAAAA,KAAAA,OAAAA,cAAAA,GACA9K,aAAAA,OACArqC,KAAAA,MACAuwB,SAAAA,OACAr0B,OAAAA,MACAk5C,gBAAAA,YACAx6C,QAAAA,KAAAA,OAAAA,aAAAA,IAEAoD,SACAq3C,YAfA,WAkBA,QAAAC,GAAAx8C,GAAAP,EAAAmK,KAAA4yC,GACAn8C,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAA6yC,WAAA,GAEA7yC,KAAA8yC,cAAAjyC,QAAAb,KAAAA,KAAA+yC,kBACA/yC,KAAAwqB,cAAA3pB,QAAAb,KAAAA,KAAAyqB,kBACAzqB,KAAAgzC,uBAAAnyC,QAAAb,KAAAA,KAAAizC,2BACAjzC,KAAAkhC,aAAArgC,QAAAb,KAAAA,KAAAkzC,iBACAlzC,KAAAmhC,cAAAtgC,QAAAb,KAAAA,KAAAkzC,iBA3BA,MAAA/vC,GAAAyvC,IAAApvC,IAAA,mBAAAjO,MAAA,WA8BA,MAAAyK,MAAAyyC,YAIAzyC,KAAAxG,OACAwG,KAAAyqB,iBAAAzqB,KAAAxG,QACAwG,KAAA0yC,iBACA1yC,KAAAizC,0BAAAjzC,KAAA0yC,sBANA1yC,MAAAmzC,aA/BA3vC,IAAA,mBAAAjO,MAAA,SAAA6lB,GA2CA,GAAApb,KAAAyyC,OAAA,CAGA,GAFAzyC,KAAAmzC,WAEA/3B,EAGA,MAFApb,MAAA0yC,gBAAA,UACA1yC,KAAA6yC,WAAAz3B,EAIA,IAAAha,GAAA3K,EAAAK,OAAAoS,cAAAkS,GACA7R,EAAA9S,EAAAoF,eAAA,QAAA,MAAA,aACAzF,GAAAE,OAAA8K,EAAA5K,QAAAwJ,KAAAzJ,OAAAyJ,MACAozC,EAAA,GAAA7pC,GAAAnT,EACAg9C,GAAAA,UAAAA,EAAAA,OAAAA,gBAAAA,EAAAA,OACAA,EAAAA,SAAAA,EAAAA,SACAA,EAAAA,MAAAA,EAAAA,MACA38C,EAAAA,OAAAA,YAAAA,EAAAA,SAAAA,EAAAA,UAAAA,EAAAA,gBAEA,IAAA48C,GAAArzC,KAAAszC,uBAAAF,EAAApzC,KACAA,MAAA0yC,gBAAAW,EACArzC,KAAA6yC,WAAAz3B,MA/DA5X,IAAA,4BAAAjO,MAAA,SAAA+jC,GAkEA,GAAAt5B,KAAAyyC,OAAA,CAGA,GAFAzyC,KAAAmzC,WAEA7Z,EAEA,YADAt5B,KAAA1C,KAAA,KAIA,IAAAiM,GAAA9S,EAAAoF,eAAA,QAAA,MAAA,aACAu3C,EAAA9Z,CACAA,aAAA/vB,KACA6pC,EAAAA,EAAAA,cAAAA,QAAAA,OAEAA,EAAAA,OAAAA,KACApzC,KAAA1C,KAAA81C,EACApzC,KAAAkzC,kBACAlzC,KAAA1C,MACA0C,KAAA2yC,aAnFAnvC,IAAA,YAAAjO,MAAA,SAAAqC,EAAAuC,GAuFA6F,KAAA6yC,WAAAj7C,EACAoI,KAAAsD,MAAAnJ,EACA6F,KAAAxG,OAAA5B,KAzFA4L,IAAA,UAAAjO,MAAA,WA4FAyK,KAAA1C,OACA0C,KAAA1C,KAAA6G,UACAnE,KAAA1C,KAAA/G,OAAAwC,OACAiH,KAAA1C,KAAAvE,WA/FAyK,IAAA,mBAAAjO,MAAA,SAAAoqC,GAkGAA,EAAAA,UAAAA,WAEA,KAAA,GADA3lB,GAAAvjB,EAAAoF,eAAA,QAAA,MAAA,YACAtH,EAAA,EAAAA,EAAAorC,EAAA77B,YAAArP,OAAAF,IACAorC,EAAA77B,YAAAvP,YAAAylB,IACAha,KAAAuzC,iBAAA5T,EAAA77B,YAAAvP,OAtGAiP,IAAA,yBAAAjO,MAAA,SAAA69C,EAAA78C,GA2GA,GAAAi9C,GAAAJ,EAAAzpC,aAAApT,EAQA,OAPA68C,GAAAA,kBACA38C,EAAAK,OAAA+S,iBAAApT,EAAAmT,kBAAAE,OAGArT,EAAAA,OAAAA,8BACAuJ,KAAAuzC,iBAAAC,IAEAA,KAnHAhwC,IAAA,kBAAAjO,MAAA,WAuHAyK,KAAA6F,MAEA7F,KAAA1C,OAEA0C,KAAA1C,KAAAuI,MAAA7F,KAAA6F,OAHA7F,KAAA6F,MAAA7F,KAAA1C,KAAA0C,KAAA1C,KAAAuI,MAAA,EAMA7F,KAAA8F,OAEA9F,KAAA1C,OAEA0C,KAAA1C,KAAAwI,OAAA9F,KAAA8F,QAHA9F,KAAA8F,OAAA9F,KAAA1C,KAAA0C,KAAA1C,KAAAwI,OAAA,MA/HA8sC,MCAAn8C,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,YACAqB,SAAAA,KACAhB,UAAAA,OACAoB,YACAi4C,iBAAAA,KAAAA,UAAAA,aAAAA,GACA7e,SAAAA,KAAAA,OAAAA,cAAAA,GACA8e,aAAAA,OACAC,OAAAA,OACAC,OAAAA,OACAvgB,QAAAA,OACAwgB,cAAAA,OACAC,gBAAAA,KAAAA,UAAAA,aAAAA,GACAC,YAAAA,QAEAz4C,SACAu5B,UAAAA,KAAAA,UAAAA,KAAAA,UACAmf,WACAC,UACA1lB,kBAAAA,KAAAA,UAAAA,KAAAA,YApBA,WAuBA,QAAA2lB,GAAA99C,GAAA,GAAA+9C,GAAAn0C,IAAAnK,GAAAmK,KAAAk0C,GACAz9C,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAA1B,IAAA+uB,MAAAyI,cAAA,MAKA91B,KAAA1B,IAAA+uB,MAAA+mB,gBAAA,QACAp0C,KAAA1B,IAAA+uB,MAAAsc,QAAA,EAEA3pC,KAAAq0C,mBAAAxzC,QAAAb,KAAAA,KAAAs0C,uBAEAt0C,KAAA1B,IAAAkvB,iBAAA,QAAA,SAAAv1B,GAAA,MAAAk8C,GAAAI,aAAAt8C,KACA+H,KAAA1B,IAAAkvB,iBAAA,cAAA,SAAAv1B,GAAA,MAAAk8C,GAAAI,aAAAt8C,IACA,IAAAu8C,GAAA,QAAAA,KACAL,EAAA9gB,SAAA,EACA8gB,EAAAL,eAAA,EACAhyC,SAAAA,oBAAAA,UAAAA,GAEA9B,MAAA1B,IAAAkvB,iBAAA,YAAA,SAAAv1B,GACA,GAAAk8C,EAAAvf,QAAA,CACA,GAAA6f,GAAAN,EAAAO,cAAAz8C,EACAk8C,GAAAR,OAAAc,EAAArL,EACA+K,EAAAP,OAAAa,EAAApL,EACA8K,EAAA9gB,SAAA,EACA8gB,EAAAL,eAAAW,EAAArf,OACAtzB,SAAAA,iBAAAA,UAAAA,MAEA9B,KAAA1B,IAAAkvB,iBAAA,YAAA,WACA2mB,EAAAN,eAAA,EACAM,EAAAH,YAEAh0C,KAAA1B,IAAAkvB,iBAAA,WAAA,WACA2mB,EAAAN,eAAA,EACAM,EAAAF,WAEAj0C,KAAA1B,IAAAkvB,iBAAA,YAAA,SAAAv1B,GACA,GAAAk8C,EAAAvf,UAAAuf,EAAAT,cAAAS,EAAA9gB,SAAA,CACA,GAAAohB,GAAAN,EAAAO,cAAAz8C,EACAk8C,GAAAR,OAAAc,EAAArL,EACA+K,EAAAP,OAAAa,EAAApL,EACA8K,EAAA5lB,gBAAAkmB,MAjEA,MAAAtxC,GAAA+wC,IAAA1wC,IAAA,wBAAAjO,MAAA,WAqEAyK,KAAA1B,IAAA+uB,MAAAsnB,OAAA30C,KAAA40C,uBArEApxC,IAAA,eAAAjO,MAAA,SAAA0C,GAwEA,GAAAw8C,GAAAz0C,KAAA00C,cAAAz8C,EAMA,OALA+H,MAAA40B,SAAA50B,KAAAyzC,gBAAAgB,EAAArf,QACAp1B,KAAA60B,QAAA4f,KAIAz0C,KAAAyzC,gBAAAh9C,EAAA0H,GAAAgM,gBA9EA3G,IAAA,gBAAAjO,MAAA,SAAA0C,GAiFA,GAAAkG,GAAA1H,EAAA0H,EACA,QACAyf,UAAAA,EACAwX,OAAAA,IAAAA,EAAAA,OAAAA,EAAAA,WAAAA,IAAAA,EAAAA,OAAAA,EAAAA,aAAAA,IAAAA,EAAAA,OAAAA,EAAAA,YAAAA,EAIAvQ,UAAAA,EAAAA,QAAAA,EAAAA,aAAAA,EAAAA,OAAAA,EAAAA,YAAAA,EAAAA,SAAAA,EAAAA,cAAAA,EAAAA,QAAAA,EAAAA,aAIAukB,EAAAA,EAAAA,SAAAA,EAAAA,OACAC,EAAAA,EAAAA,SAAAA,EAAAA,WA7FA7lC,IAAA,oBAAAjO,MAAA,WAmGA,GAAA4I,GAAA1H,EAAA0H,EACA,QAAA6B,KAAA+zC,aACA,IAAA51C,GAAAkY,YAAA,MAAA,SACA,KAAAlY,GAAAmY,cAAA,MAAA,UACA,KAAAnY,GAAAoY,YAAA,MAAA,WACA,KAAApY,GAAAqY,WAAA,MAAA,MACA,KAAArY,GAAAsY,YAAA,MAAA,MACA,KAAAtY,GAAAuY,cAAA,MAAA,WACA,KAAAvY,GAAAwY,cAAA,MAAA,WACA,KAAAxY,GAAAyY,gBAAA,MAAA,aACA,KAAAzY,GAAA0Y,gBAAA,MAAA,aACA,KAAA1Y,GAAA2Y,cAAA,MAAA,YACA,KAAA3Y,GAAA4Y,YAAA,MAAA,MACA,KAAA5Y,GAAA6Y,aAAA,MAAA,YACA,KAAA7Y,GAAA8Y,aAAA,MAAA,YACA,KAAA9Y,GAAA+Y,mBAAA,MAAA,SACA,KAAA/Y,GAAAgZ,gBAAA,MAAA,aACA,KAAAhZ,GAAAiZ,gBAAA,MAAA,MACA,KAAAjZ,GAAAkZ,WAAA,MAAA,UACA,KAAAlZ,GAAAmZ,eAAA,MAAA,MACA,KAAAnZ,GAAAoZ,iBAAA,MAAA,UACA,KAAApZ,GAAAqZ,eAAA,MAAA,MACA,KAAArZ,GAAAsZ,eAAA,MAAA,MACA,KAAAtZ,GAAAuZ,eAAA,MAAA,QAIA,MAAA,WA9HAw8B,MCAAz9C,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,kBACAqB,SAAAA,KACAhB,UAAAA,qBAJA,WAMA,QAAAy6C,GAAAz+C,GAAA,GAAA0+C,GAAA90C,IAAAnK,GAAAmK,KAAA60C,GACAp+C,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAA+0C,IAAA,EACA/0C,KAAAg1C,MAAA,EAEAv+C,EAAAA,OAAAA,WAAAA,WAAA,MAAAq+C,GAAAtgB,QAAApuB,MAAA0uC,EAAAt2C,aACAwB,KAAAs0B,eAAAzzB,QAAAb,KAAAA,KAAAu0B,mBAbA,MAAApxB,GAAA0xC,IAAArxC,IAAA,aAAAjO,MAAA,WAgBA,IAAA,GAAAhB,KAAAyL,MAAA0f,SAAA,CACA,GAAAu1B,GAAAj1C,KAAA0f,SAAAnrB,EACA44C,GAAAA,KAAAA,SAAAA,EAAAA,KAAAA,EAAAA,KAAAA,EAAAA,OAAAA,EAAAA,UAIAntC,KAAA+0C,IAAA,KAtBAvxC,IAAA,UAAAjO,MAAA,SAAAqkB,EAAAkE,GAyBA,IAAA9d,KAAA8Y,SAAA9Y,KAAAg1C,cAAAh1C,KAAA+sB,OAAA,CAQA,GAJA,IAAA/sB,KAAA+0C,KAAA,IAAA/0C,KAAAg1C,OAAAh1C,KAAA0f,SAAAjrB,QACAuL,KAAAk1C,eAEAl1C,KAAA+0C,KAAAj3B,EAAA9d,KAAAusB,SACAvsB,KAAA+0C,KAAA,EAEA,WADA/0C,MAAAo+B,UAGA,KAAA,GAAA7pC,KAAAyL,MAAA0f,SAAA,CACA,GAAAy1B,GAAAn1C,KAAA0f,SAAAnrB,GACAgB,EAAA4/C,EAAAzgD,MAAAygD,EAAAx1B,GAAAw1B,EAAAzgD,MAAAsL,KAAAo1C,OAAAC,kBAAAr1C,KAAA+0C,KAEA12B,EAAA82B,EAAA9xC,OAAA1E,YAAAw2C,EAAA92B,SACAA,GAAAA,IAAAA,EAAAA,EAAAA,YAAAA,sBA1CA7a,IAAA,oBAAAjO,MAAA,SAAA8mB,GA8CAA,GACArc,KAAAs1C,aACAt1C,KAAA+sB,QAAA,GACA/sB,KAAAw8B,gBAAAx8B,KAAA+0C,IAAA,EACA/0C,KAAAg1C,UAEAh1C,KAAAg1C,MAAA,EACAh1C,KAAA0f,gBArDAlc,IAAA,WAAAjO,MAAA,WAyDA,IAAA,GAAAhB,KAAAyL,MAAA0f,SAAA,CACA,GAAA61B,GAAAv1C,KAAA0f,SAAAnrB,GACA8pB,EAAAk3B,EAAAlyC,OAAA1E,YAAA42C,EAAAl3B,SACAA,GAAAA,IAAAA,EAAAA,GAAAA,EAAAA,YAAAA,iBAEAre,KAAAg1C,QACAh1C,KAAAg1C,QAAAh1C,KAAAy8B,MACAz8B,KAAA8Y,SAAA,EACA9Y,KAAA8Y,QAGA9Y,KAAAs1C,WAAAt1C,MAFAA,KAAA0f,gBAlEAm1B,MCAAp+C,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,oBACAqB,SAAAA,KACAhB,UAAAA,YACAiB,OACAkhC,WAAAA,SAAAA,KAAAA,WAEA/gC,YACAg6C,WAAAA,QAEAj6C,gBAAAA,cAXA,WAaA,QAAAk6C,GAAAr/C,GAAA,GAAAs/C,GAAA11C,IAAAnK,GAAAmK,KAAAy1C,GACAh/C,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAA21C,mBAAA,EAEA31C,KAAA41C,kBAAA/0C,QAAAb,KAAAA,KAAA61C,sBAEAp/C,EAAAA,OAAAA,eAAAA,WACAi/C,EAAA58B,UACAlkB,KAAAA,SAAAA,EACAA,KAAAA,WAEA6B,EAAAA,OAAAA,cAAAA,WAAA,MAAAi/C,GAAAjhB,SAzBA,MAAAtxB,GAAAsyC,IAAAjyC,IAAA,uBAAAjO,MAAA,WA6BA,IAAA,GADAu6C,GAAAr5C,EAAAgO,OAAAoC,iBACAtS,EAAA,EAAAA,EAAAyL,KAAAw1C,WAAA/gD,OAAAF,IAAA,CACA,GAAA2qB,GAAAlf,KAAAw1C,WAAAjhD,EACA2qB,GAAAA,eAAAA,QAAAA,KAAAA,KAAAA,mBAAAA,OA/BA1b,IAAA,qBAAAjO,MAAA,SAAA8mB,GAmCArc,KAAA21C,oBAAAt5B,EAAA,KACA,IAAArc,KAAA21C,qBACA31C,KAAA8Y,SAAA,MArCAtV,IAAA,QAAAjO,MAAA,WAyCA,IAAAyK,KAAA8Y,QAAA,CACA9Y,KAAA8Y,SAAA,CACA,KAAA,GAAAvkB,GAAA,EAAAA,EAAAyL,KAAAw1C,WAAA/gD,OAAAF,IACAyL,KAAAw1C,WAAAjhD,GAAAmnB,YA5CAlY,IAAA,OAAAjO,MAAA,WAgDA,GAAAyK,KAAA8Y,QAAA,CACA,IAAA,GAAAvkB,GAAA,EAAAA,EAAAyL,KAAAw1C,WAAA/gD,OAAAF,IACAyL,KAAAw1C,WAAAjhD,GAAAkgC,MAEAz0B,MAAA8Y,SAAA,MApDAtV,IAAA,WAAAjO,MAAA,WAuDAyK,KAAAy0B,WAvDAghB,MCAAh/C,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,aACAqB,SAAAA,KACAhB,UAAAA,OACAoB,YACAokC,QAAAA,QANA,WASA,QAAAkW,GAAA1/C,GAAAP,EAAAmK,KAAA81C,GACAr/C,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAAk5B,gBAAAr4B,QAAAb,KAAAA,KAAAm5B,oBACAn5B,KAAAqyC,eAAAxxC,QAAAb,KAAAA,KAAAghC,gBACAhhC,KAAAk5B,gBAAAr4B,QAAAb,KAAAA,KAAAghC,gBACAhhC,KAAAghC,iBAfA,MAAA79B,GAAA2yC,IAAAtyC,IAAA,qBAAAjO,MAAA,WAmBA,IAAA,GADAu6C,GAAAr5C,EAAAgO,OAAAoC,iBACAtS,EAAA,EAAAA,EAAAyL,KAAAu2B,SAAA9hC,OAAAF,IAAA,CACA,GAAAorC,GAAA3/B,KAAAu2B,SAAAhiC,EACAorC,GAAAA,aAAAA,QAAAA,KAAAA,KAAAA,eAAAA,GACAA,EAAAA,cAAAA,QAAAA,KAAAA,KAAAA,eAAAA,GACAA,EAAAA,eAAAA,QAAAA,KAAAA,KAAAA,eAAAA,QAvBAmW,MCAAr/C,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,oBACAqB,SAAAA,KACAhB,UAAAA,YACAoB,YACA+wB,UAAAA,KAAAA,MAAAA,aAAAA,KACA73B,KAAAA,OACAirB,GAAAA,OACAnkB,WAAAA,SACA6iB,SAAAA,SACAhb,OAAAA,WACA0yC,QAAAA,SAZA,WAeA,QAAAC,GAAA5/C,GAAAP,EAAAmK,KAAAg2C,GACAv/C,EAAAA,UAAAA,KAAAA,EAEA,IAAA8H,GAAA9H,EAAA8H,cACAyB,MAAAo1C,OAAA,GAAA3+C,GAAAmN,QAAA5D,MACAzB,EAAAA,OAAAA,KAAAA,OAAAA,QAAAA,aAAAA,KAAAA,OAAAA,SAEAA,EAAAA,OAAAA,KAAAA,OAAAA,aAAAA,aAAAA,IACAA,EAAAA,OAAAA,KAAAA,OAAAA,aAAAA,aAAAA,UACAA,EAAAA,OAAAA,KAAAA,OAAAA,UAAAA,aAAAA,KAEAyB,KAAAo1C,OAAAC,kBAAA,SAAAj3B,GACA,MAAA3nB,GAAAw/C,MAAAj2C,KAAAhG,KAAAgG,KAAAsjB,OAAAtjB,KAAAqjB,UAAArjB,KAAA2jB,UAAAvF,IAKApe,KAAAk2C,UACAl2C,KAAAm2C,YACAn2C,KAAA0f,YAEA1f,KAAA4wB,cAAA/vB,QAAAb,KAAAA,KAAAo2C,cACAp2C,KAAAq2C,eAAAx1C,QAAAb,KAAAA,KAAAo2C,cACAp2C,KAAA8wB,gBAAAjwB,QAAAb,KAAAA,KAAAs2C,iBACAt2C,KAAAu2C,kBAAA11C,QAAAb,KAAAA,KAAAs2C,iBAEAv9C,SAAA3C,EAAAE,OAAAmvB,MACAzlB,KAAAqe,SAAAjoB,EAAAE,OAAAmvB,IACAzlB,KAAAqD,OAAArD,KAAA6D,SA3CA,MAAAV,GAAA6yC,IAAAxyC,IAAA,eAAAjO,MAAA,WA+CAyK,KAAA0f,WACA,KAAA,GAAAnrB,GAAA,EAAAA,EAAAyL,KAAAm2C,SAAA1hD,OAAAF,IACA,IAAA,GAAAwM,KAAAf,MAAAk2C,OACAl2C,KAAA0f,SAAAzc,MACAI,OAAAA,KAAAA,SAAAA,GACAgb,SAAAA,KAAAA,OAAAA,GACA3pB,KAAAA,KAAAA,KACAirB,GAAAA,KAAAA,QAtDAnc,IAAA,kBAAAjO,MAAA,WA4DAyK,KAAAk2C,OAAAl2C,KAAAxE,WAAAvC,MAAA,IAGA,KAAA,GAAA1E,GAAA,EAAAA,EAAAyL,KAAAk2C,OAAAzhD,OAAAF,IAAA,CACA,GAAAiiD,GAAAx2C,KAAAk2C,OAAA3hD,GAAA6E,MAAA,MACAo9C,GACAx2C,KAAAk2C,OAAA3hD,GAAAiiD,EAAA,IAEAx2C,KAAAk2C,OAAA7xC,OAAA9P,EAAA,GACAA,KAIAyL,KAAAqe,UAAAre,KAAAk2C,OAAA39C,QAAAyH,KAAAqe,gBACAre,KAAAk2C,OAAAjzC,KAAAjD,KAAAqe,aA1EA7a,IAAA,eAAAjO,MAAA,WA8EAyK,KAAAm2C,SAAAn2C,KAAA+1C,QAAAv2C,QACAQ,KAAAqD,QAAArD,KAAAm2C,SAAA59C,QAAAyH,KAAAqD,cACArD,KAAAm2C,SAAAlzC,KAAAjD,KAAAqD,YAhFA2yC,MCAAv/C,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,kBACAqB,SAAAA,KACAhB,UAAAA,iBACAoB,YACA6H,OAAAA,WACAuqC,SAAAA,OACAe,oBAAAA,KAAAA,OAAAA,cAAAA,KARA,WAWA,QAAA8H,GAAArgD,GAAAP,EAAAmK,KAAAy2C,GACAhgD,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAA0f,YAdA,MAAAvc,GAAAszC,IAAAjzC,IAAA,iBAAAjO,MAAA,SAAA8oB,EAAA9oB,GAiBAyK,KAAA0f,SAAAzc,MAAAob,SAAAA,EAAA9oB,MAAAA,QAjBAkhD,MCAAhgD,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,YACAqB,SAAAA,KACAhB,UAAAA,OACAoB,YACA0pB,OAAAA,KAAAA,QAAAA,aAAAA,SACAgF,OAAAA,SAPA,WAUA,QAAAwsB,GAAAtgD,GAAAP,EAAAmK,KAAA02C,GACAjgD,EAAAA,UAAAA,KAAAA,EAEA,IAAA8H,GAAA9H,EAAA8H,cACAyB,MAAA25B,OAAA,GAAAljC,GAAAmN,QAAA5D,MACAzB,EAAAA,QAAAA,KAAAA,OAAAA,SAAAA,aAAAA,UACAA,EAAAA,MAAAA,KAAAA,OAAAA,SAAAA,aAAAA,IACAyB,KAAA22C,eAAA,CAEA,IAAAtZ,GAAAr9B,KAAAqY,KAAAvW,SAAAmZ,cAAA,MACAoiB,GAAAA,MAAAA,cAAAA,OACAA,EAAAA,MAAAA,SAAAA,WACAA,EAAAA,MAAAA,KAAAA,EAAAA,MAAAA,MAAAA,EAAAA,MAAAA,IAAAA,EAAAA,MAAAA,OAAAA,MACAA,EAAAA,MAAAA,YAAAA,MACAA,EAAAA,MAAAA,YAAAA,QACAA,EAAAA,MAAAA,YAAAA,QACAA,EAAAA,MAAAA,gBAAAA,QACAr9B,KAAA1B,IAAAivB,YAAA8P,GAEAr9B,KAAAm2B,aAAAt1B,QAAAb,KAAAA,KAAAo2B,iBACAp2B,KAAAsqB,cAAAzpB,QAAAb,KAAAA,KAAAuqB,kBACAvqB,KAAA25B,OAAAxD,aAAAt1B,QAAAb,KAAAA,KAAA42C,uBACA52C,KAAA25B,OAAAuH,aAAArgC,QAAAb,KAAAA,KAAA62C,uBACA72C,KAAAkhC,aAAArgC,QAAAb,KAAAA,KAAA09B,eACA19B,KAAAmhC,cAAAtgC,QAAAb,KAAAA,KAAA09B,eAlCA,MAAAv6B,GAAAuzC,IAAAlzC,IAAA,kBAAAjO,MAAA,SAAA8mB,GAqCArc,KAAAqY,KAAAgV,MAAA+mB,gBAAA,GAAA39C,GAAAwO,OAAAoX,MArCA7Y,IAAA,wBAAAjO,MAAA,SAAA8mB,GAwCArc,KAAA22C,eAAA,EACA32C,KAAAqY,KAAAgV,MAAAypB,YAAA,GAAArgD,GAAAwO,OAAAoX,GACArc,KAAA09B,mBA1CAl6B,IAAA,wBAAAjO,MAAA,WA6CAyK,KAAA22C,eAAA,EACA32C,KAAA09B,mBA9CAl6B,IAAA,mBAAAjO,MAAA,SAAA8mB,GAiDArc,KAAAqY,KAAAgV,MAAA0pB,aAAA16B,EAAA,QAjDA7Y,IAAA,gBAAAjO,MAAA,WAoDA,GAAAokC,GAAA35B,KAAA22C,cAAAvxC,KAAA4xC,IAAA,EAAAh3C,KAAA25B,OAAA9zB,OAAA,EACAwnB,EAAArtB,KAAAqY,KAAAgV,KACA,GAAAsM,EAAA35B,KAAA6F,OAAA,EAAA8zB,EAAA35B,KAAA8F,QAEAunB,EAAAA,YAAAA,MACAA,EAAAA,eAAAA,KAAAA,OAAAA,MAEAA,EAAAA,YAAAA,EAAAA,SA3DAqpB,MCAAjgD,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,kBACAqB,SAAAA,KACAhB,UAAAA,OACAoB,YACA+kC,OAAAA,QANA,WASA,QAAA0W,GAAA7gD,GAAAP,EAAAmK,KAAAi3C,GACAxgD,EAAAA,UAAAA,KAAAA,GAVA,MAAA0M,GAAA8zC,IAAAzzC,IAAA,WAAAjO,MAAA,SAAAkrB,GAaA,OAAAzgB,KAAAugC,QACAvgC,KAAAugC,OAAAvkC,KAAAykB,OAdAw2B,MCAAxgD,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,WACAqB,SAAAA,KACAhB,UAAAA,OACAoB,YACA07C,SAAAA,YACAtgB,OAAAA,KAAAA,UAAAA,aAAAA,GACAjS,MAAAA,OAEArpB,SACAg3C,sBAEA/2C,gBAAAA,YAbA,WAeA,QAAA47C,GAAA/gD,GAAAP,EAAAmK,KAAAm3C,GACA1gD,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAAzJ,OAAAH,EAAAG,OAIAyJ,KAAAo3C,YAAA,EACAp3C,KAAAmxC,UAEAnxC,KAAAg3B,aAAAn2B,QAAAb,KAAAA,KAAAi3B,iBACAj3B,KAAAmyC,gBAAAtxC,QAAAb,KAAAA,KAAAq3C,oBACAr3C,KAAAmqC,cAAAtpC,QAAAb,KAAAA,KAAAs3C,kBA3BA,MAAAn0C,GAAAg0C,IAAA3zC,IAAA,YAAAjO,MAAA,WA8BA,MAAAyK,MAAAzJ,UA9BAiN,IAAA,SAAAjO,MAAA,SAAA6O,GAiCA,MAAApE,MAAAmxC,OAAA/sC,MAjCAZ,IAAA,kBAAAjO,MAAA,WAoCAyK,KAAAu3C,iBApCA/zC,IAAA,qBAAAjO,MAAA,WAuCAyK,KAAAu3C,iBAvCA/zC,IAAA,mBAAAjO,MAAA,WA0CAyK,KAAAu3C,iBA1CA/zC,IAAA,YAAAjO,MAAA,WA6CA,GAAAiiD,GAAA/gD,EAAAoF,eAAA,UAAA,MAAA,YACA,OAAAmE,MAAA42B,gBAAA4gB,GAAAx3C,KAAA42B,MAAA6a,OAAAzxC,KAAA42B,SA9CApzB,IAAA,cAAAjO,MAAA,WAmDA,GAAAyK,KAAAk3C,UAAAl3C,KAAAzJ,OAAA,CAGA,GAAAqgC,GAAA52B,KAAAy3C,WACA,IAAA7gB,YAAAngC,GAAA8N,YAAA,CACA,GAAAurC,GAAAr5C,EAAAgO,OAAAoC,gBACA+vB,GAAAA,YAAAA,QAAAA,KAAAA,KAAAA,qBAAAA,GACAA,EAAAA,aAAAA,QAAAA,KAAAA,KAAAA,iBAAAA,GACAA,EAAAA,UAAAA,QAAAA,KAAAA,KAAAA,cAAAA,GACAA,EAAAA,YAAAA,QAAAA,KAAAA,KAAAA,gBAAAA,GACAA,EAAAA,WAAAA,QAAAA,KAAAA,KAAAA,eAAAA,GAEA52B,KAAA03C,gBAAA,EAAA13C,KAAAmxC,OAAA18C,QACAuL,KAAA23C,gBAAA,EAAA/gB,EAAA+a,gBACA,gBAAA/a,GACA52B,KAAAmxC,OAAA18C,OAAAmiC,EAEA52B,KAAA03C,gBAAA9gB,EAAA52B,KAAAmxC,OAAA18C,QAGAuL,KAAA23C,gBAAA33C,KAAAmxC,OAAA18C,OAAAmiC,GAEAA,YAAAviC,SACA2L,KAAA03C,gBAAA,EAAA13C,KAAAmxC,OAAA18C,QACAuL,KAAA23C,gBAAA,EAAA/gB,EAAAniC,QAEAuL,MAAA2kB,MAAA3kB,KAAAmxC,OAAA18C,WA7EA+O,IAAA,mBAAAjO,MAAA,SAAAoqC,GAgFAA,EAAAA,UAAAA,WAEA,KAAA,GADA3lB,GAAAvjB,EAAAoF,eAAA,QAAA,MAAA,YACAtH,EAAA,EAAAA,EAAAorC,EAAA77B,YAAArP,OAAAF,IACAorC,EAAA77B,YAAAvP,YAAAylB,IACAha,KAAAuzC,iBAAA5T,EAAA77B,YAAAvP,OApFAiP,IAAA,uBAAAjO,MAAA,SAAAqiD,EAAAC,EAAAC,GA2FA,IAAA,GAFAlhB,GAAA52B,KAAAy3C,YACAjzC,EAAAszC,GAAAlhB,EAAApyB,UACAJ,EAAAwzC,EAAAxzC,GAAAyzC,EAAAzzC,IAAA,CACA,GAAA2zC,GAAA/3C,KAAAmxC,OAAA/sC,EACA,KAAA,GAAA7P,KAAAiQ,GACAlH,EAAAA,YAAAA,EAAAA,IAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAAA,IAAAA,EAAAA,YAAAA,WAAAA,EAAAA,KAAAA,MAAAA,cA9FAkG,IAAA,mBAAAjO,MAAA,SAAAqiD,EAAAC,GAwGA73C,KAAA23C,gBAAAC,EAAAC,GACA73C,KAAA2kB,MAAA3kB,KAAAmxC,OAAA18C,UAzGA+O,IAAA,gBAAAjO,MAAA,SAAAyiD,EAAAC,EAAAC,GAgHA,IAAA,GAJAlG,GAAAhyC,KAAAmxC,OAAA9sC,OAAA2zC,EAAAC,EAAAD,GAIAzjD,EAAA,EAAAA,EAAAy9C,EAAAv9C,OAAAF,IACAyL,KAAAmxC,OAAA9sC,OAAA6zC,EAAA3jD,EAAA,EAAAy9C,EAAAz9C,GAKA,KAAA,GAHA4jD,GAAAH,EAAAE,EAAAF,EAAAE,EAGAE,EAAAD,EAAAC,EAAAp4C,KAAAmxC,OAAA18C,OAAA2jD,IACAp4C,KAAAmxC,OAAAiH,GAAAh0C,MAAAg0C,KAvHA50C,IAAA,kBAAAjO,MAAA,SAAAqiD,EAAAC,GA2HA73C,KAAA03C,gBAAAE,EAAAC,EACA,KAAA,GAAAtjD,GAAAqjD,EAAArjD,EAAAyL,KAAAmxC,OAAA18C,OAAAF,IACAyL,KAAAmxC,OAAA58C,GAAA6P,MAAA7P,CAEAyL,MAAA2kB,MAAA3kB,KAAAmxC,OAAA18C,UA/HA+O,IAAA,iBAAAjO,MAAA,WAkIAyK,KAAAu3C,iBAlIA/zC,IAAA,kBAAAjO,MAAA,SAAAqiD,EAAAC,GAqIA,GAAAA,GAAA,EAEA,YADA73C,KAAA2kB,MAAA,EAIA,IAAA/a,GAAAnT,EAAAmT,kBACArL,EAAA9H,EAAA8H,eACAq4B,EAAA52B,KAAAy3C,YACArzC,EAAA,MACA,KAAAA,EAAAwzC,EAAAxzC,EAAAyzC,EAAAzzC,IAAA,CACA,GAAAk1B,GAAAt5B,KAAAk3C,SAAA17B,cAAAxb,KAAAzJ,OAMA,IALAgI,EAAAA,MAAAA,EAAAA,SAAAA,aAAAA,IAGAyB,KAAAk3C,SAAA5lB,kBAEA,gBAAAsF,IAAAA,YAAAviC,OAAA,CACA,mBAAAilC,GAAA36B,YAAA05C,WACA95C,EAAAA,UAAAA,EAAAA,YAEA,IAAAhJ,GAAAqhC,YAAAviC,OAAAuiC,EAAAxyB,GAAA,gBAAAwyB,GAAAxyB,EAAA,WAGAk1B,GAAAA,YAAAA,UAAAA,IAAAA,EAAAA,EAAAA,YAAAA,WAAAA,EAAAA,EAAAA,cAGA,KAAA,GAAA/kC,GAAA,EAAAA,EAAAqiC,EAAApyB,UAAA/P,OAAAF,IAAA,CACA,GAAA+jD,GAAA1hB,EAAApyB,UAAAjQ,EACA,oBAAA+kC,GAAA36B,YAAA25C,IACA/5C,EAAAA,UAAAA,EAAAA,GAEA+6B,EAAAA,YAAAA,GAAAA,IAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAAA,YAAAA,WAAAA,EAAAA,KAAAA,MAAAA,UAOAt5B,KAAAmxC,OAAA9sC,OAAAD,EAAA,EAAAk1B,GAKAA,EAAAA,OAAAA,KAAAA,OAIA7iC,EAAAK,OAAA+S,iBAAAD,EAAAE,MAAArT,EAAAK,OAAA+S,iBAAAD,EAAAG,MAIA/J,KAAAuzC,iBAAAja,GAGA7iC,EAAAK,OAAA+S,iBAAAD,EAAAE,MAGArT,EAAAA,OAAAA,8BAGA2N,EAAA,GACApE,KAAAu4C,YAAArf,iBAGA,KAAA,GAAAsf,GAAAX,EAAAW,EAAAx4C,KAAAmxC,OAAA18C,OAAA+jD,IACAx4C,KAAAmxC,OAAAqH,GAAAp0C,MAAAo0C,KAtMAh1C,IAAA,kBAAAjO,MAAA,SAAAqiD,EAAAC,GA0MA,GAAAY,GAAAz4C,KAAAmxC,OAAA9sC,OAAAuzC,EAAAC,EAAAD,EACA,KAAA,GAAAxzC,KAAAq0C,GACAA,EAAAA,GAAAA,UACAz4C,KAAA04C,uBAAAD,EAAAr0C,OA7MAZ,IAAA,yBAAAjO,MAAA,SAAAoqC,GAiNA,GAAArkC,GAAA7E,EAAAK,OAAAoiB,gBACA5d,GAAAA,OAAAA,EAAAA,QAAAA,EAAAA,UAAAA,WAAAA,EACA,KAAA,GAAA/G,GAAA,EAAAA,EAAAorC,EAAApJ,SAAA9hC,OAAAF,IACAyL,KAAA04C,uBAAA/Y,EAAApJ,SAAAhiC,QApNA4iD,MCAA1gD,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,WACAqB,SAAAA,KACAhB,UAAAA,iBACAoB,YACAm9C,MAAAA,SANA,WASA,QAAAC,GAAAxiD,GAAAP,EAAAmK,KAAA44C,GACAniD,EAAAA,UAAAA,KAAAA,EAEA,IAAA8H,GAAA9H,EAAA8H,cAEAyB,MAAAuvC,KAAA,GAAA94C,GAAAmN,QAAA5D,MACAzB,EAAAA,OAAAA,KAAAA,KAAAA,KACAA,EAAAA,OAAAA,KAAAA,KAAAA,KACAA,EAAAA,OAAAA,KAAAA,KAAAA,KAAAA,aAAAA,IAEAyB,KAAA64C,OAAA,GAAApiD,GAAAmN,QAAA5D,MACAzB,EAAAA,OAAAA,KAAAA,OAAAA,KACAA,EAAAA,OAAAA,KAAAA,OAAAA,KAEAyB,KAAA84C,aAAAj4C,QAAAb,KAAA6D,QAAA7D,KAAA6D,QAAAinB,kBACA9qB,KAAAuvC,KAAAzE,SAAAjqC,QAAAb,KAAA6D,QAAA7D,KAAA6D,QAAAinB,kBACA9qB,KAAAuvC,KAAAvE,SAAAnqC,QAAAb,KAAA6D,QAAA7D,KAAA6D,QAAAinB,kBACA9qB,KAAAuvC,KAAA3E,SAAA/pC,QAAAb,KAAA6D,QAAA7D,KAAA6D,QAAAinB,kBACA9qB,KAAA64C,OAAA/N,SAAAjqC,QAAAb,KAAAA,KAAA+4C,eACA/4C,KAAA64C,OAAA7N,SAAAnqC,QAAAb,KAAAA,KAAA+4C,eACA/4C,KAAA6D,QAAAinB,mBA7BA,MAAA3nB,GAAAy1C,IAAAp1C,IAAA,gBAAAjO,MAAA,WAgCA,GAAA83B,GAAArtB,KAAA6D,QAAAvF,IAAA+uB,KACAA,GAAAA,gBAAAA,KAAAA,OAAAA,EAAAA,MAAAA,KAAAA,OAAAA,EAAAA,KACAA,EAAAA,sBAAAA,KAAAA,OAAAA,EAAAA,MAAAA,KAAAA,OAAAA,EAAAA,SAlCAurB,MCAAniD,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,MACAqB,SAAAA,KACAhB,UAAAA,aACAoB,YACAqlC,gBAAAA,SANA,WASA,QAAAmY,GAAA5iD,GAAAP,EAAAmK,KAAAg5C,GACAviD,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAAihC,uBAAApgC,QAAAb,KAAAA,KAAAghC,gBACAhhC,KAAAghC,iBAbA,MAAA79B,GAAA61C,IAAAx1C,IAAA,iBAAAjO,MAAA,WAsBA,IANA,GAAAkqC,GAAA,EACAsR,EAAA,EAEAx8C,EAAA,IAAAyL,KAAA6gC,gBAAA7gC,KAAAu2B,SAAA9hC,OAAA,EAAA,EACAqyC,EAAA,IAAA9mC,KAAA6gC,mBAAA7gC,KAAAu2B,SAAA9hC,OACAmyC,EAAA,IAAA5mC,KAAA6gC,mBAAA,EACAtsC,IAAAuyC,EAAAvyC,GAAAqyC,EAAA,CACA,GAAAjH,GAAA3/B,KAAAu2B,SAAAhiC,EACAorC,GAAAjG,SAAAiG,EAAA95B,OAAA85B,EAAA75B,SAGAirC,EAAAA,EAAAA,OAAAA,EAAAA,EAAAA,OAAAA,EAEApR,EAAAA,EAAAA,EACAF,GAAAA,EAAAA,MAAAA,KAAAA,SAEAz/B,KAAAu1B,eAAAwb,EAEA/wC,KAAAq1B,cAAAoK,EAAAz/B,KAAA4/B,YAlCAoZ,MCAAviD,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,QACAqB,SAAAA,KACAhB,UAAAA,iBACAoB,YACAy9C,OAAAA,OACAC,OAAAA,SAPA,WAUA,QAAAC,GAAA/iD,GAAAP,EAAAmK,KAAAm5C,GACA1iD,EAAAA,UAAAA,KAAAA,EAEA,IAAA8H,GAAA9H,EAAA8H,cACAyB,MAAA64C,OAAA,GAAApiD,GAAAmN,QAAA5D,MACAzB,EAAAA,OAAAA,KAAAA,OAAAA,KACAA,EAAAA,OAAAA,KAAAA,OAAAA,KAEAyB,KAAAo5C,cAAAv4C,QAAAb,KAAA6D,QAAA7D,KAAA6D,QAAAinB,kBACA9qB,KAAAq5C,cAAAx4C,QAAAb,KAAA6D,QAAA7D,KAAA6D,QAAAinB,kBACA9qB,KAAA64C,OAAA/N,SAAAjqC,QAAAb,KAAAA,KAAA+4C,eACA/4C,KAAA64C,OAAA7N,SAAAnqC,QAAAb,KAAAA,KAAA+4C,eAIA/4C,KAAA+4C,gBAzBA,MAAA51C,GAAAg2C,IAAA31C,IAAA,gBAAAjO,MAAA,WA4BA,GAAA83B,GAAArtB,KAAA6D,QAAAvF,IAAA+uB,KACAA,GAAAA,gBAAAA,KAAAA,OAAAA,EAAAA,MAAAA,KAAAA,OAAAA,EAAAA,KACAA,EAAAA,sBAAAA,KAAAA,OAAAA,EAAAA,MAAAA,KAAAA,OAAAA,EAAAA,SA9BA8rB,MCAA1iD,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,sBACAqB,SAAAA,KACAhB,UAAAA,YACAoB,YACAg6C,WAAAA,QAEAj6C,gBAAAA,cARA,WAUA,QAAA+9C,GAAAljD,GAAA,GAAAmjD,GAAAv5C,IAAAnK,GAAAmK,KAAAs5C,GACA7iD,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAA41C,kBAAA/0C,QAAAb,KAAAA,KAAAw5C,qBAEA/iD,EAAAA,OAAAA,eAAAA,WACA8iD,EAAAzgC,UACAygC,EAAAzgC,SAAA,EACAygC,EAAA79B,WAEAjlB,EAAAA,OAAAA,cAAAA,WAAA,MAAA7B,MAAA6/B,SApBA,MAAAtxB,GAAAm2C,IAAA91C,IAAA,sBAAAjO,MAAA,WAwBA,IAAA,GADAu6C,GAAAr5C,EAAAgO,OAAAoC,iBACAtS,EAAA,EAAAA,EAAAyL,KAAAw1C,WAAA/gD,OAAAF,IAAA,CACA,GAAA2qB,GAAAlf,KAAAw1C,WAAAjhD,EACA2qB,GAAAA,eAAAA,QAAAA,KAAAA,KAAAA,eAAAA,OA1BA1b,IAAA,iBAAAjO,MAAA,SAAAkkD,GA8BA,GAAAz5C,KAAA8Y,UAAA2gC,EAEA,GADAz5C,KAAA05C,YACA15C,KAAA05C,UAAA15C,KAAAw1C,WAAA/gD,OAAA,CACA,GAAAklD,GAAA35C,KAAAw1C,WAAAx1C,KAAA05C,UACAvhD,SAAAA,IAAAA,gBAAAA,KAAAA,KAAAA,UAAAA,GACAwhD,EAAAA,YAEA35C,MAAA45C,eACA55C,KAAA45C,cAAA55C,KAAAy8B,MACAz8B,KAAAo+B,YAEAp+B,KAAA05C,aACA15C,KAAA65C,qBA1CAr2C,IAAA,QAAAjO,MAAA,WAgDAyK,KAAA8Y,UACA9Y,KAAA8Y,SAAA,EACA9Y,KAAA05C,aACA15C,KAAA45C,aAAA,EACA55C,KAAA65C,qBApDAr2C,IAAA,OAAAjO,MAAA,WAuDAyK,KAAA8Y,UACA9Y,KAAA8Y,SAAA,EACA9Y,KAAA05C,UAAA15C,KAAAw1C,WAAA/gD,QACAuL,KAAAw1C,WAAAx1C,KAAA05C,WAAAjlB,WA1DAjxB,IAAA,WAAAjO,MAAA,WA8DAyK,KAAA8Y,UACA9Y,KAAA05C,UAAA15C,KAAAw1C,WAAA/gD,QAEAuL,KAAAw1C,WAAAx1C,KAAA05C,WAAAjlB,OAEAz0B,KAAA8Y,SAAA,OAnEAwgC,MCAA7iD,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,QACAqB,SAAAA,KACAhB,UAAAA,iBACAoB,YACAzB,KAAAA,SACAqzC,QAAAA,OACA0M,OAAAA,SACAvpB,KAAAA,QAEAh1B,gBAAAA,WAXA,WAaA,QAAAw+C,GAAA3jD,GAAAP,EAAAmK,KAAA+5C,GACAtjD,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAAwyC,MAAAxyC,KAAA6D,QAEA7D,KAAA+wB,YAAAlwB,QAAAb,KAAAA,KAAAg6C,gBAlBA,MAAA72C,GAAA42C,IAAAv2C,IAAA,iBAAAjO,MAAA,WAoBA,GAAA0kD,GAAAj6C,IACA,IAAAA,KAAA85C,OAAA,CAIA,GAAA9Q,GAAAhpC,KAAAwyC,MAAAxJ,OACAkR,EAAAlR,EAAAruC,OAAA,SAAAouC,GAAA,MAAAA,GAAAhvC,OAAAkgD,EAAAH,SAAA;AACA,GAAAI,EACA,MAAAA,GAAA7M,iBAAA1lC,OAAA3H,KAAAotC,QAEAj1C,SAAAA,MAAAA,mCAEA,MAAA6H,MAAAotC,WAhCA5pC,IAAA,iBAAAjO,MAAA,SAAA8mB,GAmCAA,EACArc,KAAAwyC,MAAAzJ,MAAA/oC,KAAAjG,KACAiG,KAAAwyC,MAAAzJ,QAAA/oC,KAAAjG,OACAiG,KAAAwyC,MAAAzJ,MAAA,QAtCAgR,KCAA,IAAAI,MAIApgD,KAAA,MAAAqgD,OAAA,cAGAC,KAEA5jD,GAAAA,iBACA0E,OAAAA,UACApB,KAAAA,gBACAqB,SAAAA,KACAhB,UAAAA,iBACAiB,OACAi/C,eACAC,OAAAA,SAAAA,SAAAA,WAAAA,SAAAA,aAGA/+C,YACAg/C,eAAAA,KAAAA,QAAAA,UAAAA,GACAN,MAAAA,KAAAA,QAAAA,UAAAA,GACA9kB,QAAAA,KAAAA,QAAAA,UAAAA,GACAqlB,YAAAA,KAAAA,QAAAA,UAAAA,GACAC,MAAAA,KAAAA,QAAAA,UAAAA,GACAjhB,WAAAA,KAAAA,QAAAA,UAAAA,GACAkhB,iBAAAA,KAAAA,QAAAA,UAAAA,GACAC,OAAAA,KAAAA,QAAAA,UAAAA,GACAC,KAAAA,KAAAA,QAAAA,UAAAA,GACAC,UAAAA,KAAAA,QAAAA,UAAAA,GACAC,QAAAA,KAAAA,QAAAA,UAAAA,GACAj2B,MAAAA,KAAAA,QAAAA,UAAAA,GACA9b,QAAAA,KAAAA,QAAAA,UAAAA,GACAgyC,YAAAA,KAAAA,QAAAA,UAAAA,GAEAC,WAAAA,SA1BA,WA6BA,QAAAC,GAAA9kD,GAAAP,EAAAmK,KAAAk7C,GACAzkD,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAAm7C,kBAAAt6C,QAAAb,KAAAA,KAAAo7C,sBAEAp7C,KAAAq7C,UAAA,KAEA,KAAA,GAAA9mD,GAAA,EAAAA,EAAA4lD,GAAA1lD,SAAAF,EACA,GAAA4lD,GAAA5lD,GAAA6lD,OAAAp+C,KAAA2vB,UAAA2vB,WAAA,CACAt7C,KAAAq7C,UAAAlB,GAAA5lD,GAAAwF,IACA,QAvCA,MAAAoJ,GAAA+3C,IAAA13C,IAAA,uBAAAjO,MAAA,SAAA8mB,GA2CA,GAAAk/B,GAAAv7C,KACAw7C,EAAAnB,GAAAr6C,KAAAq7C,WAAAh/B,EACArc,MAAAnB,4BAAA,EACAzJ,OAAAA,KAAAA,GAAAA,QAAAA,SAAAA,GACAmmD,EAAA/3C,GAAAg4C,EAAAh4C,WAEAxD,MAAAnB,+BAjDAq8C,MAqDAb,GAAAA,KACA5H,QACA+H,cAAAA,UACAN,KAAAA,UACA9kB,OAAAA,UACAqlB,WAAAA,UACAC,KAAAA,UACAjhB,UAAAA,UACAgiB,cAAAA,UACAb,MAAAA,UACAC,IAAAA,UACAC,SAAAA,UACAC,OAAAA,UACAj2B,KAAAA,UACA9b,OAAAA,UACAgyC,WAAAA,WAEAU,UACAlB,cAAAA,UACAN,KAAAA,UACA9kB,OAAAA,UACAqlB,WAAAA,UACAC,KAAAA,UACAjhB,UAAAA,UACAgiB,cAAAA,UACAb,MAAAA,UACAC,IAAAA,UACAC,SAAAA,UACAC,OAAAA,UACAj2B,KAAAA,UACA9b,OAAAA,UACAgyC,WAAAA,WAEAtlB,UACA8kB,cAAAA,UACAN,KAAAA,UACA9kB,OAAAA,UACAqlB,WAAAA,UACAC,KAAAA,UACAjhB,UAAAA,UACAgiB,cAAAA,UACAb,MAAAA,UACAC,IAAAA,UACAC,SAAAA,UACAC,OAAAA,UACAj2B,KAAAA,UACA9b,OAAAA,UACAgyC,WAAAA,YAIAvkD,EAAAA,eAAAA,GACAA,EAAAA,mBAAAA,GClHAA,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,OACAqB,SAAAA,KACAhB,UAAAA,OACAiB,OACAsgD,MACAC,OAAAA,EAAAA,SAAAA,EAAAA,aAAAA,EAAAA,KAAAA,EACAC,6BAAAA,EACA3mC,UAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,aAAAA,EACAI,SAAAA,GAAAA,YAAAA,GAAAA,aAAAA,IACA4lB,OAAAA,EAAAA,QAAAA,EAAAA,OAAAA,EAAAA,OAAAA,IAGA1/B,YACA0pB,OAAAA,KAAAA,QAAAA,aAAAA,SACAJ,KAAAA,SACAg3B,WAAAA,OACAC,UAAAA,KAAAA,OAAAA,aAAAA,GACAC,qBAAAA,KAAAA,OAAAA,aAAAA,GACA3uB,MAAAA,OACA4uB,WAAAA,UArBA,WAwBA,QAAAC,GAAA9lD,GAAAP,EAAAmK,KAAAk8C,GACAzlD,EAAAA,UAAAA,KAAAA,EAEA,IAAA0lD,GAAAn8C,KAAAqY,KAAAvW,SAAAmZ,cAAA,OACAkhC,GAAAA,MAAAA,cAAAA,OACAA,EAAAA,MAAAA,MAAAA,OACAA,EAAAA,MAAAA,OAAAA,OACAA,EAAAA,MAAAA,WAAAA,MACAn8C,KAAA1B,IAAA+uB,MAAA+uB,UAAA,OACAp8C,KAAA1B,IAAAivB,YAAA4uB,EAEA,IAAAlmB,GAAAx/B,EAAAoF,eAAA,UAAA,MAAA,OACAmE,MAAAk2B,KAAA,GAAAD,GAAAj2B,MAEAA,KAAAm2B,aAAAt1B,QAAAb,KAAAA,KAAAo2B,iBACAp2B,KAAAg1B,YAAAn0B,QAAAb,KAAAA,KAAAi1B,gBACAj1B,KAAAq8C,kBAAAx7C,QAAAb,KAAAA,KAAAs8C,sBACAt8C,KAAAu8C,gBAAA17C,QAAAb,KAAAA,KAAAw8C,oBACAx8C,KAAAy8C,2BAAA57C,QAAAb,KAAAA,KAAA08C,+BAEA18C,KAAAg5B,aAAAn4B,QAAAb,KAAAA,KAAAi5B,iBACAj5B,KAAA28C,kBAAA97C,QAAAb,KAAAA,KAAA48C,sBAEA58C,KAAAk2B,KAAA2mB,OAAA,aACA78C,KAAAk2B,KAAAoN,UAAA,GAEAtjC,KAAAkhC,aAAArgC,QAAAb,KAAAA,KAAAijC,iBAEAjjC,KAAAk2B,KAAA4L,YAAAjhC,QAAAb,KAAAA,KAAA88C,gBACA98C,KAAAk2B,KAAA8M,cAAAniC,QAAAb,KAAAA,KAAA88C,gBACA98C,KAAAk2B,KAAAsM,iBAAA3hC,QAAAb,KAAAA,KAAA88C,gBACA98C,KAAAk2B,KAAAwM,iBAAA7hC,QAAAb,KAAAA,KAAA88C,gBACA98C,KAAAk2B,KAAAgM,cAAArhC,QAAAb,KAAAA,KAAA88C,gBACA98C,KAAAk2B,KAAAoM,qBAAAzhC,QAAAb,KAAAA,KAAA88C,gBACA98C,KAAAk2B,KAAAgN,mBAAAriC,QAAAb,KAAAA,KAAA88C,gBAEA98C,KAAAspB,UAAAC,UAAA1oB,QAAAb,KAAAA,KAAAwpB,uBA5DA,MAAArmB,GAAA+4C,IAAA14C,IAAA,kBAAAjO,MAAA,SAAA8mB,GA+DArc,KAAAqY,KAAAgV,MAAAnI,MAAA,GAAAzuB,GAAAwO,OAAAoX,MA/DA7Y,IAAA,iBAAAjO,MAAA,SAAA8mB,GAkEArc,KAAAqY,KAAAme,UAAAna,EACArc,KAAA+8C,qBAnEAv5C,IAAA,kBAAAjO,MAAA,WAsEAyK,KAAA+8C,qBAtEAv5C,IAAA,uBAAAjO,MAAA,SAAA8mB,GAyEArc,KAAAqY,KAAAgV,MAAAyuB,WAAAz/B,EAAA,KACArc,KAAA+8C,qBA1EAv5C,IAAA,kBAAAjO,MAAA,SAAA8mB,GA6EArc,KAAAg9C,cAAA3gC,EAAArc,KAAAi8C,eA7EAz4C,IAAA,uBAAAjO,MAAA,SAAA8mB,GAgFArc,KAAAg9C,cAAAh9C,KAAAqtB,MAAA,GAAA52B,GAAAwO,OAAAoX,OAhFA7Y,IAAA,qBAAAjO,MAAA,SAAA8mB,GAmFA,GAAAgR,GAAArtB,KAAAqY,KAAAgV,KACA,QAAAhR,GACA,IAAArc,MAAA27C,KAAAC,OACAvuB,EAAAA,WAAAA,KACA,MACA,KAAArtB,MAAA27C,KAAAsB,SACA5vB,EAAAA,WAAAA,WACAA,EAAAA,SAAAA,QACA,MACA,KAAArtB,MAAA27C,KAAAuB,aACA7vB,EAAAA,WAAAA,WACAA,EAAAA,UAAAA,WACA,MACA,KAAArtB,MAAA27C,KAAAwB,KACA,IAAAn9C,MAAA27C,KAAAE,6BACAxuB,EAAAA,WAAAA,WACAA,EAAAA,SAAAA,aAEArtB,KAAAo9C,8BArGA55C,IAAA,gCAAAjO,MAAA,SAAA8mB,GAwGA,GAAA+/B,GAAA,IACA,QAAA//B,GACA,IAAArc,MAAA27C,KAAAzmC,UACAknC,EAAAA,MACA,MACA,KAAAp8C,MAAA27C,KAAAxmC,WACAinC,EAAAA,OACA,MACA,KAAAp8C,MAAA27C,KAAAvmC,aACAgnC,EAAAA,QACA,MACA,KAAAp8C,MAAA27C,KAAAtmC,aACA+mC,EAAAA,UAGAp8C,KAAA1B,IAAA+uB,MAAA+uB,UAAAA,EACAp8C,KAAAo9C,8BAxHA55C,IAAA,iBAAAjO,MAAA,WA2HAyK,KAAA+8C,qBA3HAv5C,IAAA,wBAAAjO,MAAA,WA8HAyK,KAAA+8C,qBA9HAv5C,IAAA,kBAAAjO,MAAA,WAiIA,IAAAyK,KAAA8kB,OAAA9kB,KAAA1B,IAEA,YADA0B,KAAAu1B,eAAAv1B,KAAAq1B,cAAA,EAGA,IAAA8mB,GAAAn8C,KAAAqY,IAGArY,MAAAuhC,uBACAz/B,SAAAA,KAAAA,YAAAA,EAEA,IAAAgE,GAAAq2C,EAAA3mB,aACA3vB,EAAAs2C,EAAA7mB,WACAt1B,MAAAuhC,uBACAvhC,KAAA1B,IAAAivB,YAAA4uB,GAGAn8C,KAAAu1B,eAAAzvB,EACA9F,KAAAq1B,cAAAxvB,KAlJArC,IAAA,gBAAAjO,MAAA,SAAA8nD,EAAApB,GAqJA,GAAA5uB,GAAArtB,KAAAqY,KAAAgV,KACA,QAAAgwB,GACA,IAAA,GACAhwB,EAAAA,WAAAA,MACA,MACA,KAAA,GACAA,EAAAA,YAAAA,WAAAA,EAAAA,YAAAA,EAAAA,WAAAA,EAAAA,YAAAA,GAAAA,KAAAA,IAMA,MACA,KAAA,GACAA,EAAAA,WAAAA,aAAAA,CACA,MACA,KAAA,GACAA,EAAAA,WAAAA,eAAAA,MAtKA7pB,IAAA,2BAAAjO,MAAA,WA2KA,GAAA83B,GAAArtB,KAAAqY,KAAAgV,KAGArtB,MAAAg8C,sBAAAh8C,KAAA27C,KAAAtmC,eACAgY,EAAAA,WAAAA,UAEArtB,KAAA+8C,sBAjLAb,MCAAzlD,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,WACAqB,SAAAA,KACAhB,UAAAA,OACAoB,YACA8hD,oBAAAA,KAAAA,OAAAA,cAAAA,GACAC,QAAAA,MACAC,SAAAA,OACAC,QAAAA,OACAC,QAAAA,OACAx4B,OAAAA,KAAAA,QAAAA,aAAAA,SACAy4B,cAAAA,OACAC,aAAAA,OACAC,eAAAA,YACAC,eAAAA,MACAC,gBAAAA,YACAC,eAAAA,KAAAA,OAAAA,cAAAA,GACAC,6BAAAA,OACAjC,oBAAAA,OACAkC,YAAAA,SACAC,qBAAAA,OACAC,iBAAAA,OACA3pD,OAAAA,MACA4pD,UAAAA,MACAC,mBAAAA,OACAC,oBAAAA,OACA3/C,SAAAA,OACA4/C,WAAAA,OACAC,kBAAAA,KAAAA,OAAAA,cAAAA,GACAC,cAAAA,OACAC,aAAAA,SACAC,mBAAAA,KAAAA,QAAAA,aAAAA,UACAC,gBAAAA,KAAAA,QAAAA,aAAAA,QACAC,aAAAA,MACAC,eAAAA,MACAj6B,KAAAA,SACAk6B,aAAAA,eACAC,WAAAA,OACAC,WAAAA,OACAC,kBAAAA,OACApD,SAAAA,QAEAzgD,SACA8jD,gBAAAA,KAAAA,SAAAA,KAAAA,SACAC,cAAAA,KAAAA,SAAAA,KAAAA,WA7CA,WAgDA,QAAAC,GAAAlpD,GAAA,GAAAmpD,GAAAv/C,IAAAnK,GAAAmK,KAAAs/C,GACA7oD,EAAAA,UAAAA,KAAAA,EAEA,IAAAw/B,GAAAx/B,EAAAoF,eAAA,UAAA,MAAA,OACAmE,MAAAk2B,KAAA,GAAAD,GAAAj2B,MAGAA,KAAAw/C,aACAx/C,KAAAy/C,qBACAz/C,KAAA0/C,aACA1/C,KAAA2/C,oBAEA,IAAAzlB,GAAAl6B,KAAAqY,KAAAvW,SAAAmZ,cAAA,WACAif,GAAAA,MAAAA,cAAAA,OACAA,EAAAA,MAAAA,MAAAA,OACAA,EAAAA,MAAAA,OAAAA,OACAA,EAAAA,MAAAA,UAAAA,aACAA,EAAAA,MAAAA,YAAAA,IACAA,EAAAA,MAAAA,WAAAA,OACAA,EAAAA,MAAAA,QAAAA,OACAA,EAAAA,MAAAA,OAAAA,OACAA,EAAAA,MAAAA,QAAAA,IAGAA,EAAAA,MAAAA,OAAAA,IACAA,EAAAA,UAAAA,EACAl6B,KAAA1B,IAAAivB,YAAA2M,GAEAl6B,KAAAspB,UAAAC,UAAA1oB,QAAAb,KAAAA,KAAAwpB,uBACAxpB,KAAAg1B,YAAAn0B,QAAAb,KAAAA,KAAAi1B,gBACAj1B,KAAAm2B,aAAAt1B,QAAAb,KAAAA,KAAAo2B,iBAEAp2B,KAAAqY,KAAAmV,iBAAA,QAAA,WAAA,MAAA+xB,GAAAtkB,iBAhFA,MAAA93B,GAAAm8C,IAAA97C,IAAA,SAAAjO,MAAA,SAAAuvB,GAmFA9kB,KAAA8kB,MAAAA,KAnFAthB,IAAA,OAAAjO,MAAA,eAAAiO,IAAA,MAAAjO,MAAA,WAyFAyK,KAAA8kB,KAAA9kB,KAAA8kB,KAAA,EAAA9kB,KAAA++C,gBAAA/+C,KAAA8kB,KAAA9kB,KAAA8+C,aAAA9+C,KAAA8kB,KAAArwB,WAzFA+O,IAAA,WAAAjO,MAAA,eAAAiO,IAAA,mBAAAjO,MAAA,SAAAmmB,EAAAoS,GAoGA,GAAAhJ,GAAA9kB,KAAA8kB,KAAAtlB,MAAAkc,EAAAoS,EAGA,OAAAhJ,MAvGAthB,IAAA,UAAAjO,MAAA,SAAAmmB,EAAAoS,GA0GA,MAAA9tB,MAAA8kB,KAAAtlB,MAAAkc,EAAAoS,MA1GAtqB,IAAA,SAAAjO,MAAA,eAAAiO,IAAA,gBAAAjO,MAAA,eAAAiO,IAAA,SAAAjO,MAAA,eAAAiO,IAAA,sBAAAjO,MAAA,eAAAiO,IAAA,QAAAjO,MAAA,eAAAiO,IAAA,aAAAjO,MAAA,eAAAiO,IAAA,sBAAAjO,MAAA,eAAAiO,IAAA,OAAAjO,MAAA,eAAAiO,IAAA,SAAAjO,MAAA,eAAAiO,IAAA,SAAAjO,MAAA,eAAAiO,IAAA,YAAAjO,MAAA,eAAAiO,IAAA,aAAAjO,MAAA,eAAAiO,IAAA,OAAAjO,MAAA,eAAAiO,IAAA,wBAAAjO,MAAA,WAoJAyK,KAAAy+C,kBAAAz+C,KAAApB,SACAoB,KAAAi7B,eACAj7B,KAAAq1B,cAAAr1B,KAAAs1B,YACAt1B,KAAAu1B,eAAAv1B,KAAAw1B,gBAvJAhyB,IAAA,iBAAAjO,MAAA,SAAA8mB,GA0JArc,KAAAqY,KAAA9iB,MAAA8mB,KA1JA7Y,IAAA,kBAAAjO,MAAA,SAAA8mB,GA6JArc,KAAAqY,KAAAgV,MAAAnI,MAAA7I,KA7JA7Y,IAAA,eAAAjO,MAAA,WAgKAyK,KAAA8kB,OAAA9kB,KAAAqY,KAAA9iB,QACAyK,KAAA8kB,KAAA9kB,KAAAqY,KAAA9iB,OAEAyK,KAAAvL,OAAAuL,KAAA8kB,KAAArwB,OACAuL,KAAAq+C,UAAAr+C,KAAA4/C,gBACA5/C,KAAA6/C,gBArKAr8C,IAAA,aAAAjO,MAAA,WAkLA,IAAA,GARAuqD,IAAA,SAAA,eAAA,cAAA,cAAA,mBAOAzyB,EAAArtB,KAAAqY,KAAAgV,MACA0kB,EAAA,EAAAA,EAAA+N,EAAArrD,OAAAs9C,IAAA,CACA,GAAAgO,GAAAD,EAAA/N,GACA/2C,EAAAgF,KAAAg4B,IAAA+nB,EACA/kD,KACAqyB,EAAAA,GAAAA,EACArtB,KAAAg4B,IAAA+nB,GAAA,UAvLAv8C,IAAA,gBAAAjO,MAAA,WA4LA,MAAAyK,MAAA8kB,KAAA7rB,MAAA,MAAAxE,WA5LA6qD,MCAA7oD,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,YACAqB,SAAAA,KACAhB,UAAAA,OACAiB,OACA8+B,WAAAA,OAAAA,EAAAA,SAAAA,EAAAA,OAAAA,EAAAA,mBAAAA,IAEA3+B,YACAspB,KAAAA,SACAsV,eAAAA,KAAAA,MAAAA,iBACAx7B,SAAAA,OACAy7B,UAAAA,MACAC,SAAAA,QAEAh/B,SACAsiB,cAhBA,WAmBA,QAAAoiC,GAAA5pD,GAAA,GAAA6pD,GAAAjgD,IAAAnK,GAAAmK,KAAAggD,GACAvpD,EAAAA,UAAAA,KAAAA,EAEA,IAAAw/B,GAAAx/B,EAAAoF,eAAA,UAAA,MAAA,OACAmE,MAAAk2B,KAAA,GAAAD,GAAAj2B,KAEA,IAAAy6B,GAAAz6B,KAAAqY,KAAAvW,SAAAmZ,cAAA,QACAwf,GAAAA,KAAAA,OACAA,EAAAA,UAAAA,EACAA,EAAAA,MAAAA,cAAAA,OAGAA,EAAAA,MAAAA,OAAAA,IACAA,EAAAA,MAAAA,QAAAA,IACAA,EAAAA,MAAAA,MAAAA,OACAA,EAAAA,MAAAA,OAAAA,OACAz6B,KAAA1B,IAAAivB,YAAAkN,GACAz6B,KAAAi4B,gBAAAwC,GACAA,EAAAA,UAAAA,EAEAz6B,KAAAspB,UAAAC,UAAA1oB,QAAAb,KAAAA,KAAAwpB,uBACAxpB,KAAAg1B,YAAAn0B,QAAAb,KAAAA,KAAAi1B,gBACAj1B,KAAA06B,gBAAA75B,QAAAb,KAAAA,KAAA26B,oBACA36B,KAAA46B,qBAAA/5B,QAAAb,KAAAA,KAAA66B,yBACA76B,KAAA86B,gBAAAj6B,QAAAb,KAAAA,KAAA+6B,oBACA/6B,KAAAwyB,KAAAa,QAAAxyB,QAAAb,KAAAA,KAAAg7B,gBAEAh7B,KAAAqY,KAAAmV,iBAAA,QAAA,WAAA,MAAAyyB,GAAAhlB,iBA9CA,MAAA93B,GAAA68C,IAAAx8C,IAAA,wBAAAjO,MAAA,WAiDAyK,KAAAq1B,cAAAr1B,KAAAqY,KAAAid,YACAt1B,KAAAu1B,eAAAv1B,KAAAqY,KAAAmd,gBAlDAhyB,IAAA,iBAAAjO,MAAA,SAAA8mB,GA0DArc,KAAAqY,KAAA9iB,QAAA8mB,IACArc,KAAAqY,KAAA9iB,MAAA8mB,MA3DA7Y,IAAA,qBAAAjO,MAAA,SAAA8mB,GA+DA,GAAA8d,GAAAn6B,KAAAm6B,UACAM,EAAAz6B,KAAAqY,IACA,QAAAgE,GACA,IAAA8d,GAAAe,OACAT,EAAAA,KAAAA,MACA,MACA,KAAAN,GAAAgB,SACAV,EAAAA,KAAAA,UACA,MACA,KAAAN,GAAAiB,OAEAX,EAAAA,KAAAA,UACA,MACA,KAAAN,GAAAkB,mBAEAZ,EAAAA,KAAAA,eA9EAj3B,IAAA,0BAAAjO,MAAA,SAAA8mB,GAmFArc,KAAAqY,KAAAijB,UAAAjf,EAAA,EAAA,KAAAA,KAnFA7Y,IAAA,qBAAAjO,MAAA,SAAA8mB,GAsFArc,KAAAqY,KAAAqd,SAAArZ,KAtFA7Y,IAAA,iBAAAjO,MAAA,SAAA0C,GAyFA,GAAAkG,GAAA1H,EAAA0H,GACAo9B,EAAAtjC,EAAAuL,MAAArF,EAAAgN,YAAAlT,EAAAuL,MAAArF,EAAAiN,SACAmwB,IAAAv7B,KAAAw7B,mBACAx7B,KAAA4d,WACA3lB,EAAAA,UAAAA,MA7FAuL,IAAA,iBAAAjO,MAAA,WAiGA,OAAAyK,KAAAq6B,WACAr6B,KAAAq6B,UAAAoB,SAAAz7B,KAAA8kB,SAlGAthB,IAAA,eAAAjO,MAAA,WAuGAyK,KAAA8kB,OAAA9kB,KAAAqY,KAAA9iB,QACAyK,KAAAnB,4BAAA,EACAmB,KAAA8kB,KAAA9kB,KAAAqY,KAAA9iB,MACAyK,KAAAnB,4BAAA,OA1GAmhD,MCAAvpD,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,aACAqB,SAAAA,KACAhB,UAAAA,iBACAoB,YACAg6C,WAAAA,OACA9gD,MAAAA,KAAAA,SAAAA,aAAAA,KACAirB,IAAAA,KAAAA,SAAAA,aAAAA,KACAwuB,WAAAA,QAEA5yC,gBAAAA,cAXA,WAaA,QAAA2kD,GAAA9pD,GAAAP,EAAAmK,KAAAkgD,GACAzpD,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAAwyC,MAAAxyC,KAAA6D,QAhBA,MAAAV,GAAA+8C,IAAA18C,IAAA,SAAAjO,MAAA,SAAA03C,GAmBA,IAAA,GAAA14C,GAAA,EAAAA,EAAAyL,KAAAw1C,WAAA/gD,OAAAF,IAAA,CACA,GAAA2qB,GAAAlf,KAAAw1C,WAAAjhD,EACA2qB,GAAAA,WAFA,IAAAi3B,GAAAj3B,EAAAi3B,SAAAD,EAAAh3B,EAAAg3B,OAAAx2B,EAAAR,EAAAQ,QAIA,KAAA,GAAA3e,KAAAksC,GAAA,CACA,GAAAkT,GAAAlT,EAAAlsC,EACA,KAAAo1C,EAAA1hD,QAAA0hD,EAAA59C,QAAA4nD,EAAA98C,cAAA,IAAA6yC,EAAAzhD,QAAAyhD,EAAA39C,QAAA4nD,EAAA9hC,gBAEAqB,EAAAA,KAAAA,GAGAR,EAAAA,YA9BA1b,IAAA,QAAAjO,MAAA,WAkCA,IAAA,GAAAhB,GAAA,EAAAA,EAAAyL,KAAAw1C,WAAA/gD,OAAAF,IACAyL,KAAAw1C,WAAAjhD,GAAAkgC,WAnCAyrB,MCAAzpD,EAAAA,iBACA0E,OAAAA,UACApB,KAAAA,YACAqB,SAAAA,KACAhB,UAAAA,iBACAoB,YACA4tC,EAAAA,OACAC,EAAAA,SAPA,WAUA,QAAA+W,GAAAhqD,GAAAP,EAAAmK,KAAAogD,GACA3pD,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAA8qC,SAAAjqC,QAAAb,KAAA6D,QAAA7D,KAAA6D,QAAAinB,kBACA9qB,KAAAgrC,SAAAnqC,QAAAb,KAAA6D,QAAA7D,KAAA6D,QAAAinB,kBAdA,MAAAs1B,OCIA3pD,EAAAA,iBACA0E,OAAAA,eACApB,KAAAA,YACAqB,SAAAA,KACAhB,UAAAA,iBACAiB,OACAglD,WAAAA,WAAAA,EAAAA,KAAAA,EAAAA,QAAAA,EAAAA,OAAAA,EAAAA,MAAAA,IAEA7kD,YACAi3C,OAAAA,OACAv6C,QAAAA,KAAAA,OAAAA,aAAAA,GACAooD,YAAAA,SACA1oD,IAAAA,OAEA0D,SACAilD,sBAAAA,KAAAA,SAAAA,KAAAA,cAfA,WAkBA,QAAAC,GAAApqD,GAAAP,EAAAmK,KAAAwgD,GACA/pD,EAAAA,UAAAA,KAAAA,GAEAuJ,KAAAygD,QAAA1nD,OACAiH,KAAA0gD,YAAA,EAEA1gD,KAAA2gD,cAAA9/C,QAAAb,KAAAA,KAAA4gD,kBACA5gD,KAAA8yC,cAAAjyC,QAAAb,KAAAA,KAAA6gD,kBACA7gD,KAAA8gD,WAAAjgD,QAAAb,KAAAA,KAAA6gD,kBA1BA,MAAA19C,GAAAq9C,IAAAh9C,IAAA,mBAAAjO,MAAA,SAAA2C,GA6BAA,IAAA8H,KAAAqgD,UAAAhiD,QACA2B,KAAAsgD,YAAA,OA9BA98C,IAAA,iBAAAjO,MAAA,WAiCA,GAAAwrD,GAAA/gD,IACAA,MAAA0gD,YAAA,EAEA1gD,KAAApI,KAAAoI,KAAAyyC,SAIAzyC,KAAA9H,OAAA8H,KAAAqgD,UAAAW,WACAhhD,KAAAygD,QAAA,GAAAJ,WAAArgD,KAAApI,KACAoI,KAAAygD,QAAAQ,OAAA,WACAF,EAAA7oD,OAAA6oD,EAAAV,UAAAa,MAEAlhD,KAAAygD,QAAAU,QAAA,WACAJ,EAAA7oD,OAAA6oD,EAAAV,UAAAe,OACAL,EAAAL,YACAK,EAAAM,kBAGArhD,KAAAygD,QAAAa,QAAA,SAAAx0B,GACAi0B,EAAAT,YAAAxzB,EAAAy0B,QACAR,EAAA7oD,OAAA6oD,EAAAV,UAAAhiD,OAEA2B,KAAAygD,QAAAe,UAAA,SAAAD,GACAR,EAAAR,oBAAAgB,EAAArY,WAxDA1lC,IAAA,mBAAAjO,MAAA,WA4DAyK,KAAA0gD,YAAA,EACA1gD,KAAA9H,SAAA8H,KAAAqgD,UAAAa,MACAlhD,KAAA9H,OAAA8H,KAAAqgD,UAAAoB,QACAzhD,KAAAygD,QAAAiB,SACA1hD,KAAA9H,SAAA8H,KAAAqgD,UAAAoB,SACAzhD,KAAAqhD,oBAjEA79C,IAAA,kBAAAjO,MAAA,SAAAgsD,GAqEAvhD,KAAA9H,SAAA8H,KAAAqgD,UAAAa,MACAlhD,KAAAygD,QAAAkB,KAAAJ,OAtEAf,OxF65RmB,mBAAVtsD,QAAwBA,OAAS8U","file":"qt.min.js","sourcesContent":[";(function(global) {\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar QmlWeb = {};\n\nglobal.QmlWeb = QmlWeb;\n\nvar objectIds = 0;\n\nvar QObject = function () {\n  function QObject(parent) {\n    _classCallCheck(this, QObject);\n\n    this.$parent = parent;\n    if (parent && parent.$tidyupList) {\n      parent.$tidyupList.push(this);\n    }\n\n    // List of things to tidy up when deleting this object.\n    this.$tidyupList = [];\n    this.$properties = {};\n    this.$signals = [];\n\n    this.objectId = objectIds++;\n  }\n\n  _createClass(QObject, [{\n    key: \"$delete\",\n    value: function $delete() {\n      if (this.$Component) {\n        this.$Component.destruction();\n      }\n\n      while (this.$tidyupList.length > 0) {\n        var item = this.$tidyupList[0];\n        if (item.$delete) {\n          // It's a QObject\n          item.$delete();\n        } else {\n          // It must be a signal\n          item.disconnect(this);\n        }\n      }\n\n      for (var i in this.$properties) {\n        var prop = this.$properties[i];\n        while (prop.$tidyupList.length > 0) {\n          prop.$tidyupList[0].disconnect(prop);\n        }\n      }\n\n      if (this.$parent && this.$parent.$tidyupList) {\n        var index = this.$parent.$tidyupList.indexOf(this);\n        this.$parent.$tidyupList.splice(index, 1);\n      }\n\n      // must do this:\n      // 1) parent will be notified and erase object from it's children.\n      // 2) DOM node will be removed.\n      this.parent = undefined;\n\n      // Disconnect any slots connected to any of our signals. Do this after\n      // clearing the parent, as that relies on parentChanged being handled.\n      for (var _i in this.$signals) {\n        this.$signals[_i].disconnect();\n      }\n    }\n\n    // must have a `destroy` method\n    // http://doc.qt.io/qt-5/qtqml-javascript-dynamicobjectcreation.html\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.$delete();\n    }\n  }]);\n\n  return QObject;\n}();\n\nQmlWeb.QObject = QObject;\n\nvar JSItemModel = function () {\n  function JSItemModel() {\n    _classCallCheck(this, JSItemModel);\n\n    this.roleNames = [];\n\n    var Signal = QmlWeb.Signal;\n    this.dataChanged = Signal.signal([{ type: \"int\", name: \"startIndex\" }, { type: \"int\", name: \"endIndex\" }]);\n    this.rowsInserted = Signal.signal([{ type: \"int\", name: \"startIndex\" }, { type: \"int\", name: \"endIndex\" }]);\n    this.rowsMoved = Signal.signal([{ type: \"int\", name: \"sourceStartIndex\" }, { type: \"int\", name: \"sourceEndIndex\" }, { type: \"int\", name: \"destinationIndex\" }]);\n    this.rowsRemoved = Signal.signal([{ type: \"int\", name: \"startIndex\" }, { type: \"int\", name: \"endIndex\" }]);\n    this.modelReset = Signal.signal();\n  }\n\n  _createClass(JSItemModel, [{\n    key: \"setRoleNames\",\n    value: function setRoleNames(names) {\n      this.roleNames = names;\n    }\n  }]);\n\n  return JSItemModel;\n}();\n\nQmlWeb.JSItemModel = JSItemModel;\n\n// TODO complete implementation (with attributes `r`,`g` and `b`).\n\nvar QColor = function () {\n  function QColor(val) {\n    _classCallCheck(this, QColor);\n\n    this.$value = \"black\";\n    if (val instanceof QColor) {\n      // Copy constructor\n      this.$value = val.$value;\n    } else if (typeof val === \"string\") {\n      this.$value = val.toLowerCase();\n    } else if (typeof val === \"number\") {\n      // we assume it is int value and must be converted to css hex with padding\n      var rgb = (Math.round(val) + 0x1000000).toString(16).substr(-6);\n      this.$value = \"#\" + rgb;\n    }\n  }\n\n  _createClass(QColor, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.$value;\n    }\n  }, {\n    key: \"$get\",\n    value: function $get() {\n      // Returns the same instance for all equivalent colors.\n      // NOTE: the returned value should not be changed using method calls, if\n      // those would be added in the future, the returned value should be wrapped.\n      if (!QColor.$colors[this.$value]) {\n        if (QColor.$colorsCount >= QColor.comparableColorsLimit) {\n          // Too many colors created, bail out to avoid memory hit\n          return this;\n        }\n        QColor.$colors[this.$value] = this;\n        QColor.$colorsCount++;\n        if (QColor.$colorsCount === QColor.comparableColorsLimit) {\n          console.warn(\"QmlWeb: the number of QColor instances reached the limit set in\", \"QmlWeb.QColor.comparableColorsLimit. Further created colors would\", \"not be comparable to avoid memory hit.\");\n        }\n      }\n      return QColor.$colors[this.$value];\n    }\n  }]);\n\n  return QColor;\n}();\n\nQColor.$colors = {};\nQColor.$colorsCount = 0;\nQColor.comparableColorsLimit = 10000;\nQmlWeb.QColor = QColor;\n\nvar QSizeF = function (_QmlWeb$QObject) {\n  _inherits(QSizeF, _QmlWeb$QObject);\n\n  function QSizeF(width, height) {\n    _classCallCheck(this, QSizeF);\n\n    var _this = _possibleConstructorReturn(this, (QSizeF.__proto__ || Object.getPrototypeOf(QSizeF)).call(this));\n\n    var createProperty = QmlWeb.createProperty;\n    createProperty(\"real\", _this, \"width\", { initialValue: width });\n    createProperty(\"real\", _this, \"height\", { initialValue: height });\n    return _this;\n  }\n\n  return QSizeF;\n}(QmlWeb.QObject);\n\nQmlWeb.QSizeF = QSizeF;\n\nvar Signal = function () {\n  function Signal() {\n    var _this2 = this;\n\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Signal);\n\n    this.connectedSlots = [];\n    this.obj = options.obj;\n    this.options = options;\n\n    this.signal = function () {\n      return _this2.execute.apply(_this2, arguments);\n    };\n    this.signal.parameters = params;\n    this.signal.connect = this.connect.bind(this);\n    this.signal.disconnect = this.disconnect.bind(this);\n    this.signal.isConnected = this.isConnected.bind(this);\n\n    // TODO Fix Keys that don't have an obj for the signal\n    if (this.obj && this.obj.$signals !== undefined) {\n      this.obj.$signals.push(this.signal);\n    }\n  }\n\n  _createClass(Signal, [{\n    key: \"execute\",\n    value: function execute() {\n      QmlWeb.QMLProperty.pushEvalStack();\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      for (var i in this.connectedSlots) {\n        var desc = this.connectedSlots[i];\n        if (desc.type & Signal.QueuedConnection) {\n          Signal.$addQueued(desc, args);\n        } else {\n          Signal.$execute(desc, args);\n        }\n      }\n      QmlWeb.QMLProperty.popEvalStack();\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      var type = Signal.AutoConnection;\n\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      if (typeof args[args.length - 1] === \"number\") {\n        type = args.pop();\n      }\n      if (type & Signal.UniqueConnection) {\n        if (this.isConnected.apply(this, args)) {\n          return;\n        }\n      }\n      if (args.length === 1) {\n        this.connectedSlots.push({ thisObj: global, slot: args[0], type: type });\n      } else if (typeof args[1] === \"string\" || args[1] instanceof String) {\n        if (args[0].$tidyupList && args[0] !== this.obj) {\n          args[0].$tidyupList.push(this.signal);\n        }\n        var slot = args[0][args[1]];\n        this.connectedSlots.push({ thisObj: args[0], slot: slot, type: type });\n      } else {\n        if (args[0].$tidyupList && (!this.obj || args[0] !== this.obj && args[0] !== this.obj.$parent)) {\n          args[0].$tidyupList.push(this.signal);\n        }\n        this.connectedSlots.push({ thisObj: args[0], slot: args[1], type: type });\n      }\n\n      // Notify object of connect\n      if (this.options.obj && this.options.obj.$connectNotify) {\n        this.options.obj.$connectNotify(this.options);\n      }\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      // type meaning:\n      //  1 = function, 2 = string\n      //  3 = object with string method,  4 = object with function\n      // No args means disconnect everything connected to this signal\n      var callType = args.length === 1 ? args[0] instanceof Function ? 1 : 2 : typeof args[1] === \"string\" || args[1] instanceof String ? 3 : 4;\n      for (var i = 0; i < this.connectedSlots.length; i++) {\n        var _connectedSlots$i = this.connectedSlots[i],\n            slot = _connectedSlots$i.slot,\n            thisObj = _connectedSlots$i.thisObj;\n\n        if (args.length === 0 || callType === 1 && slot === args[0] || callType === 2 && thisObj === args[0] || callType === 3 && thisObj === args[0] && slot === args[0][args[1]] || thisObj === args[0] && slot === args[1]) {\n          if (thisObj) {\n            var index = thisObj.$tidyupList.indexOf(this.signal);\n            if (index >= 0) {\n              thisObj.$tidyupList.splice(index, 1);\n            }\n          }\n          this.connectedSlots.splice(i, 1);\n          // We have removed an item from the list so the indexes shifted one\n          // backwards\n          i--;\n        }\n      }\n\n      // Notify object of disconnect\n      if (this.options.obj && this.options.obj.$disconnectNotify) {\n        this.options.obj.$disconnectNotify(this.options);\n      }\n    }\n  }, {\n    key: \"isConnected\",\n    value: function isConnected() {\n      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      var callType = args.length === 1 ? 1 : typeof args[1] === \"string\" || args[1] instanceof String ? 2 : 3;\n      for (var i in this.connectedSlots) {\n        var _connectedSlots$i2 = this.connectedSlots[i],\n            slot = _connectedSlots$i2.slot,\n            thisObj = _connectedSlots$i2.thisObj;\n\n        if (callType === 1 && slot === args[0] || callType === 2 && thisObj === args[0] && slot === args[0][args[1]] || thisObj === args[0] && slot === args[1]) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }], [{\n    key: \"signal\",\n    value: function signal() {\n      for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      return new (Function.prototype.bind.apply(Signal, [null].concat(args)))().signal;\n    }\n  }, {\n    key: \"$execute\",\n    value: function $execute(desc, args) {\n      try {\n        desc.slot.apply(desc.thisObj, args);\n      } catch (err) {\n        console.error(\"Signal slot error:\", err.message, err, Function.prototype.toString.call(desc.slot));\n      }\n    }\n  }, {\n    key: \"$addQueued\",\n    value: function $addQueued(desc, args) {\n      if (Signal.$queued.length === 0) {\n        if (global.setImmediate) {\n          global.setImmediate(Signal.$executeQueued);\n        } else {\n          global.setTimeout(Signal.$executeQueued, 0);\n        }\n      }\n      Signal.$queued.push([desc, args]);\n    }\n  }, {\n    key: \"$executeQueued\",\n    value: function $executeQueued() {\n      // New queued signals should be executed on next tick of the event loop\n      var queued = Signal.$queued;\n      Signal.$queued = [];\n\n      QmlWeb.QMLProperty.pushEvalStack();\n      for (var i in queued) {\n        Signal.$execute.apply(Signal, _toConsumableArray(queued[i]));\n      }\n      QmlWeb.QMLProperty.popEvalStack();\n    }\n  }]);\n\n  return Signal;\n}();\n\nSignal.$queued = [];\n\nSignal.AutoConnection = 0;\nSignal.DirectConnection = 1;\nSignal.QueuedConnection = 2;\nSignal.UniqueConnection = 128;\n\nQmlWeb.Signal = Signal;\n\nvar Qt = {\n  rgba: function rgba(r, g, b, a) {\n    var intr = Math.round(r * 255);\n    var intg = Math.round(g * 255);\n    var intb = Math.round(b * 255);\n    return \"rgba(\" + intr + \",\" + intg + \",\" + intb + \",\" + a + \")\";\n  },\n  hsla: function hsla(h, s, l, a) {\n    var inth = Math.round(h * 360);\n    var ints = Math.round(s * 100);\n    var intl = Math.round(l * 100);\n    return \"hsla(\" + inth + \",\" + ints + \"%,\" + intl + \"%,\" + a + \")\";\n  },\n  openUrlExternally: function openUrlExternally(url) {\n    var page = window.open(url, \"_blank\");\n    page.focus();\n  },\n  // Load file, parse and construct as Component (.qml)\n  createComponent: function createComponent(name) {\n    var engine = QmlWeb.engine;\n\n    var file = engine.$resolvePath(name);\n\n    // If \"name\" was a full URL, \"file\" will be equivalent to name and this\n    // will try and load the Component from the full URL, otherwise, this\n    // doubles as checking for the file in the current directory.\n    var tree = engine.loadComponent(file);\n\n    // If the Component is not found, and it is not a URL, look for \"name\" in\n    // this context's importSearchPaths\n    if (!tree) {\n      var nameIsUrl = engine.$parseURI(name) !== undefined;\n      if (!nameIsUrl) {\n        var moreDirs = engine.importSearchPaths(QmlWeb.executionContext.importContextId);\n        for (var i = 0; i < moreDirs.length; i++) {\n          file = \"\" + moreDirs[i] + name;\n          tree = engine.loadComponent(file);\n          if (tree) break;\n        }\n      }\n    }\n\n    if (!tree) {\n      return undefined;\n    }\n\n    var QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n    var component = new QMLComponent({\n      object: tree,\n      context: QmlWeb.executionContext\n    });\n    component.$basePath = engine.extractBasePath(file);\n    component.$imports = tree.$imports;\n    component.$file = file; // just for debugging\n\n    engine.loadImports(tree.$imports, component.$basePath, component.importContextId);\n\n    engine.components[name] = component;\n    return component;\n  },\n\n  createQmlObject: function createQmlObject(src, parent, file) {\n    var tree = QmlWeb.parseQML(src, file);\n\n    // Create and initialize objects\n\n    var QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n    var component = new QMLComponent({\n      object: tree,\n      parent: parent,\n      context: QmlWeb.executionContext\n    });\n\n    var engine = QmlWeb.engine;\n    engine.loadImports(tree.$imports, undefined, component.importContextId);\n\n    var resolvedFile = file || Qt.resolvedUrl(\"createQmlObject_function\");\n    component.$basePath = engine.extractBasePath(resolvedFile);\n    component.$imports = tree.$imports; // for later use\n    // not just for debugging, but for basepath too, see above\n    component.$file = resolvedFile;\n\n    var obj = component.createObject(parent);\n\n    var QMLOperationState = QmlWeb.QMLOperationState;\n    if (engine.operationState !== QMLOperationState.Init && engine.operationState !== QMLOperationState.Idle) {\n      // We don't call those on first creation, as they will be called\n      // by the regular creation-procedures at the right time.\n      engine.$initializePropertyBindings();\n\n      engine.callCompletedSignals();\n    }\n\n    return obj;\n  },\n\n  // Returns url resolved relative to the URL of the caller.\n  // http://doc.qt.io/qt-5/qml-qtqml-qt.html#resolvedUrl-method\n  resolvedUrl: function resolvedUrl(url) {\n    return QmlWeb.qmlUrl(url);\n  },\n\n  size: function size(width, height) {\n    return new QmlWeb.QSizeF(width, height);\n  },\n\n  // Buttons masks\n  LeftButton: 1,\n  RightButton: 2,\n  MiddleButton: 4,\n  // Modifiers masks\n  NoModifier: 0,\n  ShiftModifier: 1,\n  ControlModifier: 2,\n  AltModifier: 4,\n  MetaModifier: 8,\n  KeypadModifier: 16, // Note: Not available in web\n  // Layout directions\n  LeftToRight: 0,\n  RightToLeft: 1,\n  // Orientations\n  Vertical: 0,\n  Horizontal: 1,\n  // Keys\n  Key_Escape: 27,\n  Key_Tab: 9,\n  Key_Backtab: 245,\n  Key_Backspace: 8,\n  Key_Return: 13,\n  Key_Enter: 13,\n  Key_Insert: 45,\n  Key_Delete: 46,\n  Key_Pause: 19,\n  Key_Print: 42,\n  Key_SysReq: 0,\n  Key_Clear: 12,\n  Key_Home: 36,\n  Key_End: 35,\n  Key_Left: 37,\n  Key_Up: 38,\n  Key_Right: 39,\n  Key_Down: 40,\n  Key_PageUp: 33,\n  Key_PageDown: 34,\n  Key_Shift: 16,\n  Key_Control: 17,\n  Key_Meta: 91,\n  Key_Alt: 18,\n  Key_AltGr: 0,\n  Key_CapsLock: 20,\n  Key_NumLock: 144,\n  Key_ScrollLock: 145,\n  Key_F1: 112, Key_F2: 113, Key_F3: 114, Key_F4: 115, Key_F5: 116, Key_F6: 117,\n  Key_F7: 118, Key_F8: 119, Key_F9: 120, Key_F10: 121, Key_F11: 122,\n  Key_F12: 123, Key_F13: 124, Key_F14: 125, Key_F15: 126, Key_F16: 127,\n  Key_F17: 128, Key_F18: 129, Key_F19: 130, Key_F20: 131, Key_F21: 132,\n  Key_F22: 133, Key_F23: 134, Key_F24: 135,\n  Key_F25: 0, Key_F26: 0, Key_F27: 0, Key_F28: 0, Key_F29: 0, Key_F30: 0,\n  Key_F31: 0, Key_F32: 0, Key_F33: 0, Key_F34: 0, Key_F35: 0,\n  Key_Super_L: 0,\n  Key_Super_R: 0,\n  Key_Menu: 0,\n  Key_Hyper_L: 0,\n  Key_Hyper_R: 0,\n  Key_Help: 6,\n  Key_Direction_L: 0,\n  Key_Direction_R: 0,\n  Key_Space: 32,\n  Key_Any: 32,\n  Key_Exclam: 161,\n  Key_QuoteDbl: 162,\n  Key_NumberSign: 163,\n  Key_Dollar: 164,\n  Key_Percent: 165,\n  Key_Ampersant: 166,\n  Key_Apostrophe: 222,\n  Key_ParenLeft: 168,\n  Key_ParenRight: 169,\n  Key_Asterisk: 170,\n  Key_Plus: 171,\n  Key_Comma: 188,\n  Key_Minus: 173,\n  Key_Period: 190,\n  Key_Slash: 191,\n  Key_0: 48, Key_1: 49, Key_2: 50, Key_3: 51, Key_4: 52,\n  Key_5: 53, Key_6: 54, Key_7: 55, Key_8: 56, Key_9: 57,\n  Key_Colon: 58,\n  Key_Semicolon: 59,\n  Key_Less: 60,\n  Key_Equal: 61,\n  Key_Greater: 62,\n  Key_Question: 63,\n  Key_At: 64,\n  Key_A: 65, Key_B: 66, Key_C: 67, Key_D: 68, Key_E: 69, Key_F: 70, Key_G: 71,\n  Key_H: 72, Key_I: 73, Key_J: 74, Key_K: 75, Key_L: 76, Key_M: 77, Key_N: 78,\n  Key_O: 79, Key_P: 80, Key_Q: 81, Key_R: 82, Key_S: 83, Key_T: 84, Key_U: 85,\n  Key_V: 86, Key_W: 87, Key_X: 88, Key_Y: 89, Key_Z: 90,\n  Key_BracketLeft: 219,\n  Key_Backslash: 220,\n  Key_BracketRight: 221,\n  Key_AsciiCircum: 160,\n  Key_Underscore: 167,\n  Key_QuoteLeft: 0,\n  Key_BraceLeft: 174,\n  Key_Bar: 172,\n  Key_BraceRight: 175,\n  Key_AsciiTilde: 176,\n  Key_Back: 0,\n  Key_Forward: 0,\n  Key_Stop: 0,\n  Key_VolumeDown: 182,\n  Key_VolumeUp: 183,\n  Key_VolumeMute: 181,\n  Key_multiply: 106,\n  Key_add: 107,\n  Key_substract: 109,\n  Key_divide: 111,\n  Key_News: 0,\n  Key_OfficeHome: 0,\n  Key_Option: 0,\n  Key_Paste: 0,\n  Key_Phone: 0,\n  Key_Calendar: 0,\n  Key_Reply: 0,\n  Key_Reload: 0,\n  Key_RotateWindows: 0,\n  Key_RotationPB: 0,\n  Key_RotationKB: 0,\n  Key_Save: 0,\n  Key_Send: 0,\n  Key_Spell: 0,\n  Key_SplitScreen: 0,\n  Key_Support: 0,\n  Key_TaskPane: 0,\n  Key_Terminal: 0,\n  Key_Tools: 0,\n  Key_Travel: 0,\n  Key_Video: 0,\n  Key_Word: 0,\n  Key_Xfer: 0,\n  Key_ZoomIn: 0,\n  Key_ZoomOut: 0,\n  Key_Away: 0,\n  Key_Messenger: 0,\n  Key_WebCam: 0,\n  Key_MailForward: 0,\n  Key_Pictures: 0,\n  Key_Music: 0,\n  Key_Battery: 0,\n  Key_Bluetooth: 0,\n  Key_WLAN: 0,\n  Key_UWB: 0,\n  Key_AudioForward: 0,\n  Key_AudioRepeat: 0,\n  Key_AudioRandomPlay: 0,\n  Key_Subtitle: 0,\n  Key_AudioCycleTrack: 0,\n  Key_Time: 0,\n  Key_Hibernate: 0,\n  Key_View: 0,\n  Key_TopMenu: 0,\n  Key_PowerDown: 0,\n  Key_Suspend: 0,\n  Key_ContrastAdjust: 0,\n  Key_MediaLast: 0,\n  Key_unknown: -1,\n  Key_Call: 0,\n  Key_Camera: 0,\n  Key_CameraFocus: 0,\n  Key_Context1: 0,\n  Key_Context2: 0,\n  Key_Context3: 0,\n  Key_Context4: 0,\n  Key_Flip: 0,\n  Key_Hangup: 0,\n  Key_No: 0,\n  Key_Select: 93,\n  Key_Yes: 0,\n  Key_ToggleCallHangup: 0,\n  Key_VoiceDial: 0,\n  Key_LastNumberRedial: 0,\n  Key_Execute: 43,\n  Key_Printer: 42,\n  Key_Play: 250,\n  Key_Sleep: 95,\n  Key_Zoom: 251,\n  Key_Cancel: 3,\n  // Align\n  AlignLeft: 0x0001,\n  AlignRight: 0x0002,\n  AlignHCenter: 0x0004,\n  AlignJustify: 0x0008,\n  AlignTop: 0x0020,\n  AlignBottom: 0x0040,\n  AlignVCenter: 0x0080,\n  AlignCenter: 0x0084,\n  AlignBaseline: 0x0100,\n  AlignAbsolute: 0x0010,\n  AlignLeading: 0x0001,\n  AlignTrailing: 0x0002,\n  AlignHorizontal_Mask: 0x001f,\n  AlignVertical_Mask: 0x01e0,\n  // Screen\n  PrimaryOrientation: 0,\n  PortraitOrientation: 1,\n  LandscapeOrientation: 2,\n  InvertedPortraitOrientation: 4,\n  InvertedLandscapeOrientation: 8,\n  // CursorShape\n  ArrowCursor: 0,\n  UpArrowCursor: 1,\n  CrossCursor: 2,\n  WaitCursor: 3,\n  IBeamCursor: 4,\n  SizeVerCursor: 5,\n  SizeHorCursor: 6,\n  SizeBDiagCursor: 7,\n  SizeFDiagCursor: 8,\n  SizeAllCursor: 9,\n  BlankCursor: 10,\n  SplitVCursor: 11,\n  SplitHCursor: 12,\n  PointingHandCursor: 13,\n  ForbiddenCursor: 14,\n  WhatsThisCursor: 15,\n  BusyCursor: 16,\n  OpenHandCursor: 17,\n  ClosedHandCursor: 18,\n  DragCopyCursor: 19,\n  DragMoveCursor: 20,\n  DragLinkCursor: 21,\n  LastCursor: 21, //DragLinkCursor,\n  BitmapCursor: 24,\n  CustomCursor: 25,\n  // ScrollBar Policy\n  ScrollBarAsNeeded: 0,\n  ScrollBarAlwaysOff: 1,\n  ScrollBarAlwaysOn: 2\n};\n\nQmlWeb.Qt = Qt;\n\nvar QMLBinding = function () {\n  /**\n   * Create QML binding.\n   * @param {Variant} val Sourcecode or function representing the binding\n   * @param {Array} tree Parser tree of the binding\n   * @return {Object} Object representing the binding\n   */\n  function QMLBinding(val, tree) {\n    _classCallCheck(this, QMLBinding);\n\n    // this.isFunction states whether the binding is a simple js statement or a\n    // function containing a return statement. We decide this on whether it is a\n    // code block or not. If it is, we require a return statement. If it is a\n    // code block it could though also be a object definition, so we need to\n    // check that as well (it is, if the content is labels).\n    this.isFunction = tree && tree[0] === \"block\" && tree[1][0] && tree[1][0][0] !== \"label\";\n    this.src = val;\n    this.compiled = false;\n  }\n\n  _createClass(QMLBinding, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        src: this.src,\n        deps: JSON.stringify(this.deps),\n        tree: JSON.stringify(this.tree)\n      };\n    }\n  }, {\n    key: \"eval\",\n    value: function _eval(object, context, basePath) {\n      // .call is needed for `this` support\n      return this.impl.call(object, object, context, basePath);\n    }\n\n    /**\n     * Compile binding. Afterwards you may call binding.eval to evaluate.\n     */\n\n  }, {\n    key: \"compile\",\n    value: function compile() {\n      this.src = this.src.trim();\n      this.impl = QMLBinding.bindSrc(this.src, this.isFunction);\n      this.compiled = true;\n    }\n  }], [{\n    key: \"bindSrc\",\n    value: function bindSrc(src, isFunction) {\n      return new Function(\"__executionObject\", \"__executionContext\", \"__basePath\", \"\\n      QmlWeb.executionContext = __executionContext;\\n      if (__basePath) {\\n        QmlWeb.engine.$basePath = __basePath;\\n      }\\n      with(QmlWeb) with(__executionContext) with(__executionObject) {\\n        \" + (isFunction ? \"\" : \"return\") + \" \" + src + \"\\n      }\\n    \");\n    }\n  }]);\n\n  return QMLBinding;\n}();\n\nQmlWeb.QMLBinding = QMLBinding;\n\nfunction QMLBoolean(val) {\n  return !!val;\n}\nQMLBoolean.plainType = true;\nQmlWeb.qmlBoolean = QMLBoolean;\n\n// There can only be one running QMLEngine.\n// This variable points to the currently running engine.\nQmlWeb.engine = null;\n\nvar geometryProperties = [\"width\", \"height\", \"fill\", \"x\", \"y\", \"left\", \"right\", \"top\", \"bottom\"];\n\n// QML engine. EXPORTED.\n\nvar QMLEngine = function () {\n  function QMLEngine(element) {\n    _classCallCheck(this, QMLEngine);\n\n    //----------Public Members----------\n\n    this.fps = 60;\n    // Math.floor, causes bugs to timing?\n    this.$interval = Math.floor(1000 / this.fps);\n    this.running = false;\n    this.rootElement = element;\n\n    // Cached component trees (post-QmlWeb.convertToEngine)\n    this.components = {};\n\n    // Cached parsed JS files (post-QmlWeb.jsparse)\n    this.js = {};\n\n    // List of Component.completed signals\n    this.completedSignals = [];\n\n    // Current operation state of the engine (Idle, init, etc.)\n    this.operationState = 1;\n\n    // List of properties whose values are bindings. For internal use only.\n    this.bindedProperties = [];\n\n    // List of operations to perform later after init. For internal use only.\n    this.pendingOperations = [];\n\n    // Root object of the engine\n    this.rootObject = null;\n\n    // Base path of qml engine (used for resource loading)\n    this.$basePath = \"\";\n\n    // Module import paths overrides\n    this.userAddedModulePaths = {};\n\n    // Stores data for setImportPathList(), importPathList(), and addImportPath\n    this.userAddedImportPaths = [];\n\n    //----------Private Members---------\n\n    // Ticker resource id and ticker callbacks\n    this._tickers = [];\n    this._lastTick = Date.now();\n\n    // Callbacks for stopping or starting the engine\n    this._whenStop = [];\n    this._whenStart = [];\n\n    // Keyboard management\n    this.$initKeyboard();\n\n    //----------Construct----------\n\n    // TODO: Move to module initialization\n    var QMLBaseObject = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"QtObject\");\n    var constructors = QmlWeb.constructors;\n    for (var i in constructors) {\n      if (constructors[i].getAttachedObject) {\n        QmlWeb.setupGetter(QMLBaseObject.prototype, i, constructors[i].getAttachedObject);\n      }\n    }\n  }\n\n  //---------- Public Methods ----------\n\n  // Start the engine\n\n\n  _createClass(QMLEngine, [{\n    key: \"start\",\n    value: function start() {\n      QmlWeb.engine = this;\n      var QMLOperationState = QmlWeb.QMLOperationState;\n      if (this.operationState !== QMLOperationState.Running) {\n        this.operationState = QMLOperationState.Running;\n        this._tickerId = setInterval(this._tick.bind(this), this.$interval);\n        this._whenStart.forEach(function (callback) {\n          return callback();\n        });\n      }\n    }\n\n    // Stop the engine\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var QMLOperationState = QmlWeb.QMLOperationState;\n      if (this.operationState === QMLOperationState.Running) {\n        clearInterval(this._tickerId);\n        this.operationState = QMLOperationState.Idle;\n        this._whenStop.forEach(function (callback) {\n          return callback();\n        });\n      }\n    }\n\n    // eslint-disable-next-line max-len\n    /** from http://docs.closure-library.googlecode.com/git/local_closure_goog_uri_uri.js.source.html\n     *\n     * Removes dot segments in given path component, as described in\n     * RFC 3986, section 5.2.4.\n     *\n     * @param {string} path A non-empty path component.\n     * @return {string} Path component with removed dot segments.\n     */\n\n  }, {\n    key: \"removeDotSegments\",\n    value: function removeDotSegments(path) {\n      // path.startsWith(\"/\") is not supported in some browsers\n      var leadingSlash = path && path[0] === \"/\";\n      var segments = path.split(\"/\");\n      var out = [];\n\n      for (var pos = 0; pos < segments.length;) {\n        var segment = segments[pos++];\n\n        if (segment === \".\") {\n          if (leadingSlash && pos === segments.length) {\n            out.push(\"\");\n          }\n        } else if (segment === \"..\") {\n          if (out.length > 1 || out.length === 1 && out[0] !== \"\") {\n            out.pop();\n          }\n          if (leadingSlash && pos === segments.length) {\n            out.push(\"\");\n          }\n        } else {\n          out.push(segment);\n          leadingSlash = true;\n        }\n      }\n\n      return out.join(\"/\");\n    }\n  }, {\n    key: \"extractBasePath\",\n    value: function extractBasePath(file) {\n      // work both in url (\"/\") and windows (\"\\\", from file://d:\\test\\) notation\n      var basePath = file.split(/[/\\\\]/);\n      basePath[basePath.length - 1] = \"\";\n      return basePath.join(\"/\");\n    }\n  }, {\n    key: \"extractFileName\",\n    value: function extractFileName(file) {\n      return file.split(/[/\\\\]/).pop();\n    }\n\n    // Load file, parse and construct (.qml or .qml.js)\n\n  }, {\n    key: \"loadFile\",\n    value: function loadFile(file) {\n      var parentComponent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      // Create an anchor element to get the absolute path from the DOM\n      if (!this.$basePathA) {\n        this.$basePathA = document.createElement(\"a\");\n      }\n      this.$basePathA.href = this.extractBasePath(file);\n      this.$basePath = this.$basePathA.href;\n      var fileName = this.extractFileName(file);\n      var tree = this.loadComponent(this.$resolvePath(fileName));\n      return this.loadQMLTree(tree, parentComponent, file);\n    }\n\n    // parse and construct qml\n    // file is not required; only for debug purposes\n    // This function is only used by the QmlWeb tests\n\n  }, {\n    key: \"loadQML\",\n    value: function loadQML(src) {\n      var parentComponent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n      return this.loadQMLTree(QmlWeb.parseQML(src, file), parentComponent, file);\n    }\n  }, {\n    key: \"loadQMLTree\",\n    value: function loadQMLTree(tree) {\n      var parentComponent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n      QmlWeb.engine = this;\n\n      // Create and initialize objects\n      var QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n      var component = new QMLComponent({\n        object: tree,\n        parent: parentComponent\n      });\n\n      this.loadImports(tree.$imports, undefined, component.importContextId);\n      component.$basePath = this.$basePath;\n      component.$imports = tree.$imports; // for later use\n      component.$file = file; // just for debugging\n\n      this.rootObject = component.$createObject(parentComponent);\n      component.finalizeImports(this.rootContext());\n      this.$initializePropertyBindings();\n\n      this.start();\n\n      this.callCompletedSignals();\n\n      return component;\n    }\n  }, {\n    key: \"rootContext\",\n    value: function rootContext() {\n      return this.rootObject.$context;\n    }\n\n    // next 3 methods used in Qt.createComponent for qml files lookup\n    // http://doc.qt.io/qt-5/qqmlengine.html#addImportPath\n\n  }, {\n    key: \"addImportPath\",\n    value: function addImportPath(dirpath) {\n      this.userAddedImportPaths.push(dirpath);\n    }\n\n    /* Add this dirpath to be checked for components. This is the result of\n     * something like:\n     *\n     * import \"SomeDir/AnotherDirectory\"\n     *\n     * The importContextId ensures it is only accessible from the file in which\n     * it was imported. */\n\n  }, {\n    key: \"addComponentImportPath\",\n    value: function addComponentImportPath(importContextId, dirpath, qualifier) {\n      if (!this.componentImportPaths) {\n        this.componentImportPaths = {};\n      }\n      if (!this.componentImportPaths[importContextId]) {\n        this.componentImportPaths[importContextId] = {};\n      }\n\n      var paths = this.componentImportPaths[importContextId];\n\n      if (qualifier) {\n        if (!paths.qualified) {\n          paths.qualified = {};\n        }\n        paths.qualified[qualifier] = dirpath;\n      } else {\n        if (!paths.unqualified) {\n          paths.unqualified = [];\n        }\n        paths.unqualified.push(dirpath);\n      }\n    }\n  }, {\n    key: \"importSearchPaths\",\n    value: function importSearchPaths(importContextId) {\n      if (!this.componentImportPaths) {\n        return [];\n      }\n      var paths = this.componentImportPaths[importContextId];\n      if (!paths) {\n        return [];\n      }\n      return paths.unqualified || [];\n    }\n  }, {\n    key: \"qualifiedImportPath\",\n    value: function qualifiedImportPath(importContextId, qualifier) {\n      if (!this.componentImportPaths) {\n        return \"\";\n      }\n      var paths = this.componentImportPaths[importContextId];\n      if (!paths || !paths.qualified) {\n        return \"\";\n      }\n      return paths.qualified[qualifier] || \"\";\n    }\n  }, {\n    key: \"setImportPathList\",\n    value: function setImportPathList(arrayOfDirs) {\n      this.userAddedImportPaths = arrayOfDirs;\n    }\n  }, {\n    key: \"importPathList\",\n    value: function importPathList() {\n      return this.userAddedImportPaths;\n    }\n\n    // `addModulePath` defines conrete path for module lookup\n    // e.g. addModulePath(\"QtQuick.Controls\", \"http://example.com/controls\")\n    // will force system to `import QtQuick.Controls` module from\n    // `http://example.com/controls/qmldir`\n\n  }, {\n    key: \"addModulePath\",\n    value: function addModulePath(moduleName, dirPath) {\n      // Keep the mapping. It will be used in loadImports() function.\n      // Remove trailing slash as it required for `readQmlDir`.\n      this.userAddedModulePaths[moduleName] = dirPath.replace(/\\/$/, \"\");\n    }\n  }, {\n    key: \"registerProperty\",\n    value: function registerProperty(obj, propName) {\n      var dependantProperties = [];\n      var value = obj[propName];\n\n      var getter = function getter() {\n        var QMLProperty = QmlWeb.QMLProperty;\n        if (QMLProperty.evaluatingProperty && dependantProperties.indexOf(QMLProperty.evaluatingProperty) === -1) {\n          dependantProperties.push(QMLProperty.evaluatingProperty);\n        }\n        return value;\n      };\n\n      var setter = function setter(newVal) {\n        value = newVal;\n        for (var i in dependantProperties) {\n          dependantProperties[i].update();\n        }\n      };\n\n      QmlWeb.setupGetterSetter(obj, propName, getter, setter);\n    }\n  }, {\n    key: \"loadImports\",\n    value: function loadImports(importsArray) {\n      var currentFileDir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$basePath;\n      var importContextId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n\n      if (!this.qmldirsContents) {\n        this.qmldirsContents = {}; // cache\n\n        // putting initial keys in qmldirsContents - is a hack. We should find a\n        // way to explain to qmlweb, is this built-in module or qmldir-style\n        // module.\n        for (var module in QmlWeb.modules) {\n          if (module !== \"Main\") {\n            this.qmldirsContents[module] = {};\n          }\n        }\n      }\n\n      if (!this.qmldirs) {\n        this.qmldirs = {}; // resulting components lookup table\n      }\n\n      if (!importsArray || importsArray.length === 0) {\n        return;\n      }\n\n      for (var i = 0; i < importsArray.length; i++) {\n        this.loadImport(importsArray[i], currentFileDir, importContextId);\n      }\n    }\n  }, {\n    key: \"loadImport\",\n    value: function loadImport(entry, currentFileDir, importContextId) {\n      var name = entry[1];\n\n      // is it url to remote resource\n      var nameIsUrl = name.indexOf(\"//\") === 0 || name.indexOf(\"://\") >= 0;\n      // is it a module name, e.g. QtQuick, QtQuick.Controls, etc\n      var nameIsQualifiedModuleName = entry[4];\n      // local [relative] dir\n      var nameIsDir = !nameIsQualifiedModuleName && !nameIsUrl;\n\n      if (nameIsDir) {\n        name = this.$resolvePath(name, currentFileDir);\n        if (name[name.length - 1] === \"/\") {\n          // remove trailing slash as it required for `readQmlDir`\n          name = name.substr(0, name.length - 1);\n        }\n      }\n\n      var content = this.qmldirsContents[name];\n      // check if we have already loaded that qmldir file\n      if (!content) {\n        if (nameIsQualifiedModuleName && this.userAddedModulePaths[name]) {\n          // 1. we have qualified module and user had configured path for that\n          // module with this.addModulePath\n          content = QmlWeb.readQmlDir(this.userAddedModulePaths[name]);\n        } else if (nameIsUrl || nameIsDir) {\n          // 2. direct load\n          // nameIsUrl => url do not need dirs\n          // nameIsDir => already computed full path above\n          content = QmlWeb.readQmlDir(name);\n        } else {\n          // 3. qt-style lookup for qualified module\n          var probableDirs = [currentFileDir].concat(this.importPathList());\n          var diredName = name.replace(/\\./g, \"/\");\n\n          for (var k = 0; k < probableDirs.length; k++) {\n            var file = probableDirs[k] + diredName;\n            content = QmlWeb.readQmlDir(file);\n            if (content) {\n              break;\n            }\n          }\n        }\n        this.qmldirsContents[name] = content;\n      }\n\n      /* If there is no qmldir, add these directories to the list of places to\n        * search for components (within this import scope). \"noqmldir\" is\n        * inserted into the qmldir cache to avoid future attempts at fetching\n        * the qmldir file, but we always need to the call to\n        * \"addComponentImportPath\" for these sorts of directories. */\n      if (!content || content === \"noqmldir\") {\n        if (nameIsDir) {\n          if (entry[3]) {\n            /* Use entry[1] directly, as we don't want to include the\n              * basePath, otherwise it gets prepended twice in\n              * createComponent. */\n            this.addComponentImportPath(importContextId, entry[1] + \"/\", entry[3]);\n          } else {\n            this.addComponentImportPath(importContextId, name + \"/\");\n          }\n        }\n\n        this.qmldirsContents[name] = \"noqmldir\";\n        return;\n      }\n\n      // copy founded externals to global var\n      // TODO actually we have to copy it to current component\n      for (var attrname in content.externals) {\n        this.qmldirs[attrname] = content.externals[attrname];\n      }\n\n      // keep already loaded qmldir files\n      this.qmldirsContents[name] = content;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return {\n        width: this.rootObject.getWidth(),\n        height: this.rootObject.getHeight()\n      };\n    }\n  }, {\n    key: \"focusedElement\",\n    value: function focusedElement() {\n      return this.rootContext().activeFocus;\n    }\n\n    //---------- Private Methods ----------\n\n  }, {\n    key: \"$initKeyboard\",\n    value: function $initKeyboard() {\n      var _this3 = this;\n\n      document.onkeypress = function (e) {\n        var focusedElement = _this3.focusedElement();\n        var event = QmlWeb.eventToKeyboard(e || window.event);\n        var eventName = QmlWeb.keyboardSignals[event.key];\n\n        while (focusedElement && !event.accepted) {\n          var backup = focusedElement.$context.event;\n          focusedElement.$context.event = event;\n          focusedElement.Keys.pressed(event);\n          if (eventName) {\n            focusedElement.Keys[eventName](event);\n          }\n          focusedElement.$context.event = backup;\n          if (event.accepted) {\n            e.preventDefault();\n          } else {\n            focusedElement = focusedElement.$parent;\n          }\n        }\n      };\n\n      document.onkeyup = function (e) {\n        var focusedElement = _this3.focusedElement();\n        var event = QmlWeb.eventToKeyboard(e || window.event);\n\n        while (focusedElement && !event.accepted) {\n          var backup = focusedElement.$context.event;\n          focusedElement.$context.event = event;\n          focusedElement.Keys.released(event);\n          focusedElement.$context.event = backup;\n          if (event.accepted) {\n            e.preventDefault();\n          } else {\n            focusedElement = focusedElement.$parent;\n          }\n        }\n      };\n    }\n  }, {\n    key: \"_tick\",\n    value: function _tick() {\n      var now = Date.now();\n      var elapsed = now - this._lastTick;\n      this._lastTick = now;\n      this._tickers.forEach(function (ticker) {\n        return ticker(now, elapsed);\n      });\n    }\n\n    // Load resolved file, parse and construct as Component (.qml)\n\n  }, {\n    key: \"loadComponent\",\n    value: function loadComponent(file) {\n      if (file in this.components) {\n        return this.components[file];\n      }\n\n      var uri = this.$parseURI(file);\n      if (!uri) {\n        return undefined;\n      }\n\n      var tree = void 0;\n      if (uri.scheme === \"qrc://\") {\n        tree = QmlWeb.qrc[uri.path];\n        if (!tree) {\n          return undefined;\n        }\n        // QmlWeb.qrc contains pre-parsed Component objects, but they still need\n        // convertToEngine called on them.\n        tree = QmlWeb.convertToEngine(tree);\n      } else {\n        var src = QmlWeb.getUrlContents(file, true);\n        if (!src) {\n          console.error(\"QMLEngine.loadComponent: Failed to load:\", file);\n          return undefined;\n        }\n\n        console.log(\"QMLEngine.loadComponent: Loading file:\", file);\n        tree = QmlWeb.parseQML(src, file);\n      }\n\n      if (!tree) {\n        return undefined;\n      }\n\n      if (tree.$children.length !== 1) {\n        console.error(\"QMLEngine.loadComponent: Failed to load:\", file, \": A QML component must only contain one root element!\");\n        return undefined;\n      }\n\n      tree.$file = file;\n      this.components[file] = tree;\n      return tree;\n    }\n\n    // Load resolved file and parse as JavaScript\n\n  }, {\n    key: \"loadJS\",\n    value: function loadJS(file) {\n      if (file in this.js) {\n        return this.js[file];\n      }\n\n      var uri = this.$parseURI(file);\n      if (!uri) {\n        return undefined;\n      }\n\n      if (uri.scheme === \"qrc://\") {\n        return QmlWeb.qrc[uri.path];\n      }\n\n      QmlWeb.loadParser();\n      return QmlWeb.jsparse(QmlWeb.getUrlContents(file));\n    }\n  }, {\n    key: \"$registerStart\",\n    value: function $registerStart(f) {\n      this._whenStart.push(f);\n    }\n  }, {\n    key: \"$registerStop\",\n    value: function $registerStop(f) {\n      this._whenStop.push(f);\n    }\n  }, {\n    key: \"$addTicker\",\n    value: function $addTicker(t) {\n      this._tickers.push(t);\n    }\n  }, {\n    key: \"$removeTicker\",\n    value: function $removeTicker(t) {\n      var index = this._tickers.indexOf(t);\n      if (index !== -1) {\n        this._tickers.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"$initializePropertyBindings\",\n    value: function $initializePropertyBindings() {\n      // Initialize property bindings\n      // we use `while`, because $initializePropertyBindings may be called\n      // recursive (because of Loader and/or createQmlObject )\n      while (this.bindedProperties.length > 0) {\n        var property = this.bindedProperties.shift();\n\n        if (!property.binding) {\n          // Probably, the binding was overwritten by an explicit value. Ignore.\n          continue;\n        }\n\n        if (property.needsUpdate) {\n          property.update();\n        } else if (geometryProperties.indexOf(property.name) >= 0) {\n          // It is possible that bindings with these names was already evaluated\n          // during eval of other bindings but in that case $updateHGeometry and\n          // $updateVGeometry could be blocked during their eval.\n          // So we call them explicitly, just in case.\n          var obj = property.obj,\n              changed = property.changed;\n\n          if (obj.$updateHGeometry && changed.isConnected(obj, obj.$updateHGeometry)) {\n            obj.$updateHGeometry(property.val, property.val, property.name);\n          }\n          if (obj.$updateVGeometry && changed.isConnected(obj, obj.$updateVGeometry)) {\n            obj.$updateVGeometry(property.val, property.val, property.name);\n          }\n        }\n      }\n\n      this.$initializeAliasSignals();\n    }\n\n    // This parses the full URL into scheme, authority and path\n\n  }, {\n    key: \"$parseURI\",\n    value: function $parseURI(uri) {\n      var match = uri.match(/^([^/]*?:\\/\\/)(.*?)(\\/.*)$/);\n      if (match) {\n        return {\n          scheme: match[1],\n          authority: match[2],\n          path: match[3]\n        };\n      }\n      return undefined;\n    }\n\n    // Return a path to load the file\n\n  }, {\n    key: \"$resolvePath\",\n    value: function $resolvePath(file) {\n      var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$basePath;\n\n      // probably, replace :// with :/ ?\n      if (!file || file.indexOf(\"://\") !== -1 || file.indexOf(\"data:\") === 0 || file.indexOf(\"blob:\") === 0) {\n        return file;\n      }\n\n      var basePathURI = this.$parseURI(basePath);\n      if (!basePathURI) {\n        return file;\n      }\n\n      var path = basePathURI.path;\n      if (file.indexOf(\"/\") === 0) {\n        path = file;\n      } else {\n        path = \"\" + path + file;\n      }\n\n      // Remove duplicate slashes and dot segments in the path\n      path = this.removeDotSegments(path.replace(/([^:]\\/)\\/+/g, \"$1\"));\n\n      return \"\" + basePathURI.scheme + basePathURI.authority + path;\n    }\n\n    // Return a DOM-valid path to load the image (fileURL is an already-resolved\n    // URL)\n\n  }, {\n    key: \"$resolveImageURL\",\n    value: function $resolveImageURL(fileURL) {\n      var uri = this.$parseURI(fileURL);\n      // If we are within the resource system, look up a \"real\" path that can be\n      // used by the DOM. If not found, return the path itself without the\n      // \"qrc://\" scheme.\n      if (uri && uri.scheme === \"qrc://\") {\n        return QmlWeb.qrc[uri.path] || uri.path;\n      }\n\n      // Something we can't parse, just pass it through\n      return fileURL;\n    }\n  }, {\n    key: \"$initializeAliasSignals\",\n    value: function $initializeAliasSignals() {\n      // Perform pending operations. Now we use it only to init alias's \"changed\"\n      // handlers, that's why we have such strange function name.\n      while (this.pendingOperations.length > 0) {\n        var op = this.pendingOperations.shift();\n        op[0](op[1], op[2], op[3]);\n      }\n      this.pendingOperations = [];\n    }\n  }, {\n    key: \"callCompletedSignals\",\n    value: function callCompletedSignals() {\n      // the while loop is better than for..in loop, because completedSignals\n      // array might change dynamically when some completed signal handlers will\n      // create objects dynamically via createQmlObject or Loader\n      while (this.completedSignals.length > 0) {\n        var handler = this.completedSignals.shift();\n        handler();\n      }\n    }\n  }]);\n\n  return QMLEngine;\n}();\n\nQmlWeb.QMLEngine = QMLEngine;\n\nfunction QMLInteger(val) {\n  return val | 0;\n}\nQMLInteger.plainType = true;\nQmlWeb.qmlInteger = QMLInteger;\n\nfunction QMLList(meta) {\n  var list = [];\n  if (meta.object instanceof Array) {\n    for (var i in meta.object) {\n      list.push(QmlWeb.construct({\n        object: meta.object[i],\n        parent: meta.parent,\n        context: meta.context\n      }));\n    }\n  } else if (meta.object instanceof QmlWeb.QMLMetaElement) {\n    list.push(QmlWeb.construct({\n      object: meta.object,\n      parent: meta.parent,\n      context: meta.context\n    }));\n  }\n\n  return list;\n}\nQMLList.plainType = true;\nQmlWeb.qmlList = QMLList;\n\nfunction QMLNumber(val) {\n  return +val;\n}\nQMLNumber.plainType = true;\nQmlWeb.qmlNumber = QMLNumber;\n\nvar QMLOperationState = {\n  Idle: 1,\n  Init: 2,\n  Running: 3\n};\n\nQmlWeb.QMLOperationState = QMLOperationState;\n\nvar QMLProperty = function () {\n  function QMLProperty(type, obj, name) {\n    _classCallCheck(this, QMLProperty);\n\n    this.obj = obj;\n    this.name = name;\n    this.changed = QmlWeb.Signal.signal([], { obj: obj });\n    this.binding = null;\n    this.objectScope = null;\n    this.componentScope = null;\n    this.value = undefined;\n    this.type = type;\n    this.animation = null;\n    this.needsUpdate = true;\n\n    // This list contains all signals that hold references to this object.\n    // It is needed when deleting, as we need to tidy up all references to this\n    // object.\n    this.$tidyupList = [];\n  }\n\n  // Called by update and set to actually set this.val, performing any type\n  // conversion required.\n\n\n  _createClass(QMLProperty, [{\n    key: \"$setVal\",\n    value: function $setVal(val, componentScope) {\n      var constructors = QmlWeb.constructors;\n      if (constructors[this.type] === QmlWeb.qmlList) {\n        this.val = QmlWeb.qmlList({\n          object: val,\n          parent: this.obj,\n          context: componentScope\n        });\n      } else if (val instanceof QmlWeb.QMLMetaElement) {\n        var _QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n        if (constructors[val.$class] === _QMLComponent || constructors[this.type] === _QMLComponent) {\n          this.val = new _QMLComponent({\n            object: val,\n            parent: this.obj,\n            context: componentScope\n          });\n          /* $basePath must be set here so that Components that are assigned to\n           * properties (e.g. Repeater delegates) can properly resolve child\n           * Components that live in the same directory in\n           * Component.createObject. */\n          this.val.$basePath = componentScope.$basePath;\n        } else {\n          this.val = QmlWeb.construct({\n            object: val,\n            parent: this.obj,\n            context: componentScope\n          });\n        }\n      } else if (val instanceof Object || val === undefined || val === null) {\n        this.val = val;\n      } else if (constructors[this.type].plainType) {\n        this.val = constructors[this.type](val);\n      } else {\n        this.val = new constructors[this.type](val);\n      }\n    }\n\n    // Updater recalculates the value of a property if one of the dependencies\n    // changed\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.needsUpdate = false;\n\n      if (!this.binding) {\n        return;\n      }\n\n      var oldVal = this.val;\n\n      try {\n        QMLProperty.pushEvaluatingProperty(this);\n        if (!this.binding.compiled) {\n          this.binding.compile();\n        }\n        this.$setVal(this.binding.eval(this.objectScope, this.componentScope, this.componentScopeBasePath), this.componentScope);\n      } catch (e) {\n        console.log(\"QMLProperty.update binding error:\", e, Function.prototype.toString.call(this.binding.eval));\n      } finally {\n        QMLProperty.popEvaluatingProperty();\n      }\n\n      if (this.animation) {\n        this.animation.$actions = [{\n          target: this.animation.target || this.obj,\n          property: this.animation.property || this.name,\n          from: this.animation.from || oldVal,\n          to: this.animation.to || this.val\n        }];\n        this.animation.restart();\n      }\n\n      if (this.val !== oldVal) {\n        this.changed(this.val, oldVal, this.name);\n      }\n    }\n\n    // Define getter\n\n  }, {\n    key: \"get\",\n    value: function get() {\n      //if (this.needsUpdate && !QMLProperty.evaluatingPropertyPaused) {\n      if (this.needsUpdate && QmlWeb.engine.operationState !== QmlWeb.QMLOperationState.Init) {\n        this.update();\n      }\n\n      // If this call to the getter is due to a property that is dependant on this\n      // one, we need it to take track of changes\n      if (QMLProperty.evaluatingProperty) {\n        //console.log(this,QMLProperty.evaluatingPropertyStack.slice(0),this.val);\n        this.changed.connect(QMLProperty.evaluatingProperty, QMLProperty.prototype.update, QmlWeb.Signal.UniqueConnection);\n      }\n\n      if (this.val && this.val.$get) {\n        return this.val.$get();\n      }\n\n      return this.val;\n    }\n    // Define setter\n\n  }, {\n    key: \"set\",\n    value: function set(newVal, reason, objectScope, componentScope) {\n      var oldVal = this.val;\n\n      var val = newVal;\n      if (val instanceof QmlWeb.QMLBinding) {\n        if (!objectScope || !componentScope) {\n          throw new Error(\"Internal error: binding assigned without scope\");\n        }\n        this.binding = val;\n        this.objectScope = objectScope;\n        this.componentScope = componentScope;\n        this.componentScopeBasePath = componentScope.$basePath;\n\n        if (QmlWeb.engine.operationState !== QmlWeb.QMLOperationState.Init) {\n          if (!val.compiled) {\n            val.compile();\n          }\n          try {\n            QMLProperty.pushEvaluatingProperty(this);\n            this.needsUpdate = false;\n            val = this.binding.eval(objectScope, componentScope, this.componentScopeBasePath);\n          } finally {\n            QMLProperty.popEvaluatingProperty();\n          }\n        } else {\n          QmlWeb.engine.bindedProperties.push(this);\n          return;\n        }\n      } else {\n        if (reason !== QMLProperty.ReasonAnimation) {\n          this.binding = null;\n        }\n        if (val instanceof Array) {\n          val = val.slice(); // Copies the array\n        }\n      }\n\n      if (reason === QMLProperty.ReasonInit && typeof val === \"undefined\") {\n        if (QMLProperty.typeInitialValues.hasOwnProperty(this.type)) {\n          val = QMLProperty.typeInitialValues[this.type];\n        }\n      }\n\n      this.$setVal(val, componentScope);\n\n      if (this.val !== oldVal) {\n        if (this.animation && reason === QMLProperty.ReasonUser) {\n          this.animation.running = false;\n          this.animation.$actions = [{\n            target: this.animation.target || this.obj,\n            property: this.animation.property || this.name,\n            from: this.animation.from || oldVal,\n            to: this.animation.to || this.val\n          }];\n          this.animation.running = true;\n        }\n        if (this.obj.$syncPropertyToRemote instanceof Function && reason === QMLProperty.ReasonUser) {\n          // is a remote object from e.g. a QWebChannel\n          this.obj.$syncPropertyToRemote(this.name, val);\n        } else {\n          this.changed(this.val, oldVal, this.name);\n        }\n      }\n    }\n  }], [{\n    key: \"pushEvalStack\",\n    value: function pushEvalStack() {\n      QMLProperty.evaluatingPropertyStackOfStacks.push(QMLProperty.evaluatingPropertyStack);\n      QMLProperty.evaluatingPropertyStack = [];\n      QMLProperty.evaluatingProperty = undefined;\n      //  console.log(\"evaluatingProperty=>undefined due to push stck \");\n    }\n  }, {\n    key: \"popEvalStack\",\n    value: function popEvalStack() {\n      QMLProperty.evaluatingPropertyStack = QMLProperty.evaluatingPropertyStackOfStacks.pop() || [];\n      QMLProperty.evaluatingProperty = QMLProperty.evaluatingPropertyStack[QMLProperty.evaluatingPropertyStack.length - 1];\n    }\n  }, {\n    key: \"pushEvaluatingProperty\",\n    value: function pushEvaluatingProperty(prop) {\n      // TODO say warnings if already on stack. This means binding loop.\n      // BTW actually we do not loop because needsUpdate flag is reset before\n      // entering update again.\n      if (QMLProperty.evaluatingPropertyStack.indexOf(prop) >= 0) {\n        console.error(\"Property binding loop detected for property\", prop.name, [prop].slice(0));\n      }\n      QMLProperty.evaluatingProperty = prop;\n      QMLProperty.evaluatingPropertyStack.push(prop); //keep stack of props\n    }\n  }, {\n    key: \"popEvaluatingProperty\",\n    value: function popEvaluatingProperty() {\n      QMLProperty.evaluatingPropertyStack.pop();\n      QMLProperty.evaluatingProperty = QMLProperty.evaluatingPropertyStack[QMLProperty.evaluatingPropertyStack.length - 1];\n    }\n  }]);\n\n  return QMLProperty;\n}();\n\n// Property that is currently beeing evaluated. Used to get the information\n// which property called the getter of a certain other property for\n// evaluation and is thus dependant on it.\n\n\nQMLProperty.evaluatingProperty = undefined;\nQMLProperty.evaluatingPropertyPaused = false;\nQMLProperty.evaluatingPropertyStack = [];\nQMLProperty.evaluatingPropertyStackOfStacks = [];\n\nQMLProperty.typeInitialValues = {\n  int: 0,\n  real: 0,\n  double: 0,\n  string: \"\",\n  bool: false,\n  list: [],\n  enum: 0,\n  url: \"\"\n};\n\nQMLProperty.ReasonUser = 0;\nQMLProperty.ReasonInit = 1;\nQMLProperty.ReasonAnimation = 2;\n\nQmlWeb.QMLProperty = QMLProperty;\n\nfunction QMLString(val) {\n  return \"\" + val;\n}\nQMLString.plainType = true;\nQmlWeb.qmlString = QMLString;\n\nfunction QMLUrl(val) {\n  return QmlWeb.engine.$resolvePath(\"\" + val);\n}\nQMLUrl.plainType = true;\nQmlWeb.qmlUrl = QMLUrl;\n\nfunction QMLVariant(val) {\n  return val;\n}\nQMLVariant.plainType = true;\nQmlWeb.qmlVariant = QMLVariant;\n\nwindow.addEventListener(\"load\", function () {\n  var metaTags = document.getElementsByTagName(\"body\");\n  for (var i = 0; i < metaTags.length; ++i) {\n    var metaTag = metaTags[i];\n    var source = metaTag.getAttribute(\"data-qml\");\n    if (source) {\n      QmlWeb.qmlEngine = new QmlWeb.QMLEngine();\n      QmlWeb.qmlEngine.loadFile(source);\n      QmlWeb.qmlEngine.start();\n      break;\n    }\n  }\n});\n\nvar Easing = {\n  Linear: 1,\n  InQuad: 2, OutQuad: 3, InOutQuad: 4, OutInQuad: 5,\n  InCubic: 6, OutCubic: 7, InOutCubic: 8, OutInCubic: 9,\n  InQuart: 10, OutQuart: 11, InOutQuart: 12, OutInQuart: 13,\n  InQuint: 14, OutQuint: 15, InOutQuint: 16, OutInQuint: 17,\n  InSine: 18, OutSine: 19, InOutSine: 20, OutInSine: 21,\n  InExpo: 22, OutExpo: 23, InOutExpo: 24, OutInExpo: 25,\n  InCirc: 26, OutCirc: 27, InOutCirc: 28, OutInCirc: 29,\n  InElastic: 30, OutElastic: 31, InOutElastic: 32, OutInElastic: 33,\n  InBack: 34, OutBack: 35, InOutBack: 36, OutInBack: 37,\n  InBounce: 38, OutBounce: 39, InOutBounce: 40, OutInBounce: 41\n};\n\n// eslint-disable-next-line complexity\nQmlWeb.$ease = function (type, period, amplitude, overshoot, t) {\n  switch (type) {\n    // Linear\n    case Easing.Linear:\n      return t;\n\n    // Quad\n    case Easing.InQuad:\n      return Math.pow(t, 2);\n    case Easing.OutQuad:\n      return -Math.pow(t - 1, 2) + 1;\n    case Easing.InOutQuad:\n      if (t < 0.5) {\n        return 2 * Math.pow(t, 2);\n      }\n      return -2 * Math.pow(t - 1, 2) + 1;\n    case Easing.OutInQuad:\n      if (t < 0.5) {\n        return -2 * Math.pow(t - 0.5, 2) + 0.5;\n      }\n      return 2 * Math.pow(t - 0.5, 2) + 0.5;\n\n    // Cubic\n    case Easing.InCubic:\n      return Math.pow(t, 3);\n    case Easing.OutCubic:\n      return Math.pow(t - 1, 3) + 1;\n    case Easing.InOutCubic:\n      if (t < 0.5) {\n        return 4 * Math.pow(t, 3);\n      }\n      return 4 * Math.pow(t - 1, 3) + 1;\n    case Easing.OutInCubic:\n      return 4 * Math.pow(t - 0.5, 3) + 0.5;\n\n    // Quart\n    case Easing.InQuart:\n      return Math.pow(t, 4);\n    case Easing.OutQuart:\n      return -Math.pow(t - 1, 4) + 1;\n    case Easing.InOutQuart:\n      if (t < 0.5) {\n        return 8 * Math.pow(t, 4);\n      }\n      return -8 * Math.pow(t - 1, 4) + 1;\n    case Easing.OutInQuart:\n      if (t < 0.5) {\n        return -8 * Math.pow(t - 0.5, 4) + 0.5;\n      }\n      return 8 * Math.pow(t - 0.5, 4) + 0.5;\n\n    // Quint\n    case Easing.InQuint:\n      return Math.pow(t, 5);\n    case Easing.OutQuint:\n      return Math.pow(t - 1, 5) + 1;\n    case Easing.InOutQuint:\n      if (t < 0.5) {\n        return 16 * Math.pow(t, 5);\n      }\n      return 16 * Math.pow(t - 1, 5) + 1;\n    case Easing.OutInQuint:\n      if (t < 0.5) {\n        return 16 * Math.pow(t - 0.5, 5) + 0.5;\n      }\n      return 16 * Math.pow(t - 0.5, 5) + 0.5;\n\n    // Sine\n    case Easing.InSine:\n      return -Math.cos(0.5 * Math.PI * t) + 1;\n    case Easing.OutSine:\n      return Math.sin(0.5 * Math.PI * t);\n    case Easing.InOutSine:\n      return -0.5 * Math.cos(Math.PI * t) + 0.5;\n    case Easing.OutInSine:\n      if (t < 0.5) {\n        return 0.5 * Math.sin(Math.PI * t);\n      }\n      return -0.5 * Math.sin(Math.PI * t) + 1;\n\n    // Expo\n    case Easing.InExpo:\n      return 1 / 1023 * (Math.pow(2, 10 * t) - 1);\n    case Easing.OutExpo:\n      return -1024 / 1023 * (Math.pow(2, -10 * t) - 1);\n    case Easing.InOutExpo:\n      if (t < 0.5) {\n        return 1 / 62 * (Math.pow(2, 10 * t) - 1);\n      }\n      return -512 / 31 * Math.pow(2, -10 * t) + 63 / 62;\n    case Easing.OutInExpo:\n      if (t < 0.5) {\n        return -16 / 31 * (Math.pow(2, -10 * t) - 1);\n      }\n      return 1 / 1984 * Math.pow(2, 10 * t) + 15 / 31;\n\n    // Circ\n    case Easing.InCirc:\n      return 1 - Math.sqrt(1 - t * t);\n    case Easing.OutCirc:\n      return Math.sqrt(1 - Math.pow(t - 1, 2));\n    case Easing.InOutCirc:\n      if (t < 0.5) {\n        return 0.5 * (1 - Math.sqrt(1 - 4 * t * t));\n      }\n      return 0.5 * (Math.sqrt(1 - 4 * Math.pow(t - 1, 2)) + 1);\n    case Easing.OutInCirc:\n      if (t < 0.5) {\n        return 0.5 * Math.sqrt(1 - Math.pow(2 * t - 1, 2));\n      }\n      return 0.5 * (2 - Math.sqrt(1 - Math.pow(2 * t - 1, 2)));\n\n    // Elastic\n    case Easing.InElastic:\n      return -amplitude * Math.pow(2, 10 * t - 10) * Math.sin(2 * t * Math.PI / period - Math.asin(1 / amplitude));\n    case Easing.OutElastic:\n      return amplitude * Math.pow(2, -10 * t) * Math.sin(2 * t * Math.PI / period - Math.asin(1 / amplitude)) + 1;\n    case Easing.InOutElastic:\n      if (t < 0.5) {\n        return -0.5 * amplitude * Math.pow(2, 20 * t - 10) * Math.sin(4 * t * Math.PI / period - Math.asin(1 / amplitude));\n      }\n      return -0.5 * amplitude * Math.pow(2, -20 * t + 10) * Math.sin(4 * t * Math.PI / period + Math.asin(1 / amplitude)) + 1;\n    case Easing.OutInElastic:\n      if (t < 0.5) {\n        return 0.5 * amplitude * Math.pow(2, -20 * t) * Math.sin(4 * t * Math.PI / period - Math.asin(1 / amplitude)) + 0.5;\n      }\n      return -0.5 * amplitude * Math.pow(2, 20 * t - 20) * Math.sin(4 * t * Math.PI / period - Math.asin(1 / amplitude)) + 0.5;\n\n    // Back\n    case Easing.InBack:\n      return (overshoot + 1) * Math.pow(t, 3) - overshoot * Math.pow(t, 2);\n    case Easing.OutBack:\n      return (overshoot + 1) * Math.pow(t - 1, 3) + overshoot * Math.pow(t - 1, 2) + 1;\n    case Easing.InOutBack:\n      if (t < 0.5) {\n        return 4 * (overshoot + 1) * Math.pow(t, 3) - 2 * overshoot * Math.pow(t, 2);\n      }\n      return 0.5 * (overshoot + 1) * Math.pow(2 * t - 2, 3) + overshoot / 2 * Math.pow(2 * t - 2, 2) + 1;\n    case Easing.OutInBack:\n      if (t < 0.5) {\n        return 0.5 * ((overshoot + 1) * Math.pow(2 * t - 1, 3) + overshoot * Math.pow(2 * t - 1, 2) + 1);\n      }\n      return 4 * (overshoot + 1) * Math.pow(t - 0.5, 3) - 2 * overshoot * Math.pow(t - 0.5, 2) + 0.5;\n    // Bounce\n    case Easing.InBounce:\n      if (t < 1 / 11) {\n        return -amplitude * 121 / 16 * (t * t - 1 / 11 * t);\n      } else if (t < 3 / 11) {\n        return -amplitude * 121 / 16 * (t * t - 4 / 11 * t + 3 / 121);\n      } else if (t < 7 / 11) {\n        return -amplitude * 121 / 16 * (t * t - 10 / 11 * t + 21 / 121);\n      }\n      return -(121 / 16) * (t * t - 2 * t + 1) + 1;\n    case Easing.OutBounce:\n      if (t < 4 / 11) {\n        return 121 / 16 * t * t;\n      } else if (t < 8 / 11) {\n        return amplitude * (121 / 16) * (t * t - 12 / 11 * t + 32 / 121) + 1;\n      } else if (t < 10 / 11) {\n        return amplitude * (121 / 16) * (t * t - 18 / 11 * t + 80 / 121) + 1;\n      }\n      return amplitude * (121 / 16) * (t * t - 21 / 11 * t + 10 / 11) + 1;\n    case Easing.InOutBounce:\n      if (t < 1 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 1 / 22 * t);\n      } else if (t < 3 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 2 / 11 * t + 3 / 484);\n      } else if (t < 7 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 5 / 11 * t + 21 / 484);\n      } else if (t < 11 / 22) {\n        return -121 / 8 * (t * t - t + 0.25) + 0.5;\n      } else if (t < 15 / 22) {\n        return 121 / 8 * (t * t - t) + 137 / 32;\n      } else if (t < 19 / 22) {\n        return amplitude * 121 / 8 * (t * t - 17 / 11 * t + 285 / 484) + 1;\n      } else if (t < 21 / 22) {\n        return amplitude * 121 / 8 * (t * t - 20 / 11 * t + 399 / 484) + 1;\n      }\n      return amplitude * 121 / 8 * (t * t - 43 / 22 * t + 21 / 22) + 1;\n    case Easing.OutInBounce:\n      if (t < 4 / 22) {\n        return 121 / 8 * t * t;\n      } else if (t < 8 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 6 / 11 * t + 8 / 121) + 0.5;\n      } else if (t < 10 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 9 / 11 * t + 20 / 121) + 0.5;\n      } else if (t < 11 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 21 / 22 * t + 5 / 22) + 0.5;\n      } else if (t < 12 / 22) {\n        return amplitude * 121 / 8 * (t * t - 23 / 22 * t + 3 / 11) + 0.5;\n      } else if (t < 14 / 22) {\n        return amplitude * 121 / 8 * (t * t - 13 / 11 * t + 42 / 121) + 0.5;\n      } else if (t < 18 / 22) {\n        return amplitude * 121 / 8 * (t * t - 16 / 11 * t + 63 / 121) + 0.5;\n      }\n      return -121 / 8 * (t * t - 2 * t + 117 / 121) + 0.5;\n\n    // Default\n    default:\n      console.error(\"Unsupported animation type: \", type);\n      return t;\n  }\n};\n\nQmlWeb.Easing = Easing;\n\n/* eslint accessor-pairs: 0 */\n\nfunction setupGetter(obj, propName, func) {\n  Object.defineProperty(obj, propName, {\n    get: func,\n    configurable: true,\n    enumerable: true\n  });\n}\n\nfunction setupSetter(obj, propName, func) {\n  Object.defineProperty(obj, propName, {\n    set: func,\n    configurable: true,\n    enumerable: false\n  });\n}\n\nfunction setupGetterSetter(obj, propName, getter, setter) {\n  Object.defineProperty(obj, propName, {\n    get: getter,\n    set: setter,\n    configurable: true,\n    enumerable: false\n  });\n}\n\nQmlWeb.setupGetter = setupGetter;\nQmlWeb.setupSetter = setupSetter;\nQmlWeb.setupGetterSetter = setupGetterSetter;\n\nvar QmlWebHelpers = function () {\n  function QmlWebHelpers() {\n    _classCallCheck(this, QmlWebHelpers);\n  }\n\n  _createClass(QmlWebHelpers, null, [{\n    key: \"arrayFindIndex\",\n    value: function arrayFindIndex(array, callback) {\n      // Note: does not support thisArg, we don't need that\n      if (!Array.prototype.findIndex) {\n        for (var key in array) {\n          if (callback(array[key], key, array)) {\n            return key;\n          }\n        }\n        return -1;\n      }\n      return Array.prototype.findIndex.call(array, callback);\n    }\n  }, {\n    key: \"mergeObjects\",\n    value: function mergeObjects() {\n      var merged = {};\n\n      for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      for (var i in args) {\n        var arg = args[i];\n        if (!arg) {\n          continue;\n        }\n        for (var key in arg) {\n          merged[key] = arg[key];\n        }\n      }\n      return merged;\n    }\n  }]);\n\n  return QmlWebHelpers;\n}();\n\nQmlWeb.helpers = QmlWebHelpers;\n\n/* @license\n\nMIT License\n\nCopyright (c) 2011 Lauri Paimen <lauri@paimen.info>\nCopyright (c) 2015 Pavel Vasev <pavel.vasev@gmail.com> - initial and working\n                                                         import implementation.\nCopyright (c) 2016 QmlWeb contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/**\n * Get URL contents.\n * @param url {String} Url to fetch.\n * @param skipExceptions {bool} when turned on, ignore exeptions and return\n *        false. This feature is used by readQmlDir.\n * @private\n * @return {mixed} String of contents or false in errors.\n */\nfunction getUrlContents(url, skipExceptions) {\n  if (typeof QmlWeb.urlContentCache[url] === \"undefined\") {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url, false);\n\n    if (skipExceptions) {\n      try {\n        xhr.send(null);\n      } catch (e) {\n        return false;\n      }\n      // it is OK to not have logging here, because DeveloperTools already will\n      // have red log record\n    } else {\n      xhr.send(null);\n    }\n\n    if (xhr.status !== 200 && xhr.status !== 0) {\n      // 0 if accessing with file://\n      console.log(\"Retrieving \" + url + \" failed: \" + xhr.responseText, xhr);\n      return false;\n    }\n    QmlWeb.urlContentCache[url] = xhr.responseText;\n  }\n  return QmlWeb.urlContentCache[url];\n}\nif (typeof QmlWeb.urlContentCache === \"undefined\") {\n  QmlWeb.urlContentCache = {};\n}\n\n/**\n * Read qmldir spec file at directory.\n * @param url Url of the directory\n * @return {Object} Object, where .internals lists qmldir internal references\n *                          and .externals lists qmldir external references.\n */\n\n/*  Note on how importing works.\n\nparseQML gives us `tree.$imports` variable, which contains information from\n`import` statements.\n\nAfter each call to parseQML, we call engine.loadImports(tree.$imports).\nIt in turn invokes readQmlDir() calls for each import, with respect to current\ncomponent base path and engine.importPathList().\n\nWe keep all component names from all qmldir files in global variable\n`engine.qmldir`.\n\nIn construct() function, we use `engine.qmldir` for component url lookup.\n\nReference import info: http://doc.qt.io/qt-5/qtqml-syntax-imports.html\nAlso please look at notes and TODO's in qtcore.js::loadImports() and\nqtcore.js::construct() methods.\n*/\n\nfunction readQmlDir(url) {\n  // in case 'url' is empty, do not attach \"/\"\n  // Q1: when this happen?\n  var qmldirFileUrl = url.length > 0 ? url + \"/qmldir\" : \"qmldir\";\n\n  var parsedUrl = QmlWeb.engine.$parseURI(qmldirFileUrl);\n\n  var qmldir = void 0;\n  if (parsedUrl.scheme === \"qrc://\") {\n    qmldir = QmlWeb.qrc[parsedUrl.path];\n  } else {\n    qmldir = getUrlContents(qmldirFileUrl, true) || undefined;\n  }\n\n  var internals = {};\n  var externals = {};\n\n  if (qmldir === undefined) {\n    return false;\n  }\n\n  // we have to check for \"://\"\n  // In that case, item path is meant to be absolute, and we have no need to\n  // prefix it with base url\n  function makeurl(path) {\n    if (path.indexOf(\"://\") > 0) {\n      return path;\n    }\n    return url + \"/\" + path;\n  }\n\n  var lines = qmldir.split(/\\r?\\n/);\n  for (var i = 0; i < lines.length; i++) {\n    // trim\n    var line = lines[i].replace(/^\\s+|\\s+$/g, \"\");\n    if (!line.length || line[0] === \"#\") {\n      // Empty line or comment\n      continue;\n    }\n    var match = line.split(/\\s+/);\n    if (match.length === 2 || match.length === 3) {\n      if (match[0] === \"plugin\") {\n        console.log(url + \": qmldir plugins are not supported!\");\n      } else if (match[0] === \"internal\") {\n        internals[match[1]] = { url: makeurl(match[2]) };\n      } else if (match.length === 2) {\n        externals[match[0]] = { url: makeurl(match[1]) };\n      } else {\n        externals[match[0]] = { url: makeurl(match[2]), version: match[1] };\n      }\n    } else {\n      console.log(url + \": unmatched: \" + line);\n    }\n  }\n  return { internals: internals, externals: externals };\n}\n\nQmlWeb.getUrlContents = getUrlContents;\nQmlWeb.readQmlDir = readQmlDir;\n\nfunction importJavascriptInContext(jsData, $context) {\n  /* Remove any \".pragma\" statements, as they are not valid JavaScript */\n  var source = jsData.source.replace(/\\.pragma.*(?:\\r\\n|\\r|\\n)/, \"\\n\");\n  // TODO: pass more objects to the scope?\n  new Function(\"jsData\", \"$context\", \"\\n    with(QmlWeb) with ($context) {\\n      \" + source + \"\\n    }\\n    \" + jsData.exports.map(function (sym) {\n    return \"$context.\" + sym + \" = \" + sym + \";\";\n  }).join(\"\") + \"\\n  \")(jsData, $context);\n}\n\nQmlWeb.importJavascriptInContext = importJavascriptInContext;\n\nQmlWeb.keyCodeToQt = function (e) {\n  var Qt = QmlWeb.Qt;\n  e.keypad = e.keyCode >= 96 && e.keyCode <= 111;\n  if (e.keyCode === Qt.Key_Tab && e.shiftKey) {\n    return Qt.Key_Backtab;\n  }\n  if (e.keyCode >= 97 && e.keyCode <= 122) {\n    return e.keyCode - (97 - Qt.Key_A);\n  }\n  return e.keyCode;\n};\n\nQmlWeb.eventToKeyboard = function (e) {\n  return {\n    accepted: false,\n    count: 1,\n    isAutoRepeat: false,\n    key: QmlWeb.keyCodeToQt(e),\n    modifiers: e.ctrlKey * QmlWeb.Qt.CtrlModifier | e.altKey * QmlWeb.Qt.AltModifier | e.shiftKey * QmlWeb.Qt.ShiftModifier | e.metaKey * QmlWeb.Qt.MetaModifier | e.keypad * QmlWeb.Qt.KeypadModifier,\n    text: String.fromCharCode(e.charCode)\n  };\n};\n\nQmlWeb.keyboardSignals = {};\n[\"asterisk\", \"back\", \"backtab\", \"call\", \"cancel\", \"delete\", \"escape\", \"flip\", 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \"hangup\", \"menu\", \"no\", \"return\", \"select\", \"space\", \"tab\", \"volumeDown\", \"volumeUp\", \"yes\", \"up\", \"right\", \"down\", \"left\"].forEach(function (key) {\n  var name = key.toString();\n  var qtName = \"Key_\" + name[0].toUpperCase() + name.slice(1);\n  var prefix = typeof key === \"number\" ? \"digit\" : \"\";\n  QmlWeb.keyboardSignals[QmlWeb.Qt[qtName]] = \"\" + prefix + name + \"Pressed\";\n});\n\nQmlWeb.executionContext = null;\n\nvar modules = {\n  Main: {\n    int: QmlWeb.qmlInteger,\n    real: QmlWeb.qmlNumber,\n    double: QmlWeb.qmlNumber,\n    string: QmlWeb.qmlString,\n    bool: QmlWeb.qmlBoolean,\n    list: QmlWeb.qmlList,\n    color: QmlWeb.QColor,\n    enum: QmlWeb.qmlNumber,\n    url: QmlWeb.qmlUrl,\n    variant: QmlWeb.qmlVariant,\n    var: QmlWeb.qmlVariant\n  }\n};\n\n// All object constructors\nQmlWeb.constructors = modules.Main;\n\nvar dependants = {};\n\nvar perImportContextConstructors = {};\nvar importContextIds = 0;\n\n// Helper. Adds a type to the constructor list\nfunction registerGlobalQmlType(name, type) {\n  QmlWeb[type.name] = type;\n  QmlWeb.constructors[name] = type;\n  modules.Main[name] = type;\n}\n\n// Helper. Register a type to a module\nfunction registerQmlType(options, constructor) {\n  if (constructor !== undefined) {\n    options.constructor = constructor;\n  }\n\n  if (typeof options.baseClass === \"string\") {\n    var _ret = function () {\n      // TODO: Does not support version specification (yet?)\n      var baseModule = void 0;\n      var baseName = void 0;\n      var dot = options.baseClass.lastIndexOf(\".\");\n      if (dot === -1) {\n        baseModule = options.module;\n        baseName = options.baseClass;\n      } else {\n        baseModule = options.baseClass.substring(0, dot);\n        baseName = options.baseClass.substring(dot + 1);\n      }\n      var found = (modules[baseModule] || []).filter(function (descr) {\n        return descr.name === baseName;\n      });\n      if (found.length > 0) {\n        // Ok, we found our base class\n        options.baseClass = found[0].constructor;\n      } else {\n        // Base class not found, delay the loading\n        var baseId = [baseModule, baseName].join(\".\");\n        if (!dependants.hasOwnProperty(baseId)) {\n          dependants[baseId] = [];\n        }\n        dependants[baseId].push(options);\n        return {\n          v: void 0\n        };\n      }\n    }();\n\n    if ((typeof _ret === \"undefined\" ? \"undefined\" : _typeof(_ret)) === \"object\") return _ret.v;\n  }\n\n  var descriptor = typeof options === \"function\" ? {\n    module: options.module,\n    name: options.element,\n    versions: options.versions,\n    baseClass: options.baseClass,\n    enums: options.enums,\n    signals: options.signals,\n    defaultProperty: options.defaultProperty,\n    properties: options.properties,\n    constructor: options\n  } : options;\n\n  descriptor.constructor.$qmlTypeInfo = {\n    enums: descriptor.enums,\n    signals: descriptor.signals,\n    defaultProperty: descriptor.defaultProperty,\n    properties: descriptor.properties\n  };\n\n  if (descriptor.global) {\n    registerGlobalQmlType(descriptor.name, descriptor.constructor);\n  }\n\n  var moduleDescriptor = {\n    name: descriptor.name,\n    versions: descriptor.versions,\n    constructor: descriptor.constructor\n  };\n\n  if (typeof modules[descriptor.module] === \"undefined\") {\n    modules[descriptor.module] = [];\n  }\n  modules[descriptor.module].push(moduleDescriptor);\n\n  if (typeof descriptor.baseClass !== \"undefined\") {\n    inherit(descriptor.constructor, descriptor.baseClass);\n  }\n\n  var id = [descriptor.module, descriptor.name].join(\".\");\n  if (dependants.hasOwnProperty(id)) {\n    dependants[id].forEach(function (opt) {\n      return registerQmlType(opt);\n    });\n    dependants[id].length = 0;\n  }\n}\n\nfunction getConstructor(moduleName, version, name) {\n  if (typeof modules[moduleName] !== \"undefined\") {\n    for (var i = 0; i < modules[moduleName].length; ++i) {\n      var type = modules[moduleName][i];\n      if (type.name === name && type.versions.test(version)) {\n        return type.constructor;\n      }\n    }\n  }\n  return null;\n}\n\nfunction getModuleConstructors(moduleName, version) {\n  var constructors = {};\n  if (typeof modules[moduleName] === \"undefined\") {\n    console.warn(\"module \\\"\" + moduleName + \"\\\" not found\");\n    return constructors;\n  }\n  for (var i = 0; i < modules[moduleName].length; ++i) {\n    var module = modules[moduleName][i];\n    if (module.versions.test(version)) {\n      constructors[module.name] = module.constructor;\n    }\n  }\n  return constructors;\n}\n\nfunction loadImports(self, imports) {\n  var mergeObjects = QmlWeb.helpers.mergeObjects;\n  var constructors = mergeObjects(modules.Main);\n  if (imports.filter(function (row) {\n    return row[1] === \"QtQml\";\n  }).length === 0 && imports.filter(function (row) {\n    return row[1] === \"QtQuick\";\n  }).length === 1) {\n    imports.push([\"qmlimport\", \"QtQml\", 2, \"\", true]);\n  }\n  for (var i = 0; i < imports.length; ++i) {\n    var _imports$i = _slicedToArray(imports[i], 4),\n        moduleName = _imports$i[1],\n        moduleVersion = _imports$i[2],\n        moduleAlias = _imports$i[3];\n\n    var moduleConstructors = getModuleConstructors(moduleName, moduleVersion);\n\n    if (moduleAlias !== \"\") {\n      constructors[moduleAlias] = mergeObjects(constructors[moduleAlias], moduleConstructors);\n    } else {\n      constructors = mergeObjects(constructors, moduleConstructors);\n    }\n  }\n  self.importContextId = importContextIds++;\n  perImportContextConstructors[self.importContextId] = constructors;\n  QmlWeb.constructors = constructors; // TODO: why do we need this?\n}\n\nfunction inherit(constructor, baseClass) {\n  var oldProto = constructor.prototype;\n  constructor.prototype = Object.create(baseClass.prototype);\n  Object.getOwnPropertyNames(oldProto).forEach(function (prop) {\n    constructor.prototype[prop] = oldProto[prop];\n  });\n  constructor.prototype.constructor = baseClass;\n}\n\nfunction callSuper(self, meta) {\n  var info = meta.super.$qmlTypeInfo || {};\n  meta.super = meta.super.prototype.constructor;\n  meta.super.call(self, meta);\n\n  if (info.enums) {\n    // TODO: not exported to the whole file scope yet\n    Object.keys(info.enums).forEach(function (name) {\n      self[name] = info.enums[name];\n\n      if (!global[name]) {\n        global[name] = self[name]; // HACK\n      }\n    });\n  }\n  if (info.properties) {\n    Object.keys(info.properties).forEach(function (name) {\n      var desc = info.properties[name];\n      if (typeof desc === \"string\") {\n        desc = { type: desc };\n      }\n      QmlWeb.createProperty(desc.type, self, name, desc);\n    });\n  }\n  if (info.signals) {\n    Object.keys(info.signals).forEach(function (name) {\n      var params = info.signals[name];\n      self[name] = QmlWeb.Signal.signal(params);\n    });\n  }\n  if (info.defaultProperty) {\n    self.$defaultProperty = info.defaultProperty;\n  }\n}\n\n/**\n * QML Object constructor.\n * @param {Object} meta Meta information about the object and the creation\n *                      context\n * @return {Object} New qml object\n */\nfunction construct(meta) {\n  var item = void 0;\n\n  var constructors = perImportContextConstructors[meta.context.importContextId];\n\n  var classComponents = meta.object.$class.split(\".\");\n  for (var ci = 0; ci < classComponents.length; ++ci) {\n    var c = classComponents[ci];\n    constructors = constructors[c];\n    if (constructors === undefined) {\n      break;\n    }\n  }\n\n  if (constructors !== undefined) {\n    var _constructor = constructors;\n    meta.super = _constructor;\n    item = new _constructor(meta);\n    meta.super = undefined;\n  } else {\n    // Load component from file. Please look at import.js for main notes.\n    // Actually, we have to use that order:\n    // 1) try to load component from current basePath\n    // 2) from importPathList\n    // 3) from directories in imports statements and then\n    // 4) from qmldir files\n    // Currently we support only 1,2 and 4 and use order: 4,1,2\n    // TODO: engine.qmldirs is global for all loaded components.\n    //       That's not qml's original behaviour.\n    var qdirInfo = QmlWeb.engine.qmldirs[meta.object.$class];\n    // Are we have info on that component in some imported qmldir files?\n\n    /* This will also be set in applyProperties, but needs to be set here\n     * for Qt.createComponent to have the correct context. */\n    QmlWeb.executionContext = meta.context;\n\n    var filePath = void 0;\n    if (qdirInfo) {\n      filePath = qdirInfo.url;\n    } else if (classComponents.length === 2) {\n      var qualified = QmlWeb.engine.qualifiedImportPath(meta.context.importContextId, classComponents[0]);\n      filePath = \"\" + qualified + classComponents[1] + \".qml\";\n    } else {\n      filePath = classComponents[0] + \".qml\";\n    }\n\n    var component = QmlWeb.Qt.createComponent(filePath);\n\n    if (!component) {\n      throw new Error(\"No constructor found for \" + meta.object.$class);\n    }\n\n    item = component.$createObject(meta.parent);\n    if (typeof item.dom !== \"undefined\") {\n      item.dom.className += \" \" + classComponents[classComponents.length - 1];\n      if (meta.object.id) {\n        item.dom.className += \"  \" + meta.object.id;\n      }\n    }\n    // Handle default properties\n  }\n\n  // id\n  if (meta.object.id) {\n    QmlWeb.setupGetterSetter(meta.context, meta.object.id, function () {\n      return item;\n    }, function () {});\n  }\n\n  // keep path in item for probale use it later in Qt.resolvedUrl\n  item.$context.$basePath = QmlWeb.engine.$basePath; //gut\n\n  // We want to use the item's scope, but this Component's imports\n  item.$context.importContextId = meta.context.importContextId;\n\n  // Apply properties (Bindings won't get evaluated, yet)\n  QmlWeb.applyProperties(meta.object, item, item, item.$context);\n\n  return item;\n}\n\nQmlWeb.modules = modules;\nQmlWeb.registerGlobalQmlType = registerGlobalQmlType;\nQmlWeb.registerQmlType = registerQmlType;\nQmlWeb.getConstructor = getConstructor;\nQmlWeb.loadImports = loadImports;\nQmlWeb.callSuper = callSuper;\nQmlWeb.construct = construct;\n\n/**\n * Create property getters and setters for object.\n * @param {Object} obj Object for which gsetters will be set\n * @param {String} propName Property name\n * @param {Object} [options] Options that allow finetuning of the property\n */\nfunction createProperty(type, obj, propName) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  var QMLProperty = QmlWeb.QMLProperty;\n  var prop = new QMLProperty(type, obj, propName);\n  obj[propName + \"Changed\"] = prop.changed;\n  obj.$properties[propName] = prop;\n  obj.$properties[propName].set(options.initialValue, QMLProperty.ReasonInit);\n\n  var getter = function getter() {\n    return obj.$properties[propName].get();\n  };\n  var setter = void 0;\n  if (options.readOnly) {\n    setter = function setter(newVal) {\n      if (!obj.$canEditReadOnlyProperties) {\n        throw new Error(\"property '\" + propName + \"' has read only access\");\n      }\n      obj.$properties[propName].set(newVal, QMLProperty.ReasonUser);\n    };\n  } else {\n    setter = function setter(newVal) {\n      obj.$properties[propName].set(newVal, QMLProperty.ReasonUser);\n    };\n  }\n  QmlWeb.setupGetterSetter(obj, propName, getter, setter);\n  if (obj.$isComponentRoot) {\n    QmlWeb.setupGetterSetter(obj.$context, propName, getter, setter);\n  }\n}\n\n/**\n * Apply properties from metaObject to item.\n * @param {Object} metaObject Source of properties\n * @param {Object} item Target of property apply\n * @param {Object} objectScope Scope in which properties should be evaluated\n * @param {Object} componentScope Component scope in which properties should be\n *                 evaluated\n */\nfunction applyProperties(metaObject, item, objectScopeIn, componentScope) {\n  var QMLProperty = QmlWeb.QMLProperty;\n  var objectScope = objectScopeIn || item;\n  QmlWeb.executionContext = componentScope;\n\n  if (metaObject.$children && metaObject.$children.length !== 0) {\n    if (item.$defaultProperty) {\n      item.$properties[item.$defaultProperty].set(metaObject.$children, QMLProperty.ReasonInit, objectScope, componentScope);\n    } else {\n      throw new Error(\"Cannot assign to unexistant default property\");\n    }\n  }\n  // We purposefully set the default property AFTER using it, in order to only\n  // have it applied for instanciations of this component, but not for its\n  // internal children\n  if (metaObject.$defaultProperty) {\n    item.$defaultProperty = metaObject.$defaultProperty;\n  }\n\n  for (var i in metaObject) {\n    var value = metaObject[i];\n    if (i === \"id\" || i === \"$class\") {\n      // keep them\n      item[i] = value;\n      continue;\n    }\n\n    // skip global id's and internal values\n    if (i === \"id\" || i[0] === \"$\") {\n      // TODO: what? See above.\n      continue;\n    }\n\n    // slots\n    if (i.indexOf(\"on\") === 0 && i.length > 2 && /[A-Z]/.test(i[2])) {\n      var signalName = i[2].toLowerCase() + i.slice(3);\n      if (connectSignal(item, signalName, value, objectScope, componentScope)) {\n        continue;\n      }\n      if (item.$setCustomSlot) {\n        item.$setCustomSlot(signalName, value, objectScope, componentScope);\n        continue;\n      }\n    }\n\n    if (value instanceof Object) {\n      if (applyProperty(item, i, value, objectScope, componentScope)) {\n        continue;\n      }\n    }\n\n    if (item.$properties && i in item.$properties) {\n      item.$properties[i].set(value, QMLProperty.ReasonInit, objectScope, componentScope);\n    } else if (i in item) {\n      item[i] = value;\n    } else if (item.$setCustomData) {\n      item.$setCustomData(i, value);\n    } else {\n      console.warn(\"Cannot assign to non-existent property \\\"\" + i + \"\\\". Ignoring assignment.\");\n    }\n  }\n}\n\nfunction applyProperty(item, i, value, objectScope, componentScope) {\n  var QMLProperty = QmlWeb.QMLProperty;\n\n  if (value instanceof QmlWeb.QMLSignalDefinition) {\n    item[i] = QmlWeb.Signal.signal(value.parameters);\n    if (item.$isComponentRoot) {\n      componentScope[i] = item[i];\n    }\n    return true;\n  }\n\n  if (value instanceof QmlWeb.QMLMethod) {\n    value.compile();\n    item[i] = value.eval(objectScope, componentScope, componentScope.$basePath);\n    if (item.$isComponentRoot) {\n      componentScope[i] = item[i];\n    }\n    return true;\n  }\n\n  if (value instanceof QmlWeb.QMLAliasDefinition) {\n    // TODO\n    // 1. Alias must be able to point to prop or id of local object,\n    //    eg: property alias q: t\n    // 2. Alias may have same name as id it points to: property alias\n    //    someid: someid\n    // 3. Alias proxy (or property proxy) to proxy prop access to selected\n    //    incapsulated object. (think twice).\n    createProperty(\"alias\", item, i);\n    item.$properties[i].componentScope = componentScope;\n    item.$properties[i].componentScopeBasePath = componentScope.$basePath;\n    item.$properties[i].val = value;\n    item.$properties[i].get = function () {\n      var obj = this.componentScope[this.val.objectName];\n      var propertyName = this.val.propertyName;\n      return propertyName ? obj.$properties[propertyName].get() : obj;\n    };\n    item.$properties[i].set = function (newVal, reason, _objectScope, _componentScope) {\n      if (!this.val.propertyName) {\n        throw new Error(\"Cannot set alias property pointing to an QML object.\");\n      }\n      var obj = this.componentScope[this.val.objectName];\n      var prop = obj.$properties[this.val.propertyName];\n      prop.set(newVal, reason, _objectScope, _componentScope);\n    };\n\n    if (value.propertyName) {\n      var con = function con(prop) {\n        var obj = prop.componentScope[prop.val.objectName];\n        if (!obj) {\n          console.error(\"qtcore: target object \", prop.val.objectName, \" not found for alias \", prop);\n        } else {\n          (function () {\n            var targetProp = obj.$properties[prop.val.propertyName];\n            if (!targetProp) {\n              console.error(\"qtcore: target property [\", prop.val.objectName, \"].\", prop.val.propertyName, \" not found for alias \", prop.name);\n            } else {\n              (function () {\n                // targetProp.changed.connect( prop.changed );\n                // it is not sufficient to connect to `changed` of source property\n                // we have to propagate own changed to it too\n                // seems the best way to do this is to make them identical?..\n                // prop.changed = targetProp.changed;\n                // obj[`${i}Changed`] = prop.changed;\n                // no. because those object might be destroyed later.\n                var loopWatchdog = false;\n                targetProp.changed.connect(item, function () {\n                  for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n                    args[_key7] = arguments[_key7];\n                  }\n\n                  if (loopWatchdog) return;\n                  loopWatchdog = true;\n                  prop.changed.apply(item, args);\n                  loopWatchdog = false;\n                });\n                prop.changed.connect(obj, function () {\n                  for (var _len8 = arguments.length, args = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n                    args[_key8] = arguments[_key8];\n                  }\n\n                  if (loopWatchdog) return;\n                  loopWatchdog = true;\n                  targetProp.changed.apply(obj, args);\n                  loopWatchdog = false;\n                });\n              })();\n            }\n          })();\n        }\n      };\n      QmlWeb.engine.pendingOperations.push([con, item.$properties[i]]);\n    }\n    return true;\n  }\n\n  if (value instanceof QmlWeb.QMLPropertyDefinition) {\n    createProperty(value.type, item, i);\n    item.$properties[i].set(value.value, QMLProperty.ReasonInit, objectScope, componentScope);\n    return true;\n  }\n\n  if (item[i] && value instanceof QmlWeb.QMLMetaPropertyGroup) {\n    // Apply properties one by one, otherwise apply at once\n    applyProperties(value, item[i], objectScope, componentScope);\n    return true;\n  }\n\n  return false;\n}\n\nfunction connectSignal(item, signalName, value, objectScope, componentScope) {\n  if (!item[signalName]) {\n    console.warn(\"No signal called \" + signalName + \" found!\");\n    return undefined;\n  } else if (typeof item[signalName].connect !== \"function\") {\n    console.warn(signalName + \" is not a signal!\");\n    return undefined;\n  }\n\n  if (!value.compiled) {\n    var params = [];\n    for (var j in item[signalName].parameters) {\n      params.push(item[signalName].parameters[j].name);\n    }\n    // Wrap value.src in IIFE in case it includes a \"return\"\n    value.src = \"(\\n      function(\" + params.join(\", \") + \") {\\n        QmlWeb.executionContext = __executionContext;\\n        QmlWeb.engine.$oldBasePath = QmlWeb.engine.$basePath;\\n        QmlWeb.engine.$basePath = \\\"\" + componentScope.$basePath + \"\\\";\\n        try {\\n          (function() {\\n            \" + value.src + \"\\n          })();\\n        } finally {\\n          QmlWeb.engine.$basePath = QmlWeb.engine.$oldBasePath;\\n        }\\n      }\\n    )\";\n    value.isFunction = false;\n    value.compile();\n  }\n  // Don't pass in __basePath argument, as QMLEngine.$basePath is set in the\n  // value.src, as we need it set at the time the slot is called.\n  var slot = value.eval(objectScope, componentScope);\n  item[signalName].connect(item, slot);\n  return slot;\n}\n\nQmlWeb.createProperty = createProperty;\nQmlWeb.applyProperties = applyProperties;\nQmlWeb.connectSignal = connectSignal;\n\n/* @license\n\nMIT License\n\nCopyright (c) 2011 Lauri Paimen <lauri@paimen.info>\nCopyright (c) 2013 Anton Kreuzkamp <akreuzkamp@web.de>\nCopyright (c) 2016 QmlWeb contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nvar QMLMethod = function (_QmlWeb$QMLBinding) {\n  _inherits(QMLMethod, _QmlWeb$QMLBinding);\n\n  function QMLMethod() {\n    _classCallCheck(this, QMLMethod);\n\n    return _possibleConstructorReturn(this, (QMLMethod.__proto__ || Object.getPrototypeOf(QMLMethod)).apply(this, arguments));\n  }\n\n  return QMLMethod;\n}(QmlWeb.QMLBinding);\n\n/**\n * Create an object representing a QML property definition.\n * @param {String} type The type of the property\n * @param {Array} value The default value of the property\n * @return {Object} Object representing the defintion\n */\n\n\nvar QMLPropertyDefinition = function QMLPropertyDefinition(type, value) {\n  _classCallCheck(this, QMLPropertyDefinition);\n\n  this.type = type;\n  this.value = value;\n};\n\nvar QMLAliasDefinition = function QMLAliasDefinition(objName, propName) {\n  _classCallCheck(this, QMLAliasDefinition);\n\n  this.objectName = objName;\n  this.propertyName = propName;\n};\n\n/**\n * Create an object representing a QML signal definition.\n * @param {Array} params The parameters the signal ships\n * @return {Object} Object representing the defintion\n */\n\n\nvar QMLSignalDefinition = function QMLSignalDefinition(params) {\n  _classCallCheck(this, QMLSignalDefinition);\n\n  this.parameters = params;\n};\n\n/**\n * Create an object representing a group of QML properties (like anchors).\n * @return {Object} Object representing the group\n */\n\n\nvar QMLMetaPropertyGroup = function QMLMetaPropertyGroup() {\n  _classCallCheck(this, QMLMetaPropertyGroup);\n};\n\n/**\n * Create an object representing a QML element.\n * @param {String} type Type of the element\n * @param {String} onProp Name of the property specified with the \"on\" keyword\n */\n\n\nvar QMLMetaElement = function QMLMetaElement(type, onProp) {\n  _classCallCheck(this, QMLMetaElement);\n\n  this.$class = type;\n  this.$children = [];\n  this.$on = onProp;\n};\n\n// Convert parser tree to the format understood by engine\n\n\nfunction convertToEngine(tree) {\n  return convertToEngine.walk(tree);\n}\n\nfunction stringifyDots(elem) {\n  var sub = elem;\n  var path = [];\n  while (sub[0] === \"dot\") {\n    path.push(sub[1]);\n    sub = sub[2];\n  }\n  path.push(sub);\n  return path.join(\".\");\n}\n\nfunction applyProp(item, name, val) {\n  var curr = item; // output structure\n  var sub = name; // input structure\n  while (sub[0] === \"dot\") {\n    if (!curr[sub[1]]) {\n      curr[sub[1]] = new QMLMetaPropertyGroup();\n    }\n    curr = curr[sub[1]];\n    sub = sub[2];\n  }\n  curr[sub] = val;\n}\n\nconvertToEngine.walkers = {\n  toplevel: function toplevel(imports, statement) {\n    var item = { $class: \"Component\" };\n    item.$imports = imports;\n    item.$children = [convertToEngine.walk(statement)];\n    return item;\n  },\n  qmlelem: function qmlelem(elem, onProp, statements) {\n    var item = new QMLMetaElement(stringifyDots(elem), onProp);\n\n    for (var i in statements) {\n      var statement = statements[i];\n      var name = statement[1];\n      var val = convertToEngine.walk(statement);\n      switch (statement[0]) {\n        case \"qmldefaultprop\":\n          item.$defaultProperty = name;\n          item[name] = val;\n          break;\n        case \"qmlprop\":\n        case \"qmlpropdef\":\n        case \"qmlaliasdef\":\n        case \"qmlmethod\":\n        case \"qmlsignaldef\":\n          applyProp(item, name, val);\n          break;\n        case \"qmlelem\":\n          item.$children.push(val);\n          break;\n        case \"qmlobjdef\":\n          throw new Error(\"qmlobjdef support was removed, update qmlweb-parser to ^0.3.0.\");\n        case \"qmlobj\":\n          // Create object to item\n          item[name] = item[name] || new QMLMetaPropertyGroup();\n          for (var j in val) {\n            item[name][j] = val[j];\n          }\n          break;\n        default:\n          console.log(\"Unknown statement\", statement);\n      }\n    }\n    // Make $children be either a single item or an array, if it's more than one\n    if (item.$children.length === 1) {\n      item.$children = item.$children[0];\n    }\n\n    return item;\n  },\n  qmlprop: function qmlprop(name, tree, src) {\n    if (name === \"id\") {\n      // id property\n      return tree[1][1];\n    }\n    return convertToEngine.bindout(tree, src);\n  },\n  qmlobjdef: function qmlobjdef(name, property, tree, src) {\n    return convertToEngine.bindout(tree, src);\n  },\n  qmlobj: function qmlobj(elem, statements) {\n    var item = {};\n    for (var i in statements) {\n      var statement = statements[i];\n      var name = statement[1];\n      var val = convertToEngine.walk(statement);\n      if (statement[0] === \"qmlprop\") {\n        applyProp(item, name, val);\n      }\n    }\n    return item;\n  },\n  qmlmethod: function qmlmethod(name, tree, src) {\n    return new QMLMethod(src);\n  },\n  qmlpropdef: function qmlpropdef(name, type, tree, src) {\n    return new QMLPropertyDefinition(type, tree ? convertToEngine.bindout(tree, src) : undefined);\n  },\n  qmlaliasdef: function qmlaliasdef(name, objName, propName) {\n    return new QMLAliasDefinition(objName, propName);\n  },\n  qmlsignaldef: function qmlsignaldef(name, params) {\n    return new QMLSignalDefinition(params);\n  },\n  qmldefaultprop: function qmldefaultprop(tree) {\n    return convertToEngine.walk(tree);\n  },\n  name: function name(src) {\n    if (src === \"true\" || src === \"false\") {\n      return src === \"true\";\n    } else if (typeof src === \"boolean\") {\n      // TODO: is this needed? kept for compat with ==\n      return src;\n    }\n    return new QmlWeb.QMLBinding(src, [\"name\", src]);\n  },\n  num: function num(src) {\n    return +src;\n  },\n  string: function string(src) {\n    return String(src);\n  },\n  array: function array(tree, src) {\n    var a = [];\n    var isList = false;\n    var hasBinding = false;\n    for (var i in tree) {\n      var val = convertToEngine.bindout(tree[i]);\n      a.push(val);\n\n      if (val instanceof QMLMetaElement) {\n        isList = true;\n      } else if (val instanceof QmlWeb.QMLBinding) {\n        hasBinding = true;\n      }\n    }\n\n    if (hasBinding) {\n      if (isList) {\n        throw new TypeError(\"An array may either contain bindings or Element definitions.\");\n      }\n      return new QmlWeb.QMLBinding(src, tree);\n    }\n\n    return a;\n  }\n};\n\nconvertToEngine.walk = function (tree) {\n  var type = tree[0];\n  var walker = convertToEngine.walkers[type];\n  if (!walker) {\n    console.log(\"No walker for \" + type);\n    return undefined;\n  }\n  return walker.apply(type, tree.slice(1));\n};\n\n// Try to bind out tree and return static variable instead of binding\nconvertToEngine.bindout = function (statement, binding) {\n  // We want to process the content of the statement\n  // (but still handle the case, we get the content directly)\n  var tree = statement[0] === \"stat\" ? statement[1] : statement;\n\n  var type = tree[0];\n  var walker = convertToEngine.walkers[type];\n  if (walker) {\n    return walker.apply(type, tree.slice(1));\n  }\n  return new QmlWeb.QMLBinding(binding, tree);\n};\n\n// Help logger\nconvertToEngine.amIn = function (str, tree) {\n  console.log(str);\n  if (tree) console.log(JSON.stringify(tree, null, \"  \"));\n};\n\nfunction loadParser() {\n  if (typeof QmlWeb.parse !== \"undefined\") {\n    return;\n  }\n\n  console.log(\"Loading parser...\");\n  var tags = document.getElementsByTagName(\"script\");\n  for (var i in tags) {\n    if (tags[i].src && tags[i].src.indexOf(\"/qt.\") !== -1) {\n      var src = tags[i].src.replace(\"/qt.\", \"/qmlweb.parser.\");\n      // TODO: rewrite to async loading\n      var xhr = new XMLHttpRequest();\n      xhr.open(\"GET\", src, false);\n      xhr.send(null);\n      if (xhr.status !== 200 && xhr.status !== 0) {\n        // xhr.status === 0 if accessing with file://\n        throw new Error(\"Could not load QmlWeb parser!\");\n      }\n      new Function(xhr.responseText)();\n      QmlWeb.parse = QmlWeb.parse;\n      QmlWeb.jsparse = QmlWeb.jsparse;\n      return;\n    }\n  }\n}\n\n// Function to parse qml and output tree expected by engine\nfunction parseQML(src, file) {\n  loadParser();\n  QmlWeb.parse.nowParsingFile = file;\n  var parsetree = QmlWeb.parse(src, QmlWeb.parse.QmlDocument);\n  return convertToEngine(parsetree);\n}\n\nQmlWeb.QMLMethod = QMLMethod;\nQmlWeb.QMLPropertyDefinition = QMLPropertyDefinition;\nQmlWeb.QMLAliasDefinition = QMLAliasDefinition;\nQmlWeb.QMLSignalDefinition = QMLSignalDefinition;\nQmlWeb.QMLMetaPropertyGroup = QMLMetaPropertyGroup;\nQmlWeb.QMLMetaElement = QMLMetaElement;\nQmlWeb.convertToEngine = convertToEngine;\nQmlWeb.loadParser = loadParser;\nQmlWeb.parseQML = parseQML;\n\n/*\n\nQmlWeb.qrc is analogous to the Qt Resource System. It is expected to map a path\nwithin the resource system to the following pieces of data:\n\n1) For a QML Component, it is the return value of QmlWeb.parse\n2) For a JavaScript file, it is the return value of QmlWeb.jsparse\n2) For an image, it is any URL that an <img> tag can accept (e.g. a standard\n   URL to an image resource, or a \"data:\" URI). If there is no entry for a\n   given qrc image path, it will fall back to passing the path right through to\n   the DOM. This is mainly a convenience until support for images is added to\n   gulp-qmlweb.\n\nThe \"data-qml\" tag on <body> can be set to a \"qrc://\" URL like\n\"qrc:///root.qml\" to use a pre-parsed \"/root.qml\" from QmlWeb.qrc.\n\nSince relative URLs are resolved relative to the URL of the containing\ncomponent, any relative URL set within a file in the resource system will also\nresolve within the resource system. To access a Component, JavaScript or image\nfile that is stored outside of the resources system from within the resource\nsystem, a full URL must be used (e.g. \"http://www.example.com/images/foo.png\").\n\nVice-versa, in order to access a Component, JavaScript or image file that is\nstored within the resource system from outside of the resource system, a full\n\"qrc://\" URL must be used (e.g. \"qrc:///images/foo.png\").\n\nMore details here: http://doc.qt.io/qt-5/qml-url.html\n\n*/\nQmlWeb.qrc = {};\n\nQmlWeb.registerQmlType({\n  module: \"QmlWeb.Dom\",\n  name: \"DomElement\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    tagName: { type: \"string\", initialValue: \"div\" }\n  }\n}, function () {\n  function _class(meta) {\n    _classCallCheck(this, _class);\n\n    QmlWeb.callSuper(this, meta);\n\n    var tagName = meta.object.tagName || \"div\";\n    this.dom = document.createElement(tagName);\n\n    // TODO: support properties, styles, perhaps changing the tagName\n  }\n\n  return _class;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QmlWeb\",\n  name: \"RestModel\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    url: \"string\",\n    isLoading: \"bool\",\n    mimeType: { type: \"string\", initialValue: \"application/json\" },\n    queryMimeType: {\n      type: \"string\",\n      initialValue: \"application/x-www-urlencoded\"\n    }\n  },\n  signals: {\n    fetched: [],\n    saved: []\n  }\n}, function () {\n  function _class2(meta) {\n    _classCallCheck(this, _class2);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.attributes = this.getAttributes();\n    this.runningRequests = 0;\n  }\n\n  _createClass(_class2, [{\n    key: \"fetch\",\n    value: function fetch() {\n      var _this5 = this;\n\n      this.$ajax({\n        method: \"GET\",\n        mimeType: this.mimetype,\n        success: function success(xhr) {\n          _this5.$xhrReadResponse(xhr);\n          _this5.fetched();\n        }\n      });\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var _this6 = this;\n\n      this.$ajax({\n        method: \"DELETE\",\n        success: function success() {\n          _this6.destroy();\n        }\n      });\n    }\n  }, {\n    key: \"create\",\n    value: function create() {\n      this.$sendToServer(\"POST\");\n    }\n  }, {\n    key: \"save\",\n    value: function save() {\n      this.$sendToServer(\"PUT\");\n    }\n  }, {\n    key: \"$sendToServer\",\n    value: function $sendToServer(method) {\n      var _this7 = this;\n\n      this.$ajax({\n        method: method,\n        mimeType: this.queryMimeType,\n        body: this.$generateBodyForPostQuery(),\n        success: function success(xhr) {\n          _this7.$xhrReadResponse(xhr);\n          _this7.saved();\n        }\n      });\n    }\n  }, {\n    key: \"$generateBodyForPostQuery\",\n    value: function $generateBodyForPostQuery() {\n      var object = {};\n      for (var i = 0; i < this.attributes.length; ++i) {\n        object[this.attributes[i]] = this.$properties[this.attributes[i]].get();\n      }\n      console.log(object);\n      switch (this.queryMimeType) {\n        case \"application/json\":\n        case \"text/json\":\n          return JSON.stringify(object);\n        case \"application/x-www-urlencoded\":\n          return this.$objectToUrlEncoded(object);\n      }\n      return undefined;\n    }\n  }, {\n    key: \"$objectToUrlEncoded\",\n    value: function $objectToUrlEncoded(object, prefix) {\n      var parts = [];\n      for (var key in object) {\n        if (object.hasOwnProperty(key)) {\n          var value = object[key];\n          if (typeof prefix !== \"undefined\") {\n            key = prefix + \"[\" + key + \"]\";\n          }\n          if ((typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) === \"object\") {\n            parts.push(this.$objectToUrlEncoded(value, key));\n          } else {\n            var ekey = this.$myEncodeURIComponent(key);\n            var evalue = this.$myEncodeURIComponent(value);\n            parts.push(ekey + \"=\" + evalue);\n          }\n        }\n      }\n      return parts.join(\"&\");\n    }\n  }, {\n    key: \"$myEncodeURIComponent\",\n    value: function $myEncodeURIComponent(str) {\n      return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n        return \"%\" + c.charCodeAt(0).toString(16);\n      });\n    }\n  }, {\n    key: \"$ajax\",\n    value: function $ajax(options) {\n      var _this8 = this;\n\n      var xhr = new XMLHttpRequest();\n      xhr.overrideMimeType(this.mimeType);\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          if (xhr.status === 200) {\n            options.success(xhr);\n          } else {\n            options.failure(xhr);\n          }\n          _this8.runningRequests -= 1;\n          if (_this8.runningRequests <= 0) {\n            _this8.isLoading = false;\n          }\n        }\n      };\n      xhr.open(options.method, this.url, true);\n      if (typeof options.body !== \"undefined\") {\n        xhr.setRequestHeader(\"Content-Type\", this.queryMimeType);\n        xhr.send(options.body);\n      } else {\n        xhr.send(null);\n      }\n      this.runningRequests += 1;\n      this.isLoading = true;\n    }\n  }, {\n    key: \"$xhrReadResponse\",\n    value: function $xhrReadResponse(xhr) {\n      var responseObject = void 0;\n      if (this.mimeType === \"application/json\" || this.mimeType === \"text/json\") {\n        responseObject = JSON.parse(xhr.responseText);\n      }\n      this.$updatePropertiesFromResponseObject(responseObject);\n    }\n  }, {\n    key: \"$updatePropertiesFromResponseObject\",\n    value: function $updatePropertiesFromResponseObject(responseObject) {\n      var QMLProperty = QmlWeb.QMLProperty;\n      for (var key in responseObject) {\n        if (responseObject.hasOwnProperty(key) && this.$hasProperty(key)) {\n          this.$properties[key].set(responseObject[key], QMLProperty.ReasonUser);\n        }\n      }\n    }\n  }, {\n    key: \"$hasProperty\",\n    value: function $hasProperty(name) {\n      return typeof this.$properties[name] !== \"undefined\";\n    }\n  }]);\n\n  return _class2;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"Qt.labs.settings\",\n  name: \"Settings\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    category: \"string\"\n  }\n}, function () {\n  function _class3(meta) {\n    _classCallCheck(this, _class3);\n\n    QmlWeb.callSuper(this, meta);\n\n    if (typeof window.localStorage === \"undefined\") {\n      return;\n    }\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n  }\n\n  _createClass(_class3, [{\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.$loadProperties();\n      this.$initializeProperties();\n    }\n  }, {\n    key: \"$getKey\",\n    value: function $getKey(attrName) {\n      return this.category + \"/\" + attrName;\n    }\n  }, {\n    key: \"$loadProperties\",\n    value: function $loadProperties() {\n      var _this9 = this;\n\n      this.$attributes.forEach(function (attrName) {\n        if (!_this9.$properties[attrName]) return;\n\n        var key = _this9.$getKey(attrName);\n        _this9[attrName] = localStorage.getItem(key);\n      });\n    }\n  }, {\n    key: \"$initializeProperties\",\n    value: function $initializeProperties() {\n      var _this10 = this;\n\n      this.$attributes.forEach(function (attrName) {\n        if (!_this10.$properties[attrName]) return;\n\n        var emitter = _this10;\n        var signalName = attrName + \"Changed\";\n\n        if (_this10.$properties[attrName].type === \"alias\") {\n          emitter = _this10.$context[_this10.$properties[attrName].val.objectName];\n          signalName = _this10.$properties[attrName].val.propertyName + \"Changed\";\n        }\n\n        emitter[signalName].connect(_this10, function () {\n          localStorage.setItem(_this10.$getKey(attrName), _this10[attrName]);\n        });\n      });\n    }\n  }]);\n\n  return _class3;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtGraphicalEffects\",\n  name: \"FastBlur\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    radius: \"real\",\n    source: { type: \"var\", initialValue: null }\n  }\n}, function () {\n  function _class4(meta) {\n    _classCallCheck(this, _class4);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$previousSource = null;\n    this.$filterObject = undefined;\n\n    this.radiusChanged.connect(this, this.$onRadiusChanged);\n    this.sourceChanged.connect(this, this.$onSourceChanged);\n  }\n\n  _createClass(_class4, [{\n    key: \"$onRadiusChanged\",\n    value: function $onRadiusChanged() {\n      this.$updateEffect(this.source);\n    }\n  }, {\n    key: \"$onSourceChanged\",\n    value: function $onSourceChanged() {\n      this.$updateEffect(this.source);\n    }\n  }, {\n    key: \"$updateFilterObject\",\n    value: function $updateFilterObject() {\n      this.$filterObject = {\n        transformType: \"filter\",\n        operation: \"blur\",\n        parameters: this.radius + \"px\"\n      };\n    }\n  }, {\n    key: \"$updateEffect\",\n    value: function $updateEffect(source) {\n      console.log(\"updating effect\");\n      if (this.$previousSource) {\n        var index = this.$previousSource.transform.indexOf(this.$filterObject);\n        this.$previousSource.transform.splice(index, 1);\n        this.$previousSource.$updateTransform();\n      }\n      if (source && source.transform) {\n        this.$updateFilterObject();\n        console.log(\"updating effect:\", this.$filterObject, source);\n        source.transform.push(this.$filterObject);\n        source.$updateTransform();\n        this.$previousSource = source;\n      } else {\n        this.$previousSource = null;\n      }\n    }\n  }]);\n\n  return _class4;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtMobility\",\n  name: \"GeoLocation\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    accuracy: \"double\",\n    altitude: \"double\",\n    altitudeAccuracy: \"double\",\n    heading: \"double\",\n    latitude: \"double\",\n    longitude: \"double\",\n    speed: \"double\",\n    timestamp: \"date\",\n    label: \"string\"\n  }\n}, function () {\n  function _class5(meta) {\n    var _this11 = this;\n\n    _classCallCheck(this, _class5);\n\n    QmlWeb.callSuper(this, meta);\n\n    if (!navigator.geolocation) {\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(function (pos) {\n      return _this11.$updatePosition(pos);\n    });\n    navigator.geolocation.watchPosition(function (pos) {\n      return _this11.$updatePosition(pos);\n    });\n  }\n\n  _createClass(_class5, [{\n    key: \"$updatePosition\",\n    value: function $updatePosition(position) {\n      this.accuracy = position.coords.accuracy;\n      this.altitude = position.coords.altitude;\n      this.altitudeAccuracy = position.coords.altitudeAccuracy;\n      this.heading = position.coords.heading;\n      this.latitude = position.coords.latitude;\n      this.longitude = position.coords.longitude;\n      this.speed = position.coords.speed;\n      this.timestamp = position.timestamp;\n    }\n  }]);\n\n  return _class5;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtMultimedia\",\n  name: \"Video\",\n  versions: /^5\\./,\n  baseClass: \"QtQuick.Item\",\n  enums: {\n    MediaPlayer: {\n      NoError: 0, ResourceError: 1, FormatError: 2, NetworkError: 4,\n      AccessDenied: 8, ServiceMissing: 16,\n\n      StoppedState: 0, PlayingState: 1, PausedState: 2,\n\n      NoMedia: 0, Loading: 1, Loaded: 2, Buffering: 4, Stalled: 8,\n      EndOfMedia: 16, InvalidMedia: 32, UnknownStatus: 64\n    },\n    VideoOutput: { PreserveAspectFit: 0, PreserveAspectCrop: 1, Stretch: 2 }\n  },\n  properties: {\n    source: \"string\",\n    duration: \"int\",\n    position: \"int\",\n    autoPlay: \"bool\",\n    muted: \"bool\",\n    volume: \"real\",\n    playbackRate: \"real\",\n    playbackState: \"enum\", // MediaPlayer.StoppedState\n    fillMode: \"enum\", // VideoOutput.PreserveAspectFit\n    status: \"enum\", // MediaPlayer.NoMedia\n    error: \"enum\" // MediaPlayer.NoError\n  },\n  signals: {\n    paused: [],\n    playing: [],\n    stopped: []\n  }\n}, function () {\n  function _class6(meta) {\n    var _this12 = this;\n\n    _classCallCheck(this, _class6);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$runningEventListener = 0;\n\n    this.impl = document.createElement(\"video\");\n    this.impl.style.width = this.impl.style.height = \"100%\";\n    this.impl.style.margin = \"0\";\n    this.dom.appendChild(this.impl);\n\n    this.volume = this.impl.volume;\n    this.duration = this.impl.duration;\n\n    this.impl.addEventListener(\"play\", function () {\n      _this12.playing();\n      _this12.playbackState = _this12.MediaPlayer.PlayingState;\n    });\n\n    this.impl.addEventListener(\"pause\", function () {\n      _this12.paused();\n      _this12.playbackState = _this12.MediaPlayer.PausedState;\n    });\n\n    this.impl.addEventListener(\"timeupdate\", function () {\n      _this12.$runningEventListener++;\n      _this12.position = _this12.impl.currentTime * 1000;\n      _this12.$runningEventListener--;\n    });\n\n    this.impl.addEventListener(\"ended\", function () {\n      _this12.stopped();\n      _this12.playbackState = _this12.MediaPlayer.StoppedState;\n    });\n\n    this.impl.addEventListener(\"progress\", function () {\n      if (_this12.impl.buffered.length > 0) {\n        _this12.progress = _this12.impl.buffered.end(0) / _this12.impl.duration;\n        _this12.status = _this12.progress < 1 ? _this12.MediaPlayer.Buffering : _this12.MediaPlayer.Buffered;\n      }\n    });\n\n    this.impl.addEventListener(\"stalled\", function () {\n      _this12.status = _this12.MediaPlayer.Stalled;\n    });\n\n    this.impl.addEventListener(\"canplaythrough\", function () {\n      _this12.status = _this12.MediaPlayer.Buffered;\n    });\n\n    this.impl.addEventListener(\"loadstart\", function () {\n      _this12.status = _this12.MediaPlayer.Loading;\n    });\n\n    this.impl.addEventListener(\"durationchanged\", function () {\n      _this12.duration = _this12.impl.duration;\n    });\n\n    this.impl.addEventListener(\"volumechanged\", function () {\n      _this12.$runningEventListener++;\n      _this12.volume = _this12.impl.volume;\n      _this12.$runningEventListener--;\n    });\n\n    this.impl.addEventListener(\"suspend\", function () {\n      _this12.error |= _this12.MediaPlayer.NetworkError;\n    });\n\n    this.impl.addEventListener(\"error\", function () {\n      _this12.error |= _this12.MediaPlayer.ResourceError;\n    });\n\n    this.impl.addEventListener(\"ratechange\", function () {\n      _this12.$runningEventListener++;\n      _this12.playbackRate = _this12.impl.playbackRate;\n      _this12.$runningEventListener--;\n    });\n\n    this.autoPlayChanged.connect(this, this.$onAutoPlayChanged);\n    this.sourceChanged.connect(this, this.$onSourceChanged);\n    this.positionChanged.connect(this, this.$onPositionChanged);\n    this.volumeChanged.connect(this, this.$onVolumeChanged);\n    this.playbackRateChanged.connect(this, this.$onPlaybackRateChanged);\n    this.mutedChanged.connect(this, this.$onMutedChanged);\n    this.fillModeChanged.connect(this, this.$onFillModeChanged);\n  }\n\n  _createClass(_class6, [{\n    key: \"$onAutoPlayChanged\",\n    value: function $onAutoPlayChanged(newVal) {\n      this.impl.autoplay = newVal;\n    }\n  }, {\n    key: \"$onSourceChanged\",\n    value: function $onSourceChanged(source) {\n      var parts = source.split(\".\");\n      var extension = parts[parts.length - 1].toLowerCase();\n      var mime = this.mimetypeFromExtension(extension);\n      this.impl.src = source;\n      if (!this.impl.canPlayType(mime)) {\n        this.error |= this.MediaPlayer.FormatError;\n      }\n    }\n  }, {\n    key: \"$onPositionChanged\",\n    value: function $onPositionChanged(currentTime) {\n      if (this.$runningEventListener > 0) return;\n      this.impl.currentTime = currentTime / 1000;\n    }\n  }, {\n    key: \"$onVolumeChanged\",\n    value: function $onVolumeChanged(volume) {\n      if (this.$runningEventListener > 0) return;\n      this.impl.volume = volume;\n    }\n  }, {\n    key: \"$onPlaybackRateChanged\",\n    value: function $onPlaybackRateChanged(playbackRate) {\n      if (this.$runningEventListener > 0) return;\n      this.impl.playbackRate = playbackRate;\n    }\n  }, {\n    key: \"$onMutedChanged\",\n    value: function $onMutedChanged(newValue) {\n      if (newValue) {\n        this.$volulmeBackup = this.impl.volume;\n        this.volume = 0;\n      } else {\n        this.volume = this.$volumeBackup;\n      }\n    }\n  }, {\n    key: \"$onFillModeChanged\",\n    value: function $onFillModeChanged(newValue) {\n      switch (newValue) {\n        case this.VideoOutput.Stretch:\n          this.impl.style.objectFit = \"fill\";\n          break;\n        case this.VideoOutput.PreserveAspectFit:\n          this.impl.style.objectFit = \"\";\n          break;\n        case this.VideoOutput.PreserveAspectCrop:\n          this.impl.style.objectFit = \"cover\";\n          break;\n      }\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.impl.pause();\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      this.impl.play();\n    }\n  }, {\n    key: \"seek\",\n    value: function seek(offset) {\n      this.impl.currentTime = offset * 1000;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {}\n  }, {\n    key: \"mimetypeFromExtension\",\n    value: function mimetypeFromExtension(extension) {\n      var mimetypes = {\n        ogg: \"video/ogg\",\n        ogv: \"video/ogg\",\n        ogm: \"video/ogg\",\n        mp4: \"video/mp4\",\n        webm: \"video/webm\"\n      };\n      return mimetypes[extension] || \"\";\n    }\n  }]);\n\n  return _class6;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQml\",\n  name: \"Binding\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    target: { type: \"QtObject\", initialValue: null },\n    property: { type: \"string\", initialValue: \"\" },\n    value: { type: \"var\", initialValue: undefined },\n    when: { type: \"bool\", initialValue: true }\n  }\n}, function () {\n  function _class7(meta) {\n    _classCallCheck(this, _class7);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$property = undefined;\n\n    this.valueChanged.connect(this, this.$onValueChanged);\n    this.targetChanged.connect(this, this.$updateBinding);\n    this.propertyChanged.connect(this, this.$updateBinding);\n    this.whenChanged.connect(this, this.$updateBinding);\n  }\n\n  _createClass(_class7, [{\n    key: \"$updateBinding\",\n    value: function $updateBinding() {\n      if (!this.when || !this.target || !this.target.hasOwnProperty(this.property) || this.value === undefined) {\n        this.$property = undefined;\n        return;\n      }\n      this.$property = this.target.$properties[this.property];\n      this.$onValueChanged(this.value); // trigger value update\n    }\n  }, {\n    key: \"$onValueChanged\",\n    value: function $onValueChanged(value) {\n      if (value !== undefined && this.$property) {\n        this.$property.set(value);\n      }\n    }\n  }]);\n\n  return _class7;\n}());\n\nvar QMLContext = function () {\n  function QMLContext() {\n    _classCallCheck(this, QMLContext);\n  }\n\n  _createClass(QMLContext, [{\n    key: \"nameForObject\",\n    value: function nameForObject(obj) {\n      for (var name in this) {\n        if (this[name] === obj) {\n          return name;\n        }\n      }\n      return undefined;\n    }\n  }]);\n\n  return QMLContext;\n}();\n\nvar QMLComponent = function () {\n  function QMLComponent(meta) {\n    var _this13 = this;\n\n    _classCallCheck(this, QMLComponent);\n\n    if (QmlWeb.constructors[meta.object.$class] === QMLComponent) {\n      this.$metaObject = meta.object.$children[0];\n    } else {\n      this.$metaObject = meta.object;\n    }\n    this.$context = meta.context;\n\n    this.$jsImports = [];\n\n    if (meta.object.$imports instanceof Array) {\n      (function () {\n        var moduleImports = [];\n        var loadImport = function loadImport(importDesc) {\n          if (/\\.js$/.test(importDesc[1])) {\n            _this13.$jsImports.push(importDesc);\n          } else {\n            moduleImports.push(importDesc);\n          }\n        };\n\n        for (var i = 0; i < meta.object.$imports.length; ++i) {\n          loadImport(meta.object.$imports[i]);\n        }\n        QmlWeb.loadImports(_this13, moduleImports);\n        if (_this13.$context) {\n          _this13.finalizeImports(_this13.$context);\n        }\n      })();\n    }\n\n    /* If this Component does not have any imports, it is likely one that was\n     * created within another Component file. It should inherit the\n     * importContextId of the Component file it was created within. */\n    if (this.importContextId === undefined) {\n      this.importContextId = meta.context.importContextId;\n    }\n  }\n\n  _createClass(QMLComponent, [{\n    key: \"finalizeImports\",\n    value: function finalizeImports($context) {\n      var engine = QmlWeb.engine;\n      for (var i = 0; i < this.$jsImports.length; ++i) {\n        var importDesc = this.$jsImports[i];\n        var js = engine.loadJS(engine.$resolvePath(importDesc[1]));\n\n        if (!js) {\n          console.log(\"Component.finalizeImports: failed to import JavaScript\", importDesc[1]);\n          continue;\n        }\n\n        if (importDesc[3] !== \"\") {\n          $context[importDesc[3]] = {};\n          QmlWeb.importJavascriptInContext(js, $context[importDesc[3]]);\n        } else {\n          QmlWeb.importJavascriptInContext(js, $context);\n        }\n      }\n    }\n  }, {\n    key: \"$createObject\",\n    value: function $createObject(parent) {\n      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.$context;\n\n      var engine = QmlWeb.engine;\n      var oldState = engine.operationState;\n      engine.operationState = QmlWeb.QMLOperationState.Init;\n      // change base path to current component base path\n      var bp = engine.$basePath;\n      engine.$basePath = this.$basePath ? this.$basePath : engine.$basePath;\n\n      var newContext = context ? Object.create(context) : new QMLContext();\n\n      if (this.importContextId !== undefined) {\n        newContext.importContextId = this.importContextId;\n      }\n\n      var item = QmlWeb.construct({\n        object: this.$metaObject,\n        parent: parent,\n        context: newContext,\n        isComponentRoot: true\n      });\n\n      Object.keys(properties).forEach(function (propname) {\n        item[propname] = properties.propname;\n      });\n\n      // change base path back\n      // TODO looks a bit hacky\n      engine.$basePath = bp;\n\n      engine.operationState = oldState;\n      return item;\n    }\n  }, {\n    key: \"createObject\",\n    value: function createObject(parent) {\n      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var item = this.$createObject(parent, properties);\n      var QMLItem = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Item\");\n\n      if (item instanceof QMLItem) {\n        item.$properties.parent.set(parent, QmlWeb.QMLProperty.ReasonInit);\n      }\n\n      return item;\n    }\n  }], [{\n    key: \"getAttachedObject\",\n    value: function getAttachedObject() {\n      if (!this.$Component) {\n        this.$Component = new QmlWeb.QObject(this);\n        this.$Component.completed = QmlWeb.Signal.signal([]);\n        QmlWeb.engine.completedSignals.push(this.$Component.completed);\n\n        this.$Component.destruction = QmlWeb.Signal.signal([]);\n      }\n      return this.$Component;\n    }\n  }]);\n\n  return QMLComponent;\n}();\n\nQmlWeb.registerQmlType({\n  global: true,\n  module: \"QtQml\",\n  name: \"Component\",\n  versions: /.*/,\n  baseClass: \"QtObject\",\n  constructor: QMLComponent\n});\n\nQmlWeb.registerQmlType({\n  module: \"QtQml\",\n  name: \"Connections\",\n  versions: /.*/,\n  baseClass: \"QtObject\",\n  properties: {\n    target: \"QtObject\",\n    ignoreUnknownSignals: \"bool\"\n  }\n}, function () {\n  function _class8(meta) {\n    _classCallCheck(this, _class8);\n\n    QmlWeb.callSuper(this, meta);\n    this.target = this.$parent;\n    this.$connections = {};\n\n    this.$old_target = this.target;\n    this.targetChanged.connect(this, this.$onTargetChanged);\n    this.Component.completed.connect(this, this.Component$onCompleted);\n  }\n\n  _createClass(_class8, [{\n    key: \"$onTargetChanged\",\n    value: function $onTargetChanged() {\n      this.$reconnectTarget();\n    }\n  }, {\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.$reconnectTarget();\n    }\n  }, {\n    key: \"$reconnectTarget\",\n    value: function $reconnectTarget() {\n      var old_target = this.$old_target;\n      for (var i in this.$connections) {\n        var c = this.$connections[i];\n        if (c._currentConnection && old_target && old_target[i] && typeof old_target[i].disconnect === \"function\") {\n          old_target[i].disconnect(c._currentConnection);\n        }\n        if (this.target) {\n          c._currentConnection = QmlWeb.connectSignal(this.target, i, c.value, c.objectScope, c.componentScope);\n        }\n      }\n      this.$old_target = this.target;\n    }\n  }, {\n    key: \"$setCustomSlot\",\n    value: function $setCustomSlot(propName, value, objectScope, componentScope) {\n      this.$connections[propName] = { value: value, objectScope: objectScope, componentScope: componentScope };\n    }\n  }]);\n\n  return _class8;\n}());\n\n// Base object for all qml elements\n\nQmlWeb.registerQmlType({\n  module: \"QtQml\",\n  name: \"QtObject\",\n  versions: /.*/\n}, function (_QmlWeb$QObject2) {\n  _inherits(_class9, _QmlWeb$QObject2);\n\n  function _class9(meta) {\n    _classCallCheck(this, _class9);\n\n    var _this14 = _possibleConstructorReturn(this, (_class9.__proto__ || Object.getPrototypeOf(_class9)).call(this, meta.parent));\n\n    _this14.$isComponentRoot = meta.isComponentRoot;\n    _this14.$context = meta.context;\n\n    // Component get own properties\n    _this14.$attributes = [];\n    for (var key in meta.object) {\n      if (!meta.object.hasOwnProperty(key) || !meta.object[key]) {\n        continue;\n      }\n      var name = meta.object[key].__proto__.constructor.name;\n      if (name === \"QMLPropertyDefinition\" || name === \"QMLAliasDefinition\") {\n        _this14.$attributes.push(key);\n      }\n    }\n\n    var Signal = QmlWeb.Signal;\n\n    _this14.Keys = new QmlWeb.QObject(_this14);\n    _this14.Keys.asteriskPresed = Signal.signal();\n    _this14.Keys.backPressed = Signal.signal();\n    _this14.Keys.backtabPressed = Signal.signal();\n    _this14.Keys.callPressed = Signal.signal();\n    _this14.Keys.cancelPressed = Signal.signal();\n    _this14.Keys.deletePressed = Signal.signal();\n    for (var i = 0; i < 10; ++i) {\n      _this14.Keys[\"digit\" + i + \"Pressed\"] = Signal.signal();\n    }\n    _this14.Keys.escapePressed = Signal.signal();\n    _this14.Keys.flipPressed = Signal.signal();\n    _this14.Keys.hangupPressed = Signal.signal();\n    _this14.Keys.leftPressed = Signal.signal();\n    _this14.Keys.menuPressed = Signal.signal();\n    _this14.Keys.noPressed = Signal.signal();\n    _this14.Keys.pressed = Signal.signal();\n    _this14.Keys.released = Signal.signal();\n    _this14.Keys.returnPressed = Signal.signal();\n    _this14.Keys.rightPressed = Signal.signal();\n    _this14.Keys.selectPressed = Signal.signal();\n    _this14.Keys.spacePressed = Signal.signal();\n    _this14.Keys.tabPressed = Signal.signal();\n    _this14.Keys.upPressed = Signal.signal();\n    _this14.Keys.volumeDownPressed = Signal.signal();\n    _this14.Keys.volumeUpPressed = Signal.signal();\n    _this14.Keys.yesPressed = Signal.signal();\n    return _this14;\n  }\n\n  _createClass(_class9, [{\n    key: \"getAttributes\",\n    value: function getAttributes() {\n      return this.$attributes;\n    }\n  }]);\n\n  return _class9;\n}(QmlWeb.QObject));\n\nQmlWeb.registerQmlType({\n  module: \"QtQml\",\n  name: \"Timer\",\n  versions: /.*/,\n  baseClass: \"QtObject\",\n  properties: {\n    interval: { type: \"int\", initialValue: 1000 },\n    parent: { type: \"QtObject\", readOnly: true },\n    repeat: \"bool\",\n    running: \"bool\",\n    triggeredOnStart: \"bool\"\n  },\n  signals: {\n    triggered: []\n  }\n}, function () {\n  function _class10(meta) {\n    var _this15 = this;\n\n    _classCallCheck(this, _class10);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$properties.parent.set(this.$parent, QmlWeb.QMLProperty.ReasonInit);\n\n    /* This ensures that if the user toggles the \"running\" property manually,\n     * the timer will trigger. */\n    this.runningChanged.connect(this, this.$onRunningChanged);\n\n    QmlWeb.engine.$addTicker(function () {\n      return _this15.$ticker.apply(_this15, arguments);\n    });\n\n    QmlWeb.engine.$registerStart(function () {\n      if (_this15.running) {\n        _this15.restart();\n      }\n    });\n\n    QmlWeb.engine.$registerStop(function () {\n      return _this15.stop();\n    });\n  }\n\n  _createClass(_class10, [{\n    key: \"start\",\n    value: function start() {\n      this.running = true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.running = false;\n    }\n  }, {\n    key: \"restart\",\n    value: function restart() {\n      this.stop();\n      this.start();\n    }\n  }, {\n    key: \"$ticker\",\n    value: function $ticker(now) {\n      if (!this.running) return;\n      if (now - this.$prevTrigger >= this.interval) {\n        this.$prevTrigger = now;\n        this.$trigger();\n      }\n    }\n  }, {\n    key: \"$onRunningChanged\",\n    value: function $onRunningChanged() {\n      if (this.running) {\n        this.$prevTrigger = Date.now();\n        if (this.triggeredOnStart) {\n          this.$trigger();\n        }\n      }\n    }\n  }, {\n    key: \"$trigger\",\n    value: function $trigger() {\n      if (!this.repeat) {\n        // We set the value directly in order to be able to emit the\n        // runningChanged signal after triggered, like Qt does it.\n        this.$properties.running.val = false;\n      }\n\n      // Trigger this.\n      this.triggered();\n\n      if (!this.repeat) {\n        // Emit changed signal manually after setting the value manually above.\n        this.runningChanged();\n      }\n    }\n  }]);\n\n  return _class10;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick.Controls\",\n  name: \"Button\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    text: \"string\",\n    enabled: { type: \"bool\", initialValue: true }\n  },\n  signals: {\n    clicked: []\n  }\n}, function () {\n  function _class11(meta) {\n    var _this16 = this;\n\n    _classCallCheck(this, _class11);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n    this.textChanged.connect(this, this.$onTextChanged);\n    this.enabledChanged.connect(this, this.$onEnabledChanged);\n\n    var button = this.impl = document.createElement(\"button\");\n    button.style.pointerEvents = \"auto\";\n    this.dom.appendChild(button);\n\n    button.onclick = function () {\n      _this16.clicked();\n    };\n  }\n\n  _createClass(_class11, [{\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.implicitWidth = this.impl.offsetWidth;\n      this.implicitHeight = this.impl.offsetHeight;\n    }\n  }, {\n    key: \"$onTextChanged\",\n    value: function $onTextChanged(newVal) {\n      this.impl.textContent = newVal;\n      //TODO: Replace those statically sized borders\n      this.implicitWidth = this.impl.offsetWidth;\n      this.implicitHeight = this.impl.offsetHeight;\n    }\n  }, {\n    key: \"$onEnabledChanged\",\n    value: function $onEnabledChanged(newVal) {\n      this.impl.disabled = !newVal;\n    }\n  }]);\n\n  return _class11;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick.Controls\",\n  name: \"CheckBox\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    text: \"string\",\n    checked: \"bool\",\n    color: \"color\"\n  }\n}, function () {\n  function _class12(meta) {\n    var _this17 = this;\n\n    _classCallCheck(this, _class12);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.impl = document.createElement(\"label\");\n    this.impl.style.pointerEvents = \"auto\";\n\n    var checkbox = document.createElement(\"input\");\n    checkbox.type = \"checkbox\";\n    checkbox.style.verticalAlign = \"text-bottom\";\n    checkbox.addEventListener(\"change\", function () {\n      _this17.checked = checkbox.checked;\n    });\n    this.impl.appendChild(checkbox);\n\n    var span = document.createElement(\"span\");\n    this.impl.appendChild(span);\n\n    this.dom.appendChild(this.impl);\n\n    var QMLFont = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Font\");\n    this.font = new QMLFont(this);\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n    this.textChanged.connect(this, this.$onTextChanged);\n    this.colorChanged.connect(this, this.$onColorChanged);\n    this.checkedChanged.connect(this, this.$onCheckedChanged);\n  }\n\n  _createClass(_class12, [{\n    key: \"$onTextChanged\",\n    value: function $onTextChanged(newVal) {\n      this.impl.children[1].innerHTML = newVal;\n      this.implicitHeight = this.impl.offsetHeight;\n      this.implicitWidth = this.impl.offsetWidth > 0 ? this.impl.offsetWidth + 4 : 0;\n    }\n  }, {\n    key: \"$onColorChanged\",\n    value: function $onColorChanged(newVal) {\n      this.impl.children[1].style.color = new QmlWeb.QColor(newVal);\n    }\n  }, {\n    key: \"$onCheckedChanged\",\n    value: function $onCheckedChanged() {\n      this.impl.children[0].checked = this.checked;\n    }\n  }, {\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.implicitHeight = this.impl.offsetHeight;\n      this.implicitWidth = this.impl.offsetWidth > 0 ? this.impl.offsetWidth + 4 : 0;\n    }\n  }]);\n\n  return _class12;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick.Controls\",\n  name: \"ComboBox\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    count: \"int\",\n    currentIndex: \"int\",\n    currentText: \"string\",\n    menu: { type: \"array\", initialValue: [] },\n    model: { type: \"array\", initialValue: [] },\n    pressed: \"bool\"\n  },\n  signals: {\n    accepted: [],\n    activated: [{ type: \"int\", name: \"index\" }]\n  }\n}, function () {\n  function _class13(meta) {\n    var _this18 = this;\n\n    _classCallCheck(this, _class13);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.dom.style.pointerEvents = \"auto\";\n    this.name = \"QMLComboBox\";\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n    this.modelChanged.connect(this, this.$onModelChanged);\n\n    this.dom.onclick = function () {\n      var index = _this18.dom.firstChild.selectedIndex;\n      _this18.currentIndex = index;\n      _this18.currentText = _this18.model[index];\n      _this18.accepted();\n      _this18.activated(index);\n    };\n  }\n\n  _createClass(_class13, [{\n    key: \"find\",\n    value: function find(text) {\n      return this.model.indexOf(text);\n    }\n  }, {\n    key: \"selectAll\",\n    value: function selectAll() {\n      // TODO\n    }\n  }, {\n    key: \"textAt\",\n    value: function textAt(index) {\n      return this.model[index];\n    }\n  }, {\n    key: \"$updateImpl\",\n    value: function $updateImpl() {\n      this.currentIndex = 0;\n      this.count = this.model.length;\n      var entries = [];\n      for (var i = 0; i < this.count; i++) {\n        var elt = this.model[i];\n        //if (elt instanceof Array) { // TODO - optgroups? update model !\n        //    var count_i = elt.length;\n        //    for (var j = 0; j < count_i; j++)\n        //        html += \"<option>\" + elt[j] + \"</option>\";\n        //}\n        //else\n        entries.push(\"<option>\" + elt + \"</option>\");\n      }\n      // TODO: remove innerHTML, port to DOM\n      this.dom.innerHTML = \"<select>\" + entries.join(\"\") + \"</select>\";\n      this.impl = this.dom.firstChild;\n    }\n  }, {\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.$updateImpl();\n      this.implicitWidth = this.impl.offsetWidth;\n      this.implicitHeight = this.impl.offsetHeight;\n    }\n  }, {\n    key: \"$onModelChanged\",\n    value: function $onModelChanged() {\n      this.$updateImpl();\n    }\n  }]);\n\n  return _class13;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick.Controls\",\n  name: \"ScrollView\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    contentItem: \"Item\",\n    flickableItem: \"Item\", // TODO  0) implement it  1) make it read-only\n    viewport: \"Item\", // TODO\n    frameVisible: \"bool\",\n    highlightOnFocus: \"bool\", // TODO test\n    verticalScrollBarPolicy: \"enum\",\n    horizontalScrollBarPolicy: \"enum\",\n    style: \"Component\" // TODO\n  },\n  defaultProperty: \"contentItem\"\n}, function () {\n  function _class14(meta) {\n    _classCallCheck(this, _class14);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.css.pointerEvents = \"auto\";\n    this.setupFocusOnDom(this.dom);\n\n    this.contentItemChanged.connect(this, this.$onContentItemChanged);\n    this.flickableItemChanged.connect(this, this.$onFlickableItemChanged);\n    this.viewportChanged.connect(this, this.$onViewportChanged);\n    this.frameVisibleChanged.connect(this, this.$onFrameVisibleChanged);\n    this.highlightOnFocusChanged.connect(this, this.$onHighlightOnFocusChanged);\n    this.horizontalScrollBarPolicyChanged.connect(this, this.$onHorizontalScrollBarPolicyChanged);\n    this.verticalScrollBarPolicyChanged.connect(this, this.$onVerticalScrollBarPolicyChanged);\n    this.styleChanged.connect(this, this.$onStyleChanged);\n    this.childrenChanged.connect(this, this.$onChildrenChanged);\n    this.focusChanged.connect(this, this.$onFocusChanged);\n\n    this.width = this.implicitWidth = 240; // default QML ScrollView width\n    this.height = this.implicitHeight = 150; // default QML ScrollView height\n    this.width = this.implicitWidth;\n    this.height = this.implicitHeight;\n\n    var Qt = QmlWeb.Qt;\n    this.contentItem = undefined;\n    this.flickableItem = undefined;\n    this.viewport = undefined;\n    this.frameVisible = false;\n    this.highlightOnFocus = false;\n    this.verticalScrollBarPolicy = Qt.ScrollBarAsNeeded;\n    this.horizontalScrollBarPolicy = Qt.ScrollBarAsNeeded;\n    this.style = undefined;\n  }\n\n  _createClass(_class14, [{\n    key: \"$onContentItemChanged\",\n    value: function $onContentItemChanged(newItem) {\n      if ((typeof newItem === \"undefined\" ? \"undefined\" : _typeof(newItem)) !== undefined) {\n        newItem.parent = this;\n      }\n    }\n  }, {\n    key: \"$onFlickableItemChanged\",\n    value: function $onFlickableItemChanged() {}\n  }, {\n    key: \"$onHighlightOnFocusChanged\",\n    value: function $onHighlightOnFocusChanged() {}\n  }, {\n    key: \"$onViewportChanged\",\n    value: function $onViewportChanged() {}\n  }, {\n    key: \"$onFocusChanged\",\n    value: function $onFocusChanged(focus) {\n      this.css.outline = this.highlight && focus ? \"outline: lightblue solid 2px;\" : \"\";\n    }\n  }, {\n    key: \"$onFrameVisibleChanged\",\n    value: function $onFrameVisibleChanged(visible) {\n      this.css.border = visible ? \"1px solid gray\" : \"hidden\";\n    }\n  }, {\n    key: \"$onHorizontalScrollBarPolicyChanged\",\n    value: function $onHorizontalScrollBarPolicyChanged(newPolicy) {\n      this.css.overflowX = this.$scrollBarPolicyToCssOverflow(newPolicy);\n    }\n  }, {\n    key: \"$onVerticalScrollBarPolicyChanged\",\n    value: function $onVerticalScrollBarPolicyChanged(newPolicy) {\n      this.css.overflowY = this.$scrollBarPolicyToCssOverflow(newPolicy);\n    }\n  }, {\n    key: \"$onStyleChanged\",\n    value: function $onStyleChanged() {}\n  }, {\n    key: \"$onChildrenChanged\",\n    value: function $onChildrenChanged() {\n      if (typeof this.contentItem === \"undefined\" && this.children.length === 1) {\n        this.contentItem = this.children[0];\n      }\n    }\n  }, {\n    key: \"$scrollBarPolicyToCssOverflow\",\n    value: function $scrollBarPolicyToCssOverflow(policy) {\n      var Qt = QmlWeb.Qt;\n      switch (policy) {\n        case Qt.ScrollBarAsNeeded:\n          return \"auto\";\n        case Qt.ScrollBarAlwaysOff:\n          return \"hidden\";\n        case Qt.ScrollBarAlwaysOn:\n          return \"scroll\";\n      }\n      return \"auto\";\n    }\n  }]);\n\n  return _class14;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick.Controls\",\n  name: \"TextArea\",\n  versions: /.*/,\n  baseClass: \"QtQuick.TextEdit\"\n}, function () {\n  function _class15(meta) {\n    _classCallCheck(this, _class15);\n\n    QmlWeb.callSuper(this, meta);\n    var textarea = this.impl;\n    textarea.style.padding = \"5px\";\n    textarea.style.borderWidth = \"1px\";\n    textarea.style.backgroundColor = \"#fff\";\n  }\n\n  return _class15;\n}());\n\n/**\n *\n * TextField is used to accept a line of text input.\n * Input constraints can be placed on a TextField item\n * (for example, through a validator or inputMask).\n * Setting echoMode to an appropriate value enables TextField\n * to be used for a password input field.\n *\n * Valid entries for echoMode and alignment are defined in TextInput.\n *\n */\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick.Controls\",\n  name: \"TextField\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  enums: {\n    TextInput: { Normal: 0, Password: 1, NoEcho: 2, PasswordEchoOnEdit: 3 }\n  },\n  properties: {\n    text: \"string\",\n    maximumLength: { type: \"int\", initialValue: -1 },\n    readOnly: \"bool\",\n    validator: \"var\",\n    echoMode: \"enum\" // TextInput.Normal\n  },\n  signals: {\n    accepted: []\n  }\n}, function () {\n  function _class16(meta) {\n    var _this19 = this;\n\n    _classCallCheck(this, _class16);\n\n    QmlWeb.callSuper(this, meta);\n\n    var QMLFont = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Font\");\n    this.font = new QMLFont(this);\n\n    var input = this.impl = document.createElement(\"input\");\n    input.type = \"text\";\n    input.disabled = true;\n    input.style.pointerEvents = \"auto\";\n    input.style.margin = \"0\";\n    input.style.width = \"100%\";\n    this.dom.appendChild(input);\n    this.setupFocusOnDom(input);\n    input.disabled = false;\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n    this.textChanged.connect(this, this.$onTextChanged);\n    this.echoModeChanged.connect(this, this.$onEchoModeChanged);\n    this.maximumLengthChanged.connect(this, this.$onMaximumLengthChanged);\n    this.readOnlyChanged.connect(this, this.$onReadOnlyChanged);\n    this.Keys.pressed.connect(this, this.Keys$onPressed);\n\n    this.impl.addEventListener(\"input\", function () {\n      return _this19.$updateValue();\n    });\n  }\n\n  _createClass(_class16, [{\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.implicitWidth = this.impl.offsetWidth;\n      this.implicitHeight = this.impl.offsetHeight;\n    }\n  }, {\n    key: \"$onTextChanged\",\n    value: function $onTextChanged(newVal) {\n      // See TextInput for comments\n      if (this.impl.value !== newVal) {\n        this.impl.value = newVal;\n      }\n    }\n  }, {\n    key: \"$onEchoModeChanged\",\n    value: function $onEchoModeChanged(newVal) {\n      var TextInput = this.TextInput;\n      var input = this.impl;\n      switch (newVal) {\n        case TextInput.Normal:\n          input.type = \"text\";\n          break;\n        case TextInput.Password:\n          input.type = \"password\";\n          break;\n        case TextInput.NoEcho:\n          // Not supported, use password, that's nearest\n          input.type = \"password\";\n          break;\n        case TextInput.PasswordEchoOnEdit:\n          // Not supported, use password, that's nearest\n          input.type = \"password\";\n          break;\n      }\n    }\n  }, {\n    key: \"$onMaximumLengthChanged\",\n    value: function $onMaximumLengthChanged(newVal) {\n      this.impl.maxLength = newVal < 0 ? null : newVal;\n    }\n  }, {\n    key: \"$onReadOnlyChanged\",\n    value: function $onReadOnlyChanged(newVal) {\n      this.impl.disabled = newVal;\n    }\n  }, {\n    key: \"Keys$onPressed\",\n    value: function Keys$onPressed(e) {\n      var Qt = QmlWeb.Qt;\n      var submit = e.key === Qt.Key_Return || e.key === Qt.Key_Enter;\n      if (submit && this.$testValidator()) {\n        this.accepted();\n        e.accepted = true;\n      }\n    }\n  }, {\n    key: \"$testValidator\",\n    value: function $testValidator() {\n      if (this.validator) {\n        return this.validator.validate(this.text);\n      }\n      return true;\n    }\n  }, {\n    key: \"$updateValue\",\n    value: function $updateValue() {\n      if (this.text !== this.impl.value) {\n        this.$canEditReadOnlyProperties = true;\n        this.text = this.impl.value;\n        this.$canEditReadOnlyProperties = false;\n      }\n    }\n  }]);\n\n  return _class16;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick.Window\",\n  name: \"Screen\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    name: \"string\",\n    orientation: \"enum\",\n    orientationUpdateMask: \"enum\",\n    primaryOrientation: \"enum\",\n    pixelDensity: \"real\",\n    devicePixelRatio: \"real\",\n    desktopAvailableHeight: \"int\",\n    desktopAvailableWidth: \"int\",\n    height: \"int\",\n    width: \"int\"\n  }\n}, function () {\n  function _class17(meta) {\n    _classCallCheck(this, _class17);\n\n    QmlWeb.callSuper(this, meta);\n\n    // TODO: rewrite as an attached object and forbid constructing\n    this.Component.completed.connect(this, this.Component$onCompleted);\n  }\n\n  _createClass(_class17, [{\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      var Qt = QmlWeb.Qt;\n      this.desktopAvailableHeight = window.outerHeight;\n      this.desktopAvailableWidth = window.outerWidth;\n      this.devicePixelRatio = window.devicePixelRatio;\n      this.height = window.innerHeight;\n      this.name = this.name;\n      this.orientation = Qt.PrimaryOrientation;\n      this.orientationUpdateMask = 0;\n      this.pixelDensity = 100.0; // TODO\n      this.primaryOrientation = Qt.PrimaryOrientation;\n      this.width = window.innerWidth;\n    }\n  }]);\n\n  return _class17;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"AnimatedImage\",\n  versions: /.*/,\n  baseClass: \"Image\"\n}, function () {\n  function _class18(meta) {\n    _classCallCheck(this, _class18);\n\n    QmlWeb.callSuper(this, meta);\n  }\n\n  return _class18;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Animation\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  enums: {\n    Animation: { Infinite: -1 },\n    Easing: QmlWeb.Easing\n  },\n  properties: {\n    alwaysRunToEnd: \"bool\",\n    loops: { type: \"int\", initialValue: 1 },\n    paused: \"bool\",\n    running: \"bool\"\n  }\n}, function () {\n  function _class19(meta) {\n    _classCallCheck(this, _class19);\n\n    QmlWeb.callSuper(this, meta);\n  }\n\n  _createClass(_class19, [{\n    key: \"restart\",\n    value: function restart() {\n      this.stop();\n      this.start();\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.running = true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.running = false;\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.paused = true;\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.paused = false;\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      // To be overridden\n      console.log(\"Unbound method for\", this);\n    }\n  }]);\n\n  return _class19;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Behavior\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    animation: \"Animation\",\n    enabled: { type: \"bool\", initialValue: true }\n  },\n  defaultProperty: \"animation\"\n}, function () {\n  function _class20(meta) {\n    _classCallCheck(this, _class20);\n\n    QmlWeb.callSuper(this, meta);\n    this.$on = meta.object.$on;\n\n    this.animationChanged.connect(this, this.$onAnimationChanged);\n    this.enabledChanged.connect(this, this.$onEnabledChanged);\n  }\n\n  _createClass(_class20, [{\n    key: \"$onAnimationChanged\",\n    value: function $onAnimationChanged(newVal) {\n      newVal.target = this.$parent;\n      newVal.property = this.$on;\n      this.$parent.$properties[this.$on].animation = newVal;\n    }\n  }, {\n    key: \"$onEnabledChanged\",\n    value: function $onEnabledChanged(newVal) {\n      this.$parent.$properties[this.$on].animation = newVal ? this.animation : null;\n    }\n  }]);\n\n  return _class20;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"BorderImage\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  enums: {\n    BorderImage: {\n      Stretch: \"stretch\", Repeat: \"repeat\", Round: \"round\",\n      Null: 1, Ready: 2, Loading: 3, Error: 4\n    }\n  },\n  properties: {\n    source: \"url\",\n    smooth: { type: \"bool\", initialValue: true },\n    // BorderImage.Stretch\n    horizontalTileMode: { type: \"enum\", initialValue: \"stretch\" },\n    // BorderImage.Stretch\n    verticalTileMode: { type: \"enum\", initialValue: \"stretch\" },\n    progress: \"real\",\n    status: { type: \"enum\", initialValue: 1 } // BorderImage.Null\n  }\n}, function () {\n  function _class21(meta) {\n    var _this20 = this;\n\n    _classCallCheck(this, _class21);\n\n    QmlWeb.callSuper(this, meta);\n\n    var createProperty = QmlWeb.createProperty;\n    this.border = new QmlWeb.QObject(this);\n    createProperty(\"int\", this.border, \"left\");\n    createProperty(\"int\", this.border, \"right\");\n    createProperty(\"int\", this.border, \"top\");\n    createProperty(\"int\", this.border, \"bottom\");\n\n    var bg = this.impl = document.createElement(\"div\");\n    bg.style.pointerEvents = \"none\";\n    bg.style.height = \"100%\";\n    bg.style.boxSizing = \"border-box\";\n    this.dom.appendChild(bg);\n\n    this.$img = new Image();\n    this.$img.addEventListener(\"load\", function () {\n      _this20.progress = 1;\n      _this20.status = _this20.BorderImage.Ready;\n    });\n    this.$img.addEventListener(\"error\", function () {\n      _this20.status = _this20.BorderImage.Error;\n    });\n\n    this.sourceChanged.connect(this, this.$onSourceChanged);\n    this.border.leftChanged.connect(this, this.$updateBorder);\n    this.border.rightChanged.connect(this, this.$updateBorder);\n    this.border.topChanged.connect(this, this.$updateBorder);\n    this.border.bottomChanged.connect(this, this.$updateBorder);\n    this.horizontalTileModeChanged.connect(this, this.$updateBorder);\n    this.verticalTileModeChanged.connect(this, this.$updateBorder);\n    this.smoothChanged.connect(this, this.$onSmoothChanged);\n  }\n\n  _createClass(_class21, [{\n    key: \"$onSourceChanged\",\n    value: function $onSourceChanged(source) {\n      this.progress = 0;\n      this.status = this.BorderImage.Loading;\n      var style = this.impl.style;\n      var imageURL = QmlWeb.engine.$resolveImageURL(source);\n      style.OBorderImageSource = \"url(\\\"\" + imageURL + \"\\\")\";\n      style.borderImageSource = \"url(\\\"\" + imageURL + \"\\\")\";\n      this.$img.src = imageURL;\n      if (this.$img.complete) {\n        this.progress = 1;\n        this.status = this.BorderImage.Ready;\n      }\n    }\n  }, {\n    key: \"$updateBorder\",\n    value: function $updateBorder() {\n      var style = this.impl.style;\n      var _border = this.border,\n          right = _border.right,\n          left = _border.left,\n          top = _border.top,\n          bottom = _border.bottom;\n\n      var slice = top + \" \" + right + \" \" + bottom + \" \" + left + \" fill\";\n      var width = top + \"px \" + right + \"px \" + bottom + \"px \" + left + \"px\";\n      var repeat = this.horizontalTileMode + \" \" + this.verticalTileMode;\n      style.OBorderImageSlice = slice;\n      style.OBorderImageRepeat = repeat;\n      style.OBorderImageWidth = width;\n      style.borderImageSlice = slice;\n      style.borderImageRepeat = repeat;\n      style.borderImageWidth = width;\n    }\n  }, {\n    key: \"$onSmoothChanged\",\n    value: function $onSmoothChanged(val) {\n      var style = this.impl.style;\n      if (val) {\n        style.imageRendering = \"auto\";\n      } else {\n        style.imageRendering = \"-webkit-optimize-contrast\";\n        style.imageRendering = \"-moz-crisp-edges\";\n        style.imageRendering = \"crisp-edges\";\n        style.imageRendering = \"pixelated\";\n      }\n    }\n  }]);\n\n  return _class21;\n}());\n\n// TODO\n// Currently only a skeleton implementation\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Canvas\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    available: { type: \"bool\", initialValue: true },\n    canvasSize: { type: \"var\", initialValue: [0, 0] },\n    canvasWindow: { type: \"var\", initialValue: [0, 0, 0, 0] },\n    context: { type: \"var\", initialValue: {} },\n    contextType: { type: \"string\", initialValue: \"contextType\" },\n    renderStrategy: \"enum\",\n    renderTarget: \"enum\",\n    tileSize: { type: \"var\", initialValue: [0, 0] }\n  },\n  signals: {\n    imageLoaded: [],\n    paint: [{ type: \"var\", name: \"region\" }],\n    painted: []\n  }\n}, function () {\n  function _class22(meta) {\n    _classCallCheck(this, _class22);\n\n    QmlWeb.callSuper(this, meta);\n  }\n\n  _createClass(_class22, [{\n    key: \"cancelRequestAnimationFrame\",\n    value: function cancelRequestAnimationFrame() /*handle*/{\n      return false;\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() /*context_id, ...args*/{\n      return {};\n    }\n  }, {\n    key: \"isImageError\",\n    value: function isImageError() /*image*/{\n      return true;\n    }\n  }, {\n    key: \"isImageLoaded\",\n    value: function isImageLoaded() /*image*/{\n      return false;\n    }\n  }, {\n    key: \"isImageLoading\",\n    value: function isImageLoading() /*image*/{\n      return false;\n    }\n  }, {\n    key: \"loadImage\",\n    value: function loadImage(image) {\n      //loadImageAsync(image);\n      if (this.isImageLoaded(image)) {\n        this.imageLoaded();\n      }\n    }\n  }, {\n    key: \"markDirty\",\n    value: function markDirty(area) {\n      // if dirty\n      this.paint(area);\n    }\n  }, {\n    key: \"requestAnimationFrame\",\n    value: function requestAnimationFrame() /*callback*/{\n      return 0;\n    }\n  }, {\n    key: \"requestPaint\",\n    value: function requestPaint() {}\n  }, {\n    key: \"save\",\n    value: function save() /*file_name*/{\n      return false;\n    }\n  }, {\n    key: \"toDataURL\",\n    value: function toDataURL() /*mime_type*/{\n      return \"\";\n    }\n  }, {\n    key: \"unloadImage\",\n    value: function unloadImage() /*image*/{}\n  }]);\n\n  return _class22;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Column\",\n  versions: /.*/,\n  baseClass: \"Positioner\"\n}, function () {\n  function _class23(meta) {\n    _classCallCheck(this, _class23);\n\n    QmlWeb.callSuper(this, meta);\n  }\n\n  _createClass(_class23, [{\n    key: \"layoutChildren\",\n    value: function layoutChildren() {\n      var curPos = 0;\n      var maxWidth = 0;\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        if (!child.visible || !child.width || !child.height) {\n          continue;\n        }\n        maxWidth = child.width > maxWidth ? child.width : maxWidth;\n        child.y = curPos;\n        curPos += child.height + this.spacing;\n      }\n      this.implicitWidth = maxWidth;\n      this.implicitHeight = curPos - this.spacing;\n      // We want no spacing at the bottom side\n    }\n  }]);\n\n  return _class23;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"DoubleValidator\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  enums: {\n    DoubleValidator: { StandardNotation: 1, ScientificNotation: 2 }\n  },\n  properties: {\n    bottom: { type: \"real\", initialValue: -Infinity },\n    top: { type: \"real\", initialValue: Infinity },\n    decimals: { type: \"int\", initialValue: 1000 },\n    // DoubleValidator.ScientificNotation\n    notation: { type: \"enum\", initialValue: 2 }\n  }\n}, function () {\n  function _class24(meta) {\n    _classCallCheck(this, _class24);\n\n    QmlWeb.callSuper(this, meta);\n    this.$standardRegExp = /^(-|\\+)?\\s*[0-9]+(\\.[0-9]+)?$/;\n    this.$scientificRegExp = /^(-|\\+)?\\s*[0-9]+(\\.[0-9]+)?(E(-|\\+)?[0-9]+)?$/;\n  }\n\n  _createClass(_class24, [{\n    key: \"getRegExpForNotation\",\n    value: function getRegExpForNotation(notation) {\n      switch (notation) {\n        case this.DoubleValidator.ScientificNotation:\n          return this.$scientificRegExp;\n        case this.DoubleValidator.StandardNotation:\n          return this.$standardRegExp;\n      }\n      return null;\n    }\n  }, {\n    key: \"$getDecimalsForNumber\",\n    value: function $getDecimalsForNumber(number) {\n      if (Math.round(number) === number) {\n        return 0;\n      }\n      var str = \"\" + number;\n      return (/\\d*$/.exec(str)[0].length\n      );\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(string) {\n      var regExp = this.getRegExpForNotation(this.notation);\n      if (!regExp.test(string.trim())) {\n        return false;\n      }\n      var value = parseFloat(string);\n      return this.bottom <= value && this.top >= value && this.$getDecimalsForNumber(value) <= this.decimals;\n    }\n  }]);\n\n  return _class24;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Flow\",\n  versions: /.*/,\n  baseClass: \"Positioner\",\n  enums: {\n    Flow: { LeftToRight: 0, TopToBottom: 1 }\n  },\n  properties: {\n    flow: \"enum\", // Flow.LeftToRight\n    layoutDirection: \"enum\" // Flow.LeftToRight\n  }\n}, function () {\n  function _class25(meta) {\n    _classCallCheck(this, _class25);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.flowChanged.connect(this, this.layoutChildren);\n    this.layoutDirectionChanged.connect(this, this.layoutChildren);\n    this.widthChanged.connect(this, this.layoutChildren);\n    this.heightChanged.connect(this, this.layoutChildren);\n    this.layoutChildren();\n  }\n\n  _createClass(_class25, [{\n    key: \"layoutChildren\",\n    value: function layoutChildren() {\n      if (this.flow === undefined) {\n        // Flow has not been fully initialized yet\n        return;\n      }\n\n      var curHPos = 0;\n      var curVPos = 0;\n      var rowSize = 0;\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        if (!child.visible || !child.width || !child.height) {\n          continue;\n        }\n\n        if (this.flow === this.Flow.LeftToRight) {\n          if (!this.$isUsingImplicitWidth && curHPos + child.width > this.width) {\n            curHPos = 0;\n            curVPos += rowSize + this.spacing;\n            rowSize = 0;\n          }\n          rowSize = child.height > rowSize ? child.height : rowSize;\n          child.x = this.layoutDirection === this.Flow.TopToBottom ? this.width - curHPos - child.width : curHPos;\n          child.y = curVPos;\n          curHPos += child.width + this.spacing;\n        } else {\n          // Flow.TopToBottom\n          if (!this.$isUsingImplicitHeight && curVPos + child.height > this.height) {\n            curVPos = 0;\n            curHPos += rowSize + this.spacing;\n            rowSize = 0;\n          }\n          rowSize = child.width > rowSize ? child.width : rowSize;\n          child.x = this.layoutDirection === this.Flow.TopToBottom ? this.width - curHPos - child.width : curHPos;\n          child.y = curVPos;\n          curVPos += child.height + this.spacing;\n        }\n      }\n\n      if (this.flow === this.Flow.LeftToRight) {\n        this.implicitWidth = curHPos - this.spacing;\n        this.implicitHeight = curVPos + rowSize;\n      } else {\n        // Flow.TopToBottom\n        this.implicitWidth = curHPos + rowSize;\n        this.implicitHeight = curVPos - this.spacing;\n      }\n    }\n  }]);\n\n  return _class25;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Font\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\"\n}, function (_QmlWeb$QObject3) {\n  _inherits(_class26, _QmlWeb$QObject3);\n\n  function _class26(parent) {\n    _classCallCheck(this, _class26);\n\n    // TODO: callSuper support?\n    var _this21 = _possibleConstructorReturn(this, (_class26.__proto__ || Object.getPrototypeOf(_class26)).call(this, parent));\n\n    _this21.Font = global.Font; // TODO: make a sane enum\n\n    var Font = _this21.Font;\n    var createProperty = QmlWeb.createProperty;\n\n    createProperty(\"bool\", _this21, \"bold\");\n    createProperty(\"enum\", _this21, \"capitalization\", { initialValue: Font.MixedCase });\n    createProperty(\"string\", _this21, \"family\", { initialValue: \"sans-serif\" });\n    createProperty(\"bool\", _this21, \"italic\");\n    createProperty(\"real\", _this21, \"letterSpacing\");\n    createProperty(\"int\", _this21, \"pixelSize\", { initialValue: 13 });\n    createProperty(\"real\", _this21, \"pointSize\", { initialValue: 10 });\n    createProperty(\"bool\", _this21, \"strikeout\");\n    createProperty(\"bool\", _this21, \"underline\");\n    createProperty(\"enum\", _this21, \"weight\", { initialValue: Font.Normal });\n    createProperty(\"real\", _this21, \"wordSpacing\");\n\n    _this21.$sizeLock = false;\n\n    _this21.boldChanged.connect(_this21, _this21.$onBoldChanged);\n    _this21.capitalizationChanged.connect(_this21, _this21.$onCapitalizationChanged);\n    _this21.familyChanged.connect(_this21, _this21.$onFamilyChanged);\n    _this21.italicChanged.connect(_this21, _this21.$onItalicChanged);\n    _this21.letterSpacingChanged.connect(_this21, _this21.$onLetterSpacingChanged);\n    _this21.pixelSizeChanged.connect(_this21, _this21.$onPixelSizeChanged);\n    _this21.pointSizeChanged.connect(_this21, _this21.$onPointSizeChanged);\n    _this21.strikeoutChanged.connect(_this21, _this21.$onStrikeoutChanged);\n    _this21.underlineChanged.connect(_this21, _this21.$onUnderlineChanged);\n    _this21.weightChanged.connect(_this21, _this21.$onWidthChanged);\n    _this21.wordSpacingChanged.connect(_this21, _this21.$onWordSpacingChanged);\n    return _this21;\n  }\n\n  _createClass(_class26, [{\n    key: \"$onBoldChanged\",\n    value: function $onBoldChanged(newVal) {\n      var Font = this.Font;\n      this.weight = newVal ? Font.Bold : Font.Normal;\n    }\n  }, {\n    key: \"$onCapitalizationChanged\",\n    value: function $onCapitalizationChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.fontVariant = newVal === this.Font.SmallCaps ? \"small-caps\" : \"none\";\n      style.textTransform = this.$capitalizationToTextTransform(newVal);\n    }\n  }, {\n    key: \"$onFamilyChanged\",\n    value: function $onFamilyChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.fontFamily = newVal;\n    }\n  }, {\n    key: \"$onItalicChanged\",\n    value: function $onItalicChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.fontStyle = newVal ? \"italic\" : \"normal\";\n    }\n  }, {\n    key: \"$onLetterSpacingChanged\",\n    value: function $onLetterSpacingChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.letterSpacing = newVal !== undefined ? newVal + \"px\" : \"\";\n    }\n  }, {\n    key: \"$onPixelSizeChanged\",\n    value: function $onPixelSizeChanged(newVal) {\n      if (!this.$sizeLock) {\n        this.pointSize = newVal * 0.75;\n      }\n      var val = newVal + \"px\";\n      this.$parent.dom.style.fontSize = val;\n      this.$parent.dom.firstChild.style.fontSize = val;\n    }\n  }, {\n    key: \"$onPointSizeChanged\",\n    value: function $onPointSizeChanged(newVal) {\n      this.$sizeLock = true;\n      this.pixelSize = Math.round(newVal / 0.75);\n      this.$sizeLock = false;\n    }\n  }, {\n    key: \"$onStrikeoutChanged\",\n    value: function $onStrikeoutChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.textDecoration = newVal ? \"line-through\" : this.$parent.font.underline ? \"underline\" : \"none\";\n    }\n  }, {\n    key: \"$onUnderlineChanged\",\n    value: function $onUnderlineChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.textDecoration = this.$parent.font.strikeout ? \"line-through\" : newVal ? \"underline\" : \"none\";\n    }\n  }, {\n    key: \"$onWidthChanged\",\n    value: function $onWidthChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.fontWeight = this.$weightToCss(newVal);\n    }\n  }, {\n    key: \"$onWordSpacingChanged\",\n    value: function $onWordSpacingChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.wordSpacing = newVal !== undefined ? newVal + \"px\" : \"\";\n    }\n  }, {\n    key: \"$weightToCss\",\n    value: function $weightToCss(weight) {\n      var Font = this.Font;\n      switch (weight) {\n        case Font.Thin:\n          return \"100\";\n        case Font.ExtraLight:\n          return \"200\";\n        case Font.Light:\n          return \"300\";\n        case Font.Normal:\n          return \"400\";\n        case Font.Medium:\n          return \"500\";\n        case Font.DemiBold:\n          return \"600\";\n        case Font.Bold:\n          return \"700\";\n        case Font.ExtraBold:\n          return \"800\";\n        case Font.Black:\n          return \"900\";\n      }\n      return \"normal\";\n    }\n  }, {\n    key: \"$capitalizationToTextTransform\",\n    value: function $capitalizationToTextTransform(capitalization) {\n      var Font = this.Font;\n      switch (capitalization) {\n        case Font.AllUppercase:\n          return \"uppercase\";\n        case Font.AllLowercase:\n          return \"lowercase\";\n        case Font.Capitalize:\n          return \"capitalize\";\n      }\n      return \"none\";\n    }\n  }]);\n\n  return _class26;\n}(QmlWeb.QObject));\n\nglobal.Font = {\n  // Capitalization\n  MixedCase: 0,\n  AllUppercase: 1,\n  AllLowercase: 2,\n  SmallCaps: 3,\n  Capitalize: 4,\n  // Weight\n  Thin: 0,\n  ExtraLight: 12,\n  Light: 25,\n  Normal: 50,\n  Medium: 57,\n  DemiBold: 63,\n  Bold: 75,\n  ExtraBold: 81,\n  Black: 87\n};\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"FontLoader\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  enums: {\n    FontLoader: { Null: 0, Ready: 1, Loading: 2, Error: 3 }\n  },\n  properties: {\n    name: \"string\",\n    source: \"url\",\n    status: \"enum\" // FontLoader.Null\n  }\n}, function () {\n  function _class27(meta) {\n    _classCallCheck(this, _class27);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$domStyle = document.createElement(\"style\");\n    this.$lastName = \"\";\n    this.$inTouchName = false;\n\n    /*\n      Maximum timeout is the maximum time for a font to load. If font isn't\n      loaded in this time, the status is set to Error.\n      For both cases (with and without FontLoader.js) if the font takes more\n      than the maximum timeout to load, dimensions recalculations for elements\n      that are using this font will not be triggered or will have no effect.\n       FontLoader.js uses only the last timeout. The state and name properties\n      are set immediately when the font loads. If the font could not be loaded,\n      the Error status will be set only when this timeout expires. If the font\n      loading takes more than the timeout, the name property is set, but the\n      status is set to Error.\n       Fallback sets the font name immediately and touches it several times to\n      trigger dimensions recalcuations. The status is set to Error and should\n      not be used.\n    */\n    // 15 seconds maximum\n    this.$timeouts = [20, 50, 100, 300, 500, 1000, 3000, 5000, 10000, 15000];\n\n    this.sourceChanged.connect(this, this.$onSourceChanged);\n    this.nameChanged.connect(this, this.$onNameChanged);\n  }\n\n  _createClass(_class27, [{\n    key: \"$loadFont\",\n    value: function $loadFont(fontName) {\n      var _this22 = this;\n\n      /* global FontLoader */\n      if (this.$lastName === fontName || this.$inTouchName) {\n        return;\n      }\n      this.$lastName = fontName;\n\n      if (!fontName) {\n        this.status = this.FontLoader.Null;\n        return;\n      }\n      this.status = this.FontLoader.Loading;\n      if (typeof FontLoader === \"function\") {\n        var fontLoader = new FontLoader([fontName], {\n          fontsLoaded: function fontsLoaded(error) {\n            if (error !== null) {\n              if (_this22.$lastName === fontName && error.notLoadedFontFamilies[0] === fontName) {\n                // Set the name for the case of font loading after the timeout.\n                _this22.name = fontName;\n                _this22.status = _this22.FontLoader.Error;\n              }\n            }\n          },\n          fontLoaded: function fontLoaded(fontFamily) {\n            if (_this22.$lastName === fontName && fontFamily === fontName) {\n              _this22.name = fontName;\n              _this22.status = _this22.FontLoader.Ready;\n            }\n          }\n        }, this.$timeouts[this.$timeouts.length - 1]);\n        // Else I get problems loading multiple fonts (FontLoader.js bug?)\n        FontLoader.testDiv = null;\n        fontLoader.loadFonts();\n      } else {\n        console.warn(\"FontLoader.js library is not loaded.\\nYou should load FontLoader.js if you want to use QtQuick FontLoader elements.\\nRefs: https://github.com/smnh/FontLoader.\");\n        // You should not rely on 'status' property without FontLoader.js.\n        this.status = this.FontLoader.Error;\n        this.name = fontName;\n        this.$cycleTouchName(fontName, 0);\n      }\n    }\n  }, {\n    key: \"$cycleTouchName\",\n    value: function $cycleTouchName(fontName, i) {\n      var _this23 = this;\n\n      if (this.$lastName !== fontName) {\n        return;\n      }\n      if (i > 0) {\n        var name = this.name;\n        this.$inTouchName = true;\n        // Calling this.nameChanged() is not enough, we have to actually change\n        // the value to flush the bindings.\n        this.name = \"sans-serif\";\n        this.name = name;\n        this.$inTouchName = false;\n      }\n      if (i < this.$timeouts.length) {\n        setTimeout(function () {\n          _this23.$cycleTouchName(fontName, i + 1);\n        }, this.$timeouts[i] - (i > 0 ? this.$timeouts[i - 1] : 0));\n      }\n    }\n  }, {\n    key: \"$onSourceChanged\",\n    value: function $onSourceChanged(font_src) {\n      var rand = Math.round(Math.random() * 1e15);\n      var fontName = \"font_\" + Date.now().toString(36) + \"_\" + rand.toString(36);\n      this.$domStyle.innerHTML = \"@font-face {\\n      font-family: \" + fontName + \";\\n      src: url('\" + font_src + \"');\\n    }\";\n      document.getElementsByTagName(\"head\")[0].appendChild(this.$domStyle);\n      this.$loadFont(fontName);\n    }\n  }, {\n    key: \"$onNameChanged\",\n    value: function $onNameChanged(fontName) {\n      this.$loadFont(fontName);\n    }\n  }]);\n\n  return _class27;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Grid\",\n  versions: /.*/,\n  baseClass: \"Positioner\",\n  enums: {\n    Grid: { LeftToRight: 0, TopToBottom: 1 }\n  },\n  properties: {\n    columns: \"int\",\n    rows: \"int\",\n    flow: \"enum\",\n    layoutDirection: \"enum\"\n  }\n}, function () {\n  function _class28(meta) {\n    _classCallCheck(this, _class28);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.columnsChanged.connect(this, this.layoutChildren);\n    this.rowsChanged.connect(this, this.layoutChildren);\n    this.flowChanged.connect(this, this.layoutChildren);\n    this.layoutDirectionChanged.connect(this, this.layoutChildren);\n    this.layoutChildren();\n  }\n\n  _createClass(_class28, [{\n    key: \"layoutChildren\",\n    value: function layoutChildren() {\n      // How many items are actually visible?\n      var visibleItems = this.$getVisibleItems();\n\n      // How many rows and columns do we need?\n\n      var _$calculateSize = this.$calculateSize(visibleItems.length),\n          _$calculateSize2 = _slicedToArray(_$calculateSize, 2),\n          c = _$calculateSize2[0],\n          r = _$calculateSize2[1];\n\n      // How big are the colums/rows?\n\n\n      var _$calculateGrid = this.$calculateGrid(visibleItems, c, r),\n          _$calculateGrid2 = _slicedToArray(_$calculateGrid, 2),\n          colWidth = _$calculateGrid2[0],\n          rowHeight = _$calculateGrid2[1];\n\n      // Do actual positioning\n      // When layoutDirection is RightToLeft we need oposite order of coumns\n\n\n      var step = this.layoutDirection === 1 ? -1 : 1;\n      var startingPoint = this.layoutDirection === 1 ? c - 1 : 0;\n      var endPoint = this.layoutDirection === 1 ? -1 : c;\n      var curHPos = 0;\n      var curVPos = 0;\n      if (this.flow === 0) {\n        for (var i = 0; i < r; i++) {\n          for (var j = startingPoint; j !== endPoint; j += step) {\n            var item = visibleItems[i * c + j];\n            if (!item) {\n              break;\n            }\n            item.x = curHPos;\n            item.y = curVPos;\n\n            curHPos += colWidth[j] + this.spacing;\n          }\n          curVPos += rowHeight[i] + this.spacing;\n          curHPos = 0;\n        }\n      } else {\n        for (var _i2 = startingPoint; _i2 !== endPoint; _i2 += step) {\n          for (var _j = 0; _j < r; _j++) {\n            var _item = visibleItems[_i2 * r + _j];\n            if (!_item) {\n              break;\n            }\n            _item.x = curHPos;\n            _item.y = curVPos;\n\n            curVPos += rowHeight[_j] + this.spacing;\n          }\n          curHPos += colWidth[_i2] + this.spacing;\n          curVPos = 0;\n        }\n      }\n\n      // Set implicit size\n      var gridWidth = -this.spacing;\n      var gridHeight = -this.spacing;\n      for (var _i3 in colWidth) {\n        gridWidth += colWidth[_i3] + this.spacing;\n      }\n      for (var _i4 in rowHeight) {\n        gridHeight += rowHeight[_i4] + this.spacing;\n      }\n      this.implicitWidth = gridWidth;\n      this.implicitHeight = gridHeight;\n    }\n  }, {\n    key: \"$getVisibleItems\",\n    value: function $getVisibleItems() {\n      return this.children.filter(function (child) {\n        return child.visible && child.width && child.height;\n      });\n    }\n  }, {\n    key: \"$calculateSize\",\n    value: function $calculateSize(length) {\n      var cols = void 0;\n      var rows = void 0;\n      if (!this.columns && !this.rows) {\n        cols = 4;\n        rows = Math.ceil(length / cols);\n      } else if (!this.columns) {\n        rows = this.rows;\n        cols = Math.ceil(length / rows);\n      } else {\n        cols = this.columns;\n        rows = Math.ceil(length / cols);\n      }\n      return [cols, rows];\n    }\n  }, {\n    key: \"$calculateGrid\",\n    value: function $calculateGrid(visibleItems, cols, rows) {\n      var colWidth = [];\n      var rowHeight = [];\n\n      if (this.flow === 0) {\n        for (var i = 0; i < rows; i++) {\n          for (var j = 0; j < cols; j++) {\n            var item = visibleItems[i * cols + j];\n            if (!item) {\n              break;\n            }\n            if (!colWidth[j] || item.width > colWidth[j]) {\n              colWidth[j] = item.width;\n            }\n            if (!rowHeight[i] || item.height > rowHeight[i]) {\n              rowHeight[i] = item.height;\n            }\n          }\n        }\n      } else {\n        for (var _i5 = 0; _i5 < cols; _i5++) {\n          for (var _j2 = 0; _j2 < rows; _j2++) {\n            var _item2 = visibleItems[_i5 * rows + _j2];\n            if (!_item2) {\n              break;\n            }\n            if (!rowHeight[_j2] || _item2.height > rowHeight[_j2]) {\n              rowHeight[_j2] = _item2.height;\n            }\n            if (!colWidth[_i5] || _item2.width > colWidth[_i5]) {\n              colWidth[_i5] = _item2.width;\n            }\n          }\n        }\n      }\n\n      return [colWidth, rowHeight];\n    }\n  }]);\n\n  return _class28;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Image\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  enums: {\n    Image: {\n      Stretch: 1, PreserveAspectFit: 2, PreserveAspectCrop: 3,\n      Tile: 4, TileVertically: 5, TileHorizontally: 6,\n\n      Null: 1, Ready: 2, Loading: 3, Error: 4\n    }\n  },\n  properties: {\n    asynchronous: { type: \"bool\", initialValue: true },\n    cache: { type: \"bool\", initialValue: true },\n    smooth: { type: \"bool\", initialValue: true },\n    fillMode: { type: \"enum\", initialValue: 1 }, // Image.Stretch\n    mirror: \"bool\",\n    progress: \"real\",\n    source: \"url\",\n    status: { type: \"enum\", initialValue: 1 } // Image.Null\n  }\n}, function () {\n  function _class29(meta) {\n    var _this24 = this;\n\n    _classCallCheck(this, _class29);\n\n    QmlWeb.callSuper(this, meta);\n\n    var createProperty = QmlWeb.createProperty;\n\n    this.sourceSize = new QmlWeb.QObject(this);\n    createProperty(\"int\", this.sourceSize, \"width\");\n    createProperty(\"int\", this.sourceSize, \"height\");\n\n    var bg = this.impl = document.createElement(\"div\");\n    bg.style.pointerEvents = \"none\";\n    bg.style.height = \"100%\";\n    this.dom.appendChild(bg);\n\n    this.$img = new Image();\n    this.$img.addEventListener(\"load\", function () {\n      var w = _this24.$img.naturalWidth;\n      var h = _this24.$img.naturalHeight;\n      _this24.sourceSize.width = w;\n      _this24.sourceSize.height = h;\n      _this24.implicitWidth = w;\n      _this24.implicitHeight = h;\n      _this24.progress = 1;\n      _this24.status = _this24.Image.Ready;\n    });\n    this.$img.addEventListener(\"error\", function () {\n      _this24.status = _this24.Image.Error;\n    });\n\n    this.sourceChanged.connect(this, this.$onSourceChanged);\n    this.mirrorChanged.connect(this, this.$onMirrorChanged);\n    this.fillModeChanged.connect(this, this.$onFillModeChanged);\n    this.smoothChanged.connect(this, this.$onSmoothChanged);\n  }\n\n  _createClass(_class29, [{\n    key: \"$updateFillMode\",\n    value: function $updateFillMode() {\n      var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.fillMode;\n\n      var style = this.impl.style;\n      switch (val) {\n        default:\n        case this.Image.Stretch:\n          style.backgroundRepeat = \"auto\";\n          style.backgroundSize = \"100% 100%\";\n          style.backgroundPosition = \"auto\";\n          break;\n        case this.Image.Tile:\n          style.backgroundRepeat = \"auto\";\n          style.backgroundSize = \"auto\";\n          style.backgroundPosition = \"center\";\n          break;\n        case this.Image.PreserveAspectFit:\n          style.backgroundRepeat = \"no-repeat\";\n          style.backgroundSize = \"contain\";\n          style.backgroundPosition = \"center\";\n          break;\n        case this.Image.PreserveAspectCrop:\n          style.backgroundRepeat = \"no-repeat\";\n          style.backgroundSize = \"cover\";\n          style.backgroundPosition = \"center\";\n          break;\n        case this.Image.TileVertically:\n          style.backgroundRepeat = \"repeat-y\";\n          style.backgroundSize = \"100% auto\";\n          style.backgroundPosition = \"auto\";\n          break;\n        case this.Image.TileHorizontally:\n          style.backgroundRepeat = \"repeat-x\";\n          style.backgroundSize = \"auto 100%\";\n          style.backgroundPosition = \"auto\";\n          break;\n      }\n    }\n  }, {\n    key: \"$onSourceChanged\",\n    value: function $onSourceChanged(source) {\n      this.progress = 0;\n      this.status = this.Image.Loading;\n      var imageURL = QmlWeb.engine.$resolveImageURL(source);\n      this.impl.style.backgroundImage = \"url(\\\"\" + imageURL + \"\\\")\";\n      this.$img.src = imageURL;\n      if (this.$img.complete) {\n        this.progress = 1;\n        this.status = this.Image.Ready;\n      }\n      this.$updateFillMode();\n    }\n  }, {\n    key: \"$onMirrorChanged\",\n    value: function $onMirrorChanged(val) {\n      var transformRule = \"scale(-1,1)\";\n      if (!val) {\n        var index = this.transform.indexOf(transformRule);\n        if (index >= 0) {\n          this.transform.splice(index, 1);\n        }\n      } else {\n        this.transform.push(transformRule);\n      }\n      this.$updateTransform();\n    }\n  }, {\n    key: \"$onFillModeChanged\",\n    value: function $onFillModeChanged(val) {\n      this.$updateFillMode(val);\n    }\n  }, {\n    key: \"$onSmoothChanged\",\n    value: function $onSmoothChanged(val) {\n      var style = this.impl.style;\n      if (val) {\n        style.imageRendering = \"auto\";\n      } else {\n        style.imageRendering = \"-webkit-optimize-contrast\";\n        style.imageRendering = \"-moz-crisp-edges\";\n        style.imageRendering = \"crisp-edges\";\n        style.imageRendering = \"pixelated\";\n      }\n    }\n  }]);\n\n  return _class29;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"IntValidator\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    bottom: { type: \"int\", initialValue: -2147483647 },\n    top: { type: \"int\", initialValue: 2147483647 }\n  }\n}, function () {\n  function _class30(meta) {\n    _classCallCheck(this, _class30);\n\n    QmlWeb.callSuper(this, meta);\n  }\n\n  _createClass(_class30, [{\n    key: \"validate\",\n    value: function validate(string) {\n      var regExp = /^(-|\\+)?\\s*[0-9]+$/;\n      var acceptable = regExp.test(string.trim());\n\n      if (acceptable) {\n        var value = parseInt(string, 10);\n        acceptable = this.bottom <= value && this.top >= value;\n      }\n      return acceptable;\n    }\n  }]);\n\n  return _class30;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Item\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    $opacity: { type: \"real\", initialValue: 1 },\n    parent: \"Item\",\n    state: \"string\",\n    states: \"list\",\n    transitions: \"list\",\n    data: \"list\",\n    children: \"list\",\n    resources: \"list\",\n    transform: \"list\",\n    x: \"real\",\n    y: \"real\",\n    z: \"real\",\n    width: \"real\",\n    height: \"real\",\n    implicitWidth: \"real\",\n    implicitHeight: \"real\",\n    left: \"real\",\n    right: \"real\",\n    top: \"real\",\n    bottom: \"real\",\n    horizontalCenter: \"real\",\n    verticalCenter: \"real\",\n    rotation: \"real\",\n    scale: { type: \"real\", initialValue: 1 },\n    opacity: { type: \"real\", initialValue: 1 },\n    visible: { type: \"bool\", initialValue: true },\n    clip: \"bool\",\n    focus: \"bool\"\n  },\n  defaultProperty: \"data\"\n}, function () {\n  function _class31(meta) {\n    var _this25 = this;\n\n    _classCallCheck(this, _class31);\n\n    QmlWeb.callSuper(this, meta);\n\n    if (this.$parent === null) {\n      // This is the root element. Initialize it.\n      this.dom = QmlWeb.engine.rootElement || document.body;\n      this.dom.innerHTML = \"\";\n      // Needed to make absolute positioning work\n      this.dom.style.position = \"relative\";\n      this.dom.style.top = \"0\";\n      this.dom.style.left = \"0\";\n      // No QML stuff should stand out the root element\n      this.dom.style.overflow = \"hidden\";\n    } else {\n      if (!this.dom) {\n        // Create a dom element for this item.\n        this.dom = document.createElement(\"div\");\n      }\n      this.dom.style.position = \"absolute\";\n    }\n    this.dom.style.pointerEvents = \"none\";\n    // In case the class is qualified, only use the last part for the css class\n    // name.\n    var classComponent = meta.object.$class.split(\".\").pop();\n    this.dom.className = \"\" + classComponent + (this.id ? \" \" + this.id : \"\");\n    this.css = this.dom.style;\n    this.impl = null; // Store the actually drawn element\n\n    this.css.boxSizing = \"border-box\";\n\n    var createProperty = QmlWeb.createProperty;\n\n    if (this.$isComponentRoot) {\n      createProperty(\"var\", this, \"activeFocus\");\n    }\n\n    this.parentChanged.connect(this, this.$onParentChanged_);\n    this.dataChanged.connect(this, this.$onDataChanged);\n    this.stateChanged.connect(this, this.$onStateChanged);\n    this.visibleChanged.connect(this, this.$onVisibleChanged_);\n    this.clipChanged.connect(this, this.$onClipChanged);\n    this.zChanged.connect(this, this.$onZChanged);\n    this.xChanged.connect(this, this.$onXChanged);\n    this.yChanged.connect(this, this.$onYChanged);\n    this.widthChanged.connect(this, this.$onWidthChanged_);\n    this.heightChanged.connect(this, this.$onHeightChanged_);\n    this.focusChanged.connect(this, this.$onFocusChanged_);\n\n    this.widthChanged.connect(this, this.$updateHGeometry);\n    this.heightChanged.connect(this, this.$updateVGeometry);\n    this.implicitWidthChanged.connect(this, this.$onImplicitWidthChanged);\n    this.implicitHeightChanged.connect(this, this.$onImplicitHeightChanged);\n\n    this.$isUsingImplicitWidth = true;\n    this.$isUsingImplicitHeight = true;\n\n    this.anchors = new QmlWeb.QObject(this);\n    createProperty(\"var\", this.anchors, \"left\");\n    createProperty(\"var\", this.anchors, \"right\");\n    createProperty(\"var\", this.anchors, \"top\");\n    createProperty(\"var\", this.anchors, \"bottom\");\n    createProperty(\"var\", this.anchors, \"horizontalCenter\");\n    createProperty(\"var\", this.anchors, \"verticalCenter\");\n    createProperty(\"Item\", this.anchors, \"fill\");\n    createProperty(\"Item\", this.anchors, \"centerIn\");\n    createProperty(\"real\", this.anchors, \"margins\");\n    createProperty(\"real\", this.anchors, \"leftMargin\");\n    createProperty(\"real\", this.anchors, \"rightMargin\");\n    createProperty(\"real\", this.anchors, \"topMargin\");\n    createProperty(\"real\", this.anchors, \"bottomMargin\");\n    this.anchors.leftChanged.connect(this, this.$updateHGeometry);\n    this.anchors.rightChanged.connect(this, this.$updateHGeometry);\n    this.anchors.topChanged.connect(this, this.$updateVGeometry);\n    this.anchors.bottomChanged.connect(this, this.$updateVGeometry);\n    this.anchors.horizontalCenterChanged.connect(this, this.$updateHGeometry);\n    this.anchors.verticalCenterChanged.connect(this, this.$updateVGeometry);\n    this.anchors.fillChanged.connect(this, this.$updateHGeometry);\n    this.anchors.fillChanged.connect(this, this.$updateVGeometry);\n    this.anchors.centerInChanged.connect(this, this.$updateHGeometry);\n    this.anchors.centerInChanged.connect(this, this.$updateVGeometry);\n    this.anchors.leftMarginChanged.connect(this, this.$updateHGeometry);\n    this.anchors.rightMarginChanged.connect(this, this.$updateHGeometry);\n    this.anchors.topMarginChanged.connect(this, this.$updateVGeometry);\n    this.anchors.bottomMarginChanged.connect(this, this.$updateVGeometry);\n    this.anchors.marginsChanged.connect(this, this.$updateHGeometry);\n    this.anchors.marginsChanged.connect(this, this.$updateVGeometry);\n\n    // childrenRect property\n    this.childrenRect = new QmlWeb.QObject(this);\n    createProperty(\"real\", this.childrenRect, \"x\"); // TODO ro\n    createProperty(\"real\", this.childrenRect, \"y\"); // TODO ro\n    createProperty(\"real\", this.childrenRect, \"width\"); // TODO ro\n    createProperty(\"real\", this.childrenRect, \"height\"); // TODO ro\n\n    this.rotationChanged.connect(this, this.$updateTransform);\n    this.scaleChanged.connect(this, this.$updateTransform);\n    this.transformChanged.connect(this, this.$updateTransform);\n\n    this.Component.completed.connect(this, this.Component$onCompleted_);\n    this.opacityChanged.connect(this, this.$calculateOpacity);\n    if (this.$parent) {\n      this.$parent.$opacityChanged.connect(this, this.$calculateOpacity);\n    }\n\n    this.spacing = 0;\n    this.$revertActions = [];\n    this.css.left = this.x + \"px\";\n    this.css.top = this.y + \"px\";\n\n    // Init size of root element\n    if (this.$parent === null) {\n      if (!QmlWeb.engine.rootElement) {\n        // Case 1: Qml scene is placed in body tag\n\n        // event handling by addEventListener is probably better than setting\n        // window.onresize\n        var updateQmlGeometry = function updateQmlGeometry() {\n          _this25.implicitHeight = window.innerHeight;\n          _this25.implicitWidth = window.innerWidth;\n        };\n        window.addEventListener(\"resize\", updateQmlGeometry);\n        updateQmlGeometry();\n      } else {\n        // Case 2: Qml scene is placed in some element tag\n\n        // we have to call `this.implicitHeight =` and `this.implicitWidth =`\n        // each time the rootElement changes it's geometry\n        // to reposition child elements of qml scene\n\n        // it is good to have this as named method of dom element, so we can\n        // call it from outside too, whenever element changes it's geometry\n        // (not only on window resize)\n        this.dom.updateQmlGeometry = function () {\n          _this25.implicitHeight = _this25.dom.offsetHeight;\n          _this25.implicitWidth = _this25.dom.offsetWidth;\n        };\n        window.addEventListener(\"resize\", this.dom.updateQmlGeometry);\n        this.dom.updateQmlGeometry();\n      }\n    }\n  }\n\n  _createClass(_class31, [{\n    key: \"$onParentChanged_\",\n    value: function $onParentChanged_(newParent, oldParent, propName) {\n      if (oldParent) {\n        oldParent.children.splice(oldParent.children.indexOf(this), 1);\n        oldParent.childrenChanged();\n        oldParent.dom.removeChild(this.dom);\n      }\n      if (newParent && newParent.children.indexOf(this) === -1) {\n        newParent.children.push(this);\n        newParent.childrenChanged();\n      }\n      if (newParent) {\n        newParent.dom.appendChild(this.dom);\n      }\n      this.$updateHGeometry(newParent, oldParent, propName);\n      this.$updateVGeometry(newParent, oldParent, propName);\n    }\n  }, {\n    key: \"$onDataChanged\",\n    value: function $onDataChanged(newData) {\n      var QMLItem = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Item\");\n      for (var i in newData) {\n        var child = newData[i];\n        if (child instanceof QMLItem) {\n          child.parent = this; // This will also add it to children.\n        } else {\n          this.resources.push(child);\n        }\n      }\n    }\n  }, {\n    key: \"$onStateChanged\",\n    value: function $onStateChanged(newVal, oldVal) {\n      // let oldState; // TODO: do we need oldState?\n      var newState = void 0;\n      for (var i = 0; i < this.states.length; i++) {\n        if (this.states[i].name === newVal) {\n          newState = this.states[i];\n        }\n        /*\n        else if (this.states[i].name === oldVal) {\n          oldState = this.states[i];\n        }\n        */\n      }\n\n      var actions = this.$revertActions.slice();\n\n      // Get current values for revert actions\n      for (var _i6 in actions) {\n        var action = actions[_i6];\n        action.from = action.target[action.property];\n      }\n      if (newState) {\n        var changes = newState.$getAllChanges();\n\n        // Get all actions we need to do and create actions to revert them\n        for (var _i7 = 0; _i7 < changes.length; _i7++) {\n          this.$applyChange(actions, changes[_i7]);\n        }\n      }\n\n      // Set all property changes and fetch the actual values afterwards\n      // The latter is needed for transitions. We need to set all properties\n      // before we fetch the values because properties can be interdependent.\n      for (var _i8 in actions) {\n        var _action = actions[_i8];\n        _action.target.$properties[_action.property].set(_action.value, QmlWeb.QMLProperty.ReasonUser, _action.target, newState ? newState.$context : _action.target.$context);\n      }\n      for (var _i9 in actions) {\n        var _action2 = actions[_i9];\n        _action2.to = _action2.target[_action2.property];\n        if (_action2.explicit) {\n          // Remove binding\n          _action2.target[_action2.property] = _action2.target[_action2.property];\n          _action2.value = _action2.target[_action2.property];\n        }\n      }\n\n      // Find the best transition to use\n      var transition = void 0;\n      var rating = 0;\n      for (var _i10 = 0; _i10 < this.transitions.length; _i10++) {\n        // We need to stop running transitions, so let's do\n        // it while iterating through the transitions anyway\n        this.transitions[_i10].$stop();\n        var curTransition = this.transitions[_i10];\n        var curRating = 0;\n        if (curTransition.from === oldVal || curTransition.reversible && curTransition.from === newVal) {\n          curRating += 2;\n        } else if (curTransition.from === \"*\") {\n          curRating++;\n        } else {\n          continue;\n        }\n        if (curTransition.to === newVal || curTransition.reversible && curTransition.to === oldVal) {\n          curRating += 2;\n        } else if (curTransition.to === \"*\") {\n          curRating++;\n        } else {\n          continue;\n        }\n        if (curRating > rating) {\n          rating = curRating;\n          transition = curTransition;\n        }\n      }\n      if (transition) {\n        transition.$start(actions);\n      }\n    }\n  }, {\n    key: \"$applyChange\",\n    value: function $applyChange(actions, change) {\n      var _this26 = this;\n\n      var arrayFindIndex = QmlWeb.helpers.arrayFindIndex;\n\n      var _loop = function _loop(j) {\n        var item = change.$actions[j];\n\n        var action = {\n          target: change.target,\n          property: item.property,\n          origValue: change.target.$properties[item.property].binding || change.target.$properties[item.property].val,\n          value: item.value,\n          from: change.target[item.property],\n          to: undefined,\n          explicit: change.explicit\n        };\n\n        var actionIndex = arrayFindIndex(actions, function (element) {\n          return element.target === action.target && element.property === action.property;\n        });\n        if (actionIndex !== -1) {\n          actions[actionIndex] = action;\n        } else {\n          actions.push(action);\n        }\n\n        // Look for existing revert action, else create it\n        var revertIndex = arrayFindIndex(_this26.$revertActions, function (element) {\n          return element.target === change.target && element.property === item.property;\n        });\n        if (revertIndex !== -1 && !change.restoreEntryValues) {\n          // We don't want to revert, so remove it\n          _this26.$revertActions.splice(revertIndex, 1);\n        } else if (revertIndex === -1 && change.restoreEntryValues) {\n          _this26.$revertActions.push({\n            target: change.target,\n            property: item.property,\n            value: change.target.$properties[item.property].binding || change.target.$properties[item.property].val,\n            from: undefined,\n            to: change.target[item.property]\n          });\n        }\n      };\n\n      for (var j = 0; j < change.$actions.length; j++) {\n        _loop(j);\n      }\n    }\n  }, {\n    key: \"$onVisibleChanged_\",\n    value: function $onVisibleChanged_(newVal) {\n      this.css.visibility = newVal ? \"inherit\" : \"hidden\";\n    }\n  }, {\n    key: \"$onClipChanged\",\n    value: function $onClipChanged(newVal) {\n      this.css.overflow = newVal ? \"hidden\" : \"visible\";\n    }\n  }, {\n    key: \"$onZChanged\",\n    value: function $onZChanged() {\n      this.$updateTransform();\n    }\n  }, {\n    key: \"$onXChanged\",\n    value: function $onXChanged(newVal) {\n      this.css.left = newVal + \"px\";\n      this.$updateHGeometry();\n    }\n  }, {\n    key: \"$onYChanged\",\n    value: function $onYChanged(newVal) {\n      this.css.top = newVal + \"px\";\n      this.$updateVGeometry();\n    }\n  }, {\n    key: \"$onWidthChanged_\",\n    value: function $onWidthChanged_(newVal) {\n      this.css.width = newVal ? newVal + \"px\" : \"auto\";\n    }\n  }, {\n    key: \"$onHeightChanged_\",\n    value: function $onHeightChanged_(newVal) {\n      this.css.height = newVal ? newVal + \"px\" : \"auto\";\n    }\n  }, {\n    key: \"$onFocusChanged\",\n    value: function $onFocusChanged(newVal) {\n      if (newVal) {\n        if (this.dom.firstChild) {\n          this.dom.firstChild.focus();\n        }\n        document.qmlFocus = this;\n        this.$context.activeFocus = this;\n      } else if (document.qmlFocus === this) {\n        document.getElementsByTagName(\"BODY\")[0].focus();\n        document.qmlFocus = QmlWeb.engine.rootContext().base;\n        this.$context.activeFocus = null;\n      }\n    }\n  }, {\n    key: \"setupFocusOnDom\",\n    value: function setupFocusOnDom(element) {\n      var _this27 = this;\n\n      var updateFocus = function updateFocus() {\n        var hasFocus = document.activeElement === _this27.dom || document.activeElement === _this27.dom.firstChild;\n        if (_this27.focus !== hasFocus) {\n          _this27.focus = hasFocus;\n        }\n      };\n      element.addEventListener(\"focus\", updateFocus);\n      element.addEventListener(\"blur\", updateFocus);\n    }\n  }, {\n    key: \"$updateTransform\",\n    value: function $updateTransform() {\n      var QMLTranslate = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Translate\");\n      var QMLRotation = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Rotation\");\n      var QMLScale = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Scale\");\n      var transform = \"rotate(\" + this.rotation + \"deg) scale(\" + this.scale + \")\";\n      var filter = \"\";\n      var transformStyle = \"preserve-3d\";\n\n      for (var i = 0; i < this.transform.length; i++) {\n        var t = this.transform[i];\n        if (t instanceof QMLRotation) {\n          var ax = t.axis;\n          transform += \" rotate3d(\" + ax.x + \", \" + ax.y + \", \" + ax.z + \", \" + ax.angle + \"deg)\";\n        } else if (t instanceof QMLScale) {\n          transform += \" scale(\" + t.xScale + \", \" + t.yScale + \")\";\n        } else if (t instanceof QMLTranslate) {\n          transform += \" translate(\" + t.x + \"px, \" + t.y + \"px)\";\n        } else if (typeof t.transformType !== \"undefined\") {\n          if (t.transformType === \"filter\") {\n            filter += t.operation + \"(\" + t.parameters + \") \";\n          }\n        } else if (typeof t === \"string\") {\n          transform += t;\n        }\n      }\n      if (typeof this.z === \"number\") {\n        transform += \" translate3d(0, 0, \" + this.z + \"px)\";\n      }\n      this.dom.style.transform = transform;\n      this.dom.style.transformStyle = transformStyle;\n      this.dom.style.webkitTransform = transform; // Chrome, Safari and Opera\n      this.dom.style.webkitTransformStyle = transformStyle;\n      this.dom.style.msTransform = transform; // IE\n      this.dom.style.filter = filter;\n      this.dom.style.webkitFilter = filter; // Chrome, Safari and Opera\n    }\n  }, {\n    key: \"Component$onCompleted_\",\n    value: function Component$onCompleted_() {\n      this.$calculateOpacity();\n    }\n  }, {\n    key: \"$calculateOpacity\",\n    value: function $calculateOpacity() {\n      // TODO: reset all opacity on layer.enabled changed\n      /*\n      if (false) { // TODO: check layer.enabled\n        this.css.opacity = this.opacity;\n      }\n      */\n      var parentOpacity = this.$parent && this.$parent.$opacity || 1;\n      this.$opacity = this.opacity * parentOpacity;\n      if (this.impl) {\n        this.impl.style.opacity = this.$opacity;\n      }\n    }\n  }, {\n    key: \"$onImplicitWidthChanged\",\n    value: function $onImplicitWidthChanged() {\n      if (this.$isUsingImplicitWidth) {\n        this.width = this.implicitWidth;\n        this.$isUsingImplicitWidth = true;\n      }\n    }\n  }, {\n    key: \"$onImplicitHeightChanged\",\n    value: function $onImplicitHeightChanged() {\n      if (this.$isUsingImplicitHeight) {\n        this.height = this.implicitHeight;\n        this.$isUsingImplicitHeight = true;\n      }\n    }\n  }, {\n    key: \"$updateHGeometry\",\n    value: function $updateHGeometry(newVal, oldVal, propName) {\n      var anchors = this.anchors || this;\n      if (this.$updatingHGeometry) {\n        return;\n      }\n      this.$updatingHGeometry = true;\n\n      var flags = QmlWeb.Signal.UniqueConnection;\n      var lM = anchors.leftMargin || anchors.margins;\n      var rM = anchors.rightMargin || anchors.margins;\n      var w = this.width;\n      var left = this.parent ? this.parent.left : 0;\n\n      // Width\n      if (propName === \"width\") {\n        this.$isUsingImplicitWidth = false;\n      }\n\n      // Position TODO: Layouts\n\n      var u = {}; // our update object\n\n      if (anchors.fill !== undefined) {\n        var fill = anchors.fill;\n        var props = fill.$properties;\n        props.left.changed.connect(this, this.$updateHGeometry, flags);\n        props.right.changed.connect(this, this.$updateHGeometry, flags);\n        props.width.changed.connect(this, this.$updateHGeometry, flags);\n\n        this.$isUsingImplicitWidth = false;\n        u.width = fill.width - lM - rM;\n        u.x = fill.left - left + lM;\n        u.left = fill.left + lM;\n        u.right = fill.right - rM;\n        u.horizontalCenter = (u.left + u.right) / 2;\n      } else if (anchors.centerIn !== undefined) {\n        var horizontalCenter = anchors.centerIn.$properties.horizontalCenter;\n        horizontalCenter.changed.connect(this, this.$updateHGeometry, flags);\n\n        u.horizontalCenter = anchors.centerIn.horizontalCenter;\n        u.x = u.horizontalCenter - w / 2 - left;\n        u.left = u.horizontalCenter - w / 2;\n        u.right = u.horizontalCenter + w / 2;\n      } else if (anchors.left !== undefined) {\n        u.left = anchors.left + lM;\n        if (anchors.right !== undefined) {\n          u.right = anchors.right - rM;\n          this.$isUsingImplicitWidth = false;\n          u.width = u.right - u.left;\n          u.x = u.left - left;\n          u.horizontalCenter = (u.right + u.left) / 2;\n        } else if (anchors.horizontalCenter !== undefined) {\n          u.horizontalCenter = anchors.horizontalCenter;\n          this.$isUsingImplicitWidth = false;\n          u.width = (u.horizontalCenter - u.left) * 2;\n          u.x = u.left - left;\n          u.right = 2 * u.horizontalCenter - u.left;\n        } else {\n          u.x = u.left - left;\n          u.right = u.left + w;\n          u.horizontalCenter = u.left + w / 2;\n        }\n      } else if (anchors.right !== undefined) {\n        u.right = anchors.right - rM;\n        if (anchors.horizontalCenter !== undefined) {\n          u.horizontalCenter = anchors.horizontalCenter;\n          this.$isUsingImplicitWidth = false;\n          u.width = (u.right - u.horizontalCenter) * 2;\n          u.x = 2 * u.horizontalCenter - u.right - left;\n          u.left = 2 * u.horizontalCenter - u.right;\n        } else {\n          u.x = u.right - w - left;\n          u.left = u.right - w;\n          u.horizontalCenter = u.right - w / 2;\n        }\n      } else if (anchors.horizontalCenter !== undefined) {\n        u.horizontalCenter = anchors.horizontalCenter;\n        u.x = u.horizontalCenter - w / 2 - left;\n        u.left = u.horizontalCenter - w / 2;\n        u.right = u.horizontalCenter + w / 2;\n      } else {\n        if (this.parent) {\n          var leftProp = this.parent.$properties.left;\n          leftProp.changed.connect(this, this.$updateHGeometry, flags);\n        }\n\n        u.left = this.x + left;\n        u.right = u.left + w;\n        u.horizontalCenter = u.left + w / 2;\n      }\n\n      for (var key in u) {\n        this[key] = u[key];\n      }\n\n      this.$updatingHGeometry = false;\n\n      if (this.parent) this.$updateChildrenRect(this.parent);\n    }\n  }, {\n    key: \"$updateVGeometry\",\n    value: function $updateVGeometry(newVal, oldVal, propName) {\n      var anchors = this.anchors || this;\n      if (this.$updatingVGeometry) {\n        return;\n      }\n      this.$updatingVGeometry = true;\n\n      var flags = QmlWeb.Signal.UniqueConnection;\n      var tM = anchors.topMargin || anchors.margins;\n      var bM = anchors.bottomMargin || anchors.margins;\n      var h = this.height;\n      var top = this.parent ? this.parent.top : 0;\n\n      // HeighttopProp\n      if (propName === \"height\") {\n        this.$isUsingImplicitHeight = false;\n      }\n\n      // Position TODO: Layouts\n\n      var u = {}; // our update object\n\n      if (anchors.fill !== undefined) {\n        var fill = anchors.fill;\n        var props = fill.$properties;\n        props.top.changed.connect(this, this.$updateVGeometry, flags);\n        props.bottom.changed.connect(this, this.$updateVGeometry, flags);\n        props.height.changed.connect(this, this.$updateVGeometry, flags);\n\n        this.$isUsingImplicitHeight = false;\n        u.height = fill.height - tM - bM;\n        u.y = fill.top - top + tM;\n        u.top = fill.top + tM;\n        u.bottom = fill.bottom - bM;\n        u.verticalCenter = (u.top + u.bottom) / 2;\n      } else if (anchors.centerIn !== undefined) {\n        var verticalCenter = anchors.centerIn.$properties.verticalCenter;\n        verticalCenter.changed.connect(this, this.$updateVGeometry, flags);\n\n        u.verticalCenter = anchors.centerIn.verticalCenter;\n        u.y = u.verticalCenter - h / 2 - top;\n        u.top = u.verticalCenter - h / 2;\n        u.bottom = u.verticalCenter + h / 2;\n      } else if (anchors.top !== undefined) {\n        u.top = anchors.top + tM;\n        if (anchors.bottom !== undefined) {\n          u.bottom = anchors.bottom - bM;\n          this.$isUsingImplicitHeight = false;\n          u.height = u.bottom - u.top;\n          u.y = u.top - top;\n          u.verticalCenter = (u.bottom + u.top) / 2;\n        } else if ((u.verticalCenter = anchors.verticalCenter) !== undefined) {\n          this.$isUsingImplicitHeight = false;\n          u.height = (u.verticalCenter - u.top) * 2;\n          u.y = u.top - top;\n          u.bottom = 2 * u.verticalCenter - u.top;\n        } else {\n          u.y = u.top - top;\n          u.bottom = u.top + h;\n          u.verticalCenter = u.top + h / 2;\n        }\n      } else if (anchors.bottom !== undefined) {\n        u.bottom = anchors.bottom - bM;\n        if ((u.verticalCenter = anchors.verticalCenter) !== undefined) {\n          this.$isUsingImplicitHeight = false;\n          u.height = (u.bottom - u.verticalCenter) * 2;\n          u.y = 2 * u.verticalCenter - u.bottom - top;\n          u.top = 2 * u.verticalCenter - u.bottom;\n        } else {\n          u.y = u.bottom - h - top;\n          u.top = u.bottom - h;\n          u.verticalCenter = u.bottom - h / 2;\n        }\n      } else if (anchors.verticalCenter !== undefined) {\n        u.verticalCenter = anchors.verticalCenter;\n        u.y = u.verticalCenter - h / 2 - top;\n        u.top = u.verticalCenter - h / 2;\n        u.bottom = u.verticalCenter + h / 2;\n      } else {\n        if (this.parent) {\n          var topProp = this.parent.$properties.top;\n          topProp.changed.connect(this, this.$updateVGeometry, flags);\n        }\n\n        u.top = this.y + top;\n        u.bottom = u.top + h;\n        u.verticalCenter = u.top + h / 2;\n      }\n\n      for (var key in u) {\n        this[key] = u[key];\n      }\n\n      this.$updatingVGeometry = false;\n\n      if (this.parent) this.$updateChildrenRect(this.parent);\n    }\n  }, {\n    key: \"$updateChildrenRect\",\n    value: function $updateChildrenRect(component) {\n      if (!component || !component.children || component.children.length === 0) {\n        return;\n      }\n      var children = component.children;\n\n      var maxWidth = 0;\n      var maxHeight = 0;\n      var minX = children.length > 0 ? children[0].x : 0;\n      var minY = children.length > 0 ? children[0].y : 0;\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        maxWidth = Math.max(maxWidth, child.x + child.width);\n        maxHeight = Math.max(maxHeight, child.y + child.heighth);\n        minX = Math.min(minX, child.x);\n        minY = Math.min(minX, child.y);\n      }\n\n      component.childrenRect.x = minX;\n      component.childrenRect.y = minY;\n      component.childrenRect.width = maxWidth;\n      component.childrenRect.height = maxHeight;\n    }\n  }]);\n\n  return _class31;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"ListElement\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\"\n}, function () {\n  function _class32(meta) {\n    _classCallCheck(this, _class32);\n\n    QmlWeb.callSuper(this, meta);\n\n    var createProperty = QmlWeb.createProperty;\n    for (var i in meta.object) {\n      if (i[0] !== \"$\") {\n        createProperty(\"variant\", this, i);\n      }\n    }\n    QmlWeb.applyProperties(meta.object, this, this, this.$context);\n  }\n\n  return _class32;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"ListModel\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    count: \"int\",\n    $items: \"list\"\n  },\n  defaultProperty: \"$items\"\n}, function () {\n  function _class33(meta) {\n    var _this28 = this;\n\n    _classCallCheck(this, _class33);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$firstItem = true;\n    this.$itemsChanged.connect(this, this.$on$itemsChanged);\n    this.$model = new QmlWeb.JSItemModel();\n    this.$model.data = function (index, role) {\n      return _this28.$items[index][role];\n    };\n    this.$model.rowCount = function () {\n      return _this28.$items.length;\n    };\n  }\n\n  _createClass(_class33, [{\n    key: \"$on$itemsChanged\",\n    value: function $on$itemsChanged(newVal) {\n      this.count = this.$items.length;\n      if (this.$firstItem && newVal.length > 0) {\n        var QMLListElement = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"ListElement\");\n        this.$firstItem = false;\n        var roleNames = [];\n        var dict = newVal[0];\n        if (dict instanceof QMLListElement) {\n          dict = dict.$properties;\n        }\n        for (var i in dict) {\n          if (i !== \"index\") {\n            roleNames.push(i);\n          }\n        }\n        this.$model.setRoleNames(roleNames);\n      }\n    }\n  }, {\n    key: \"append\",\n    value: function append(dict) {\n      var index = this.$items.length;\n      var c = 0;\n\n      if (dict instanceof Array) {\n        for (var key in dict) {\n          this.$items.push(dict[key]);\n          c++;\n        }\n      } else {\n        this.$items.push(dict);\n        c = 1;\n      }\n\n      this.$itemsChanged(this.$items);\n      this.$model.rowsInserted(index, index + c);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.$items.length = 0;\n      this.count = 0;\n      this.$model.modelReset();\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this.$items[index];\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(index, dict) {\n      this.$items.splice(index, 0, dict);\n      this.$itemsChanged(this.$items);\n      this.$model.rowsInserted(index, index + 1);\n    }\n  }, {\n    key: \"move\",\n    value: function move(from, to, n) {\n      var vals = this.$items.splice(from, n);\n      for (var i = 0; i < vals.length; i++) {\n        this.$items.splice(to + i, 0, vals[i]);\n      }\n      this.$model.rowsMoved(from, from + n, to);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(index) {\n      this.$items.splice(index, 1);\n      this.$model.rowsRemoved(index, index + 1);\n      this.count = this.$items.length;\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, dict) {\n      this.$items[index] = dict;\n      this.$model.dataChanged(index, index);\n    }\n  }, {\n    key: \"setProperty\",\n    value: function setProperty(index, property, value) {\n      this.$items[index][property] = value;\n      this.$model.dataChanged(index, index);\n    }\n  }]);\n\n  return _class33;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"ListView\",\n  versions: /.*/,\n  baseClass: \"Repeater\",\n  properties: {\n    orientation: \"enum\",\n    spacing: \"real\"\n  }\n}, function () {\n  function _class34(meta) {\n    _classCallCheck(this, _class34);\n\n    QmlWeb.callSuper(this, meta);\n    this.modelChanged.connect(this, this.$styleChanged);\n    this.delegateChanged.connect(this, this.$styleChanged);\n    this.orientationChanged.connect(this, this.$styleChanged);\n    this.spacingChanged.connect(this, this.$styleChanged);\n    this._childrenInserted.connect(this, this.$applyStyleOnItem);\n  }\n\n  _createClass(_class34, [{\n    key: \"container\",\n    value: function container() {\n      return this;\n    }\n  }, {\n    key: \"$applyStyleOnItem\",\n    value: function $applyStyleOnItem($item) {\n      var Qt = QmlWeb.Qt;\n      $item.dom.style.position = \"initial\";\n      if (this.orientation === Qt.Horizontal) {\n        $item.dom.style.display = \"inline-block\";\n        if ($item !== this.$items[0]) {\n          $item.dom.style[\"margin-left\"] = this.spacing + \"px\";\n        }\n      } else {\n        $item.dom.style.display = \"block\";\n        if ($item !== this.$items[0]) {\n          $item.dom.style[\"margin-top\"] = this.spacing + \"px\";\n        }\n      }\n    }\n  }, {\n    key: \"$styleChanged\",\n    value: function $styleChanged() {\n      for (var i = 0; i < this.$items.length; ++i) {\n        this.$applyStyleOnItem(this.$items[i]);\n      }\n    }\n  }]);\n\n  return _class34;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Loader\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    active: { type: \"bool\", initialValue: true },\n    asynchronous: \"bool\",\n    item: \"var\",\n    progress: \"real\",\n    source: \"url\",\n    sourceComponent: \"Component\",\n    status: { type: \"enum\", initialValue: 1 }\n  },\n  signals: {\n    loaded: []\n  }\n}, function () {\n  function _class35(meta) {\n    _classCallCheck(this, _class35);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$sourceUrl = \"\";\n\n    this.activeChanged.connect(this, this.$onActiveChanged);\n    this.sourceChanged.connect(this, this.$onSourceChanged);\n    this.sourceComponentChanged.connect(this, this.$onSourceComponentChanged);\n    this.widthChanged.connect(this, this.$updateGeometry);\n    this.heightChanged.connect(this, this.$updateGeometry);\n  }\n\n  _createClass(_class35, [{\n    key: \"$onActiveChanged\",\n    value: function $onActiveChanged() {\n      if (!this.active) {\n        this.$unload();\n        return;\n      }\n      if (this.source) {\n        this.$onSourceChanged(this.source);\n      } else if (this.sourceComponent) {\n        this.$onSourceComponentChanged(this.sourceComponent);\n      }\n    }\n  }, {\n    key: \"$onSourceChanged\",\n    value: function $onSourceChanged(fileName) {\n      // TODO\n      // if (fileName == this.$sourceUrl && this.item !== undefined) return;\n      if (!this.active) return;\n      this.$unload();\n\n      if (!fileName) {\n        this.sourceComponent = null;\n        this.$sourceUrl = fileName;\n        return;\n      }\n\n      var tree = QmlWeb.engine.loadComponent(fileName);\n      var QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n      var meta = { object: tree, context: this, parent: this };\n      var qmlComponent = new QMLComponent(meta);\n      qmlComponent.$basePath = QmlWeb.engine.extractBasePath(tree.$file);\n      qmlComponent.$imports = tree.$imports;\n      qmlComponent.$file = tree.$file;\n      QmlWeb.engine.loadImports(tree.$imports, qmlComponent.$basePath, qmlComponent.importContextId);\n      var loadedComponent = this.$createComponentObject(qmlComponent, this);\n      this.sourceComponent = loadedComponent;\n      this.$sourceUrl = fileName;\n    }\n  }, {\n    key: \"$onSourceComponentChanged\",\n    value: function $onSourceComponentChanged(newItem) {\n      if (!this.active) return;\n      this.$unload();\n\n      if (!newItem) {\n        this.item = null;\n        return;\n      }\n\n      var QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n      var qmlComponent = newItem;\n      if (newItem instanceof QMLComponent) {\n        qmlComponent = newItem.$createObject(this, {}, this);\n      }\n      qmlComponent.parent = this;\n      this.item = qmlComponent;\n      this.$updateGeometry();\n      if (this.item) {\n        this.loaded();\n      }\n    }\n  }, {\n    key: \"setSource\",\n    value: function setSource(url, options) {\n      this.$sourceUrl = url;\n      this.props = options;\n      this.source = url;\n    }\n  }, {\n    key: \"$unload\",\n    value: function $unload() {\n      if (!this.item) return;\n      this.item.$delete();\n      this.item.parent = undefined;\n      this.item = undefined;\n    }\n  }, {\n    key: \"$callOnCompleted\",\n    value: function $callOnCompleted(child) {\n      child.Component.completed();\n      var QMLBaseObject = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"QtObject\");\n      for (var i = 0; i < child.$tidyupList.length; i++) {\n        if (child.$tidyupList[i] instanceof QMLBaseObject) {\n          this.$callOnCompleted(child.$tidyupList[i]);\n        }\n      }\n    }\n  }, {\n    key: \"$createComponentObject\",\n    value: function $createComponentObject(qmlComponent, parent) {\n      var newComponent = qmlComponent.createObject(parent);\n      qmlComponent.finalizeImports();\n      if (QmlWeb.engine.operationState !== QmlWeb.QMLOperationState.Init) {\n        // We don't call those on first creation, as they will be called\n        // by the regular creation-procedures at the right time.\n        QmlWeb.engine.$initializePropertyBindings();\n        this.$callOnCompleted(newComponent);\n      }\n      return newComponent;\n    }\n  }, {\n    key: \"$updateGeometry\",\n    value: function $updateGeometry() {\n      // Loader size doesn't exist\n      if (!this.width) {\n        this.width = this.item ? this.item.width : 0;\n      } else if (this.item) {\n        // Loader size exists\n        this.item.width = this.width;\n      }\n\n      if (!this.height) {\n        this.height = this.item ? this.item.height : 0;\n      } else if (this.item) {\n        // Loader size exists\n        this.item.height = this.height;\n      }\n    }\n  }]);\n\n  return _class35;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"MouseArea\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    acceptedButtons: { type: \"variant\", initialValue: 1 }, // Qt.LeftButton\n    enabled: { type: \"bool\", initialValue: true },\n    hoverEnabled: \"bool\",\n    mouseX: \"real\",\n    mouseY: \"real\",\n    pressed: \"bool\",\n    containsMouse: \"bool\",\n    pressedButtons: { type: \"variant\", initialValue: 0 },\n    cursorShape: \"enum\" // Qt.ArrowCursor\n  },\n  signals: {\n    clicked: [{ type: \"variant\", name: \"mouse\" }],\n    entered: [],\n    exited: [],\n    positionChanged: [{ type: \"variant\", name: \"mouse\" }]\n  }\n}, function () {\n  function _class36(meta) {\n    var _this29 = this;\n\n    _classCallCheck(this, _class36);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.dom.style.pointerEvents = \"all\";\n\n    // IE does not handle mouse clicks to transparent divs, so we have\n    // to set a background color and make it invisible using opacity\n    // as that doesn't affect the mouse handling.\n    this.dom.style.backgroundColor = \"white\";\n    this.dom.style.opacity = 0;\n\n    this.cursorShapeChanged.connect(this, this.$onCursorShapeChanged);\n\n    this.dom.addEventListener(\"click\", function (e) {\n      return _this29.$handleClick(e);\n    });\n    this.dom.addEventListener(\"contextmenu\", function (e) {\n      return _this29.$handleClick(e);\n    });\n    var handleMouseUp = function handleMouseUp() {\n      _this29.pressed = false;\n      _this29.pressedButtons = 0;\n      document.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n    this.dom.addEventListener(\"mousedown\", function (e) {\n      if (!_this29.enabled) return;\n      var mouse = _this29.$eventToMouse(e);\n      _this29.mouseX = mouse.x;\n      _this29.mouseY = mouse.y;\n      _this29.pressed = true;\n      _this29.pressedButtons = mouse.button;\n      document.addEventListener(\"mouseup\", handleMouseUp);\n    });\n    this.dom.addEventListener(\"mouseover\", function () {\n      _this29.containsMouse = true;\n      _this29.entered();\n    });\n    this.dom.addEventListener(\"mouseout\", function () {\n      _this29.containsMouse = false;\n      _this29.exited();\n    });\n    this.dom.addEventListener(\"mousemove\", function (e) {\n      if (!_this29.enabled || !_this29.hoverEnabled && !_this29.pressed) return;\n      var mouse = _this29.$eventToMouse(e);\n      _this29.mouseX = mouse.x;\n      _this29.mouseY = mouse.y;\n      _this29.positionChanged(mouse);\n    });\n  }\n\n  _createClass(_class36, [{\n    key: \"$onCursorShapeChanged\",\n    value: function $onCursorShapeChanged() {\n      this.dom.style.cursor = this.$cursorShapeToCSS();\n    }\n  }, {\n    key: \"$handleClick\",\n    value: function $handleClick(e) {\n      var mouse = this.$eventToMouse(e);\n      if (this.enabled && this.acceptedButtons & mouse.button) {\n        this.clicked(mouse);\n      }\n      // This decides whether to show the browser's context menu on right click or\n      // not\n      return !(this.acceptedButtons & QmlWeb.Qt.RightButton);\n    }\n  }, {\n    key: \"$eventToMouse\",\n    value: function $eventToMouse(e) {\n      var Qt = QmlWeb.Qt;\n      return {\n        accepted: true,\n        button: e.button === 0 ? Qt.LeftButton : e.button === 1 ? Qt.MiddleButton : e.button === 2 ? Qt.RightButton : 0,\n        modifiers: e.ctrlKey * Qt.CtrlModifier | e.altKey * Qt.AltModifier | e.shiftKey * Qt.ShiftModifier | e.metaKey * Qt.MetaModifier,\n        x: e.offsetX || e.layerX,\n        y: e.offsetY || e.layerY\n      };\n    }\n\n    // eslint-disable-next-line complexity\n\n  }, {\n    key: \"$cursorShapeToCSS\",\n    value: function $cursorShapeToCSS() {\n      var Qt = QmlWeb.Qt;\n      switch (this.cursorShape) {\n        case Qt.ArrowCursor:\n          return \"default\";\n        case Qt.UpArrowCursor:\n          return \"n-resize\";\n        case Qt.CrossCursor:\n          return \"crosshair\";\n        case Qt.WaitCursor:\n          return \"wait\";\n        case Qt.IBeamCursor:\n          return \"text\";\n        case Qt.SizeVerCursor:\n          return \"ew-resize\";\n        case Qt.SizeHorCursor:\n          return \"ns-resize\";\n        case Qt.SizeBDiagCursor:\n          return \"nesw-resize\";\n        case Qt.SizeFDiagCursor:\n          return \"nwse-resize\";\n        case Qt.SizeAllCursor:\n          return \"all-scroll\";\n        case Qt.BlankCursor:\n          return \"none\";\n        case Qt.SplitVCursor:\n          return \"row-resize\";\n        case Qt.SplitHCursor:\n          return \"col-resize\";\n        case Qt.PointingHandCursor:\n          return \"pointer\";\n        case Qt.ForbiddenCursor:\n          return \"not-allowed\";\n        case Qt.WhatsThisCursor:\n          return \"help\";\n        case Qt.BusyCursor:\n          return \"progress\";\n        case Qt.OpenHandCursor:\n          return \"grab\";\n        case Qt.ClosedHandCursor:\n          return \"grabbing\";\n        case Qt.DragCopyCursor:\n          return \"copy\";\n        case Qt.DragMoveCursor:\n          return \"move\";\n        case Qt.DragLinkCursor:\n          return \"alias\";\n        //case Qt.BitmapCursor: return \"auto\";\n        //case Qt.CustomCursor: return \"auto\";\n      }\n      return \"auto\";\n    }\n  }]);\n\n  return _class36;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"NumberAnimation\",\n  versions: /.*/,\n  baseClass: \"PropertyAnimation\"\n}, function () {\n  function _class37(meta) {\n    var _this30 = this;\n\n    _classCallCheck(this, _class37);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$at = 0;\n    this.$loop = 0;\n\n    QmlWeb.engine.$addTicker(function () {\n      return _this30.$ticker.apply(_this30, arguments);\n    });\n    this.runningChanged.connect(this, this.$onRunningChanged);\n  }\n\n  _createClass(_class37, [{\n    key: \"$startLoop\",\n    value: function $startLoop() {\n      for (var i in this.$actions) {\n        var _action3 = this.$actions[i];\n        _action3.from = _action3.from !== undefined ? _action3.from : _action3.target[_action3.property];\n      }\n      this.$at = 0;\n    }\n  }, {\n    key: \"$ticker\",\n    value: function $ticker(now, elapsed) {\n      if (!this.running && this.$loop !== -1 || this.paused) {\n        // $loop === -1 is a marker to just finish this run\n        return;\n      }\n      if (this.$at === 0 && this.$loop === 0 && !this.$actions.length) {\n        this.$redoActions();\n      }\n      this.$at += elapsed / this.duration;\n      if (this.$at >= 1) {\n        this.complete();\n        return;\n      }\n      for (var i in this.$actions) {\n        var _action4 = this.$actions[i];\n        var value = _action4.from + (_action4.to - _action4.from) * this.easing.$valueForProgress(this.$at);\n        var property = _action4.target.$properties[_action4.property];\n        property.set(value, QmlWeb.QMLProperty.ReasonAnimation);\n      }\n    }\n  }, {\n    key: \"$onRunningChanged\",\n    value: function $onRunningChanged(newVal) {\n      if (newVal) {\n        this.$startLoop();\n        this.paused = false;\n      } else if (this.alwaysRunToEnd && this.$at < 1) {\n        this.$loop = -1; // -1 is used as a marker to stop\n      } else {\n        this.$loop = 0;\n        this.$actions = [];\n      }\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      for (var i in this.$actions) {\n        var _action5 = this.$actions[i];\n        var property = _action5.target.$properties[_action5.property];\n        property.set(_action5.to, QmlWeb.QMLProperty.ReasonAnimation);\n      }\n      this.$loop++;\n      if (this.$loop === this.loops) {\n        this.running = false;\n      } else if (!this.running) {\n        this.$actions = [];\n      } else {\n        this.$startLoop(this);\n      }\n    }\n  }]);\n\n  return _class37;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"ParallelAnimation\",\n  versions: /.*/,\n  baseClass: \"Animation\",\n  enums: {\n    Animation: { Infinite: Math.Infinite }\n  },\n  properties: {\n    animations: \"list\"\n  },\n  defaultProperty: \"animations\"\n}, function () {\n  function _class38(meta) {\n    var _this31 = this;\n\n    _classCallCheck(this, _class38);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$runningAnimations = 0;\n\n    this.animationsChanged.connect(this, this.$onAnimationsChanged);\n\n    QmlWeb.engine.$registerStart(function () {\n      if (!_this31.running) return;\n      self.running = false; // toggled back by start();\n      self.start();\n    });\n    QmlWeb.engine.$registerStop(function () {\n      return _this31.stop();\n    });\n  }\n\n  _createClass(_class38, [{\n    key: \"$onAnimationsChanged\",\n    value: function $onAnimationsChanged() {\n      var flags = QmlWeb.Signal.UniqueConnection;\n      for (var i = 0; i < this.animations.length; i++) {\n        var animation = this.animations[i];\n        animation.runningChanged.connect(this, this.$animationFinished, flags);\n      }\n    }\n  }, {\n    key: \"$animationFinished\",\n    value: function $animationFinished(newVal) {\n      this.$runningAnimations += newVal ? 1 : -1;\n      if (this.$runningAnimations === 0) {\n        this.running = false;\n      }\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (this.running) return;\n      this.running = true;\n      for (var i = 0; i < this.animations.length; i++) {\n        this.animations[i].start();\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this.running) return;\n      for (var i = 0; i < this.animations.length; i++) {\n        this.animations[i].stop();\n      }\n      this.running = false;\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this.stop();\n    }\n  }]);\n\n  return _class38;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Positioner\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    spacing: \"int\"\n  }\n}, function () {\n  function _class39(meta) {\n    _classCallCheck(this, _class39);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.childrenChanged.connect(this, this.$onChildrenChanged);\n    this.spacingChanged.connect(this, this.layoutChildren);\n    this.childrenChanged.connect(this, this.layoutChildren);\n    this.layoutChildren();\n  }\n\n  _createClass(_class39, [{\n    key: \"$onChildrenChanged\",\n    value: function $onChildrenChanged() {\n      var flags = QmlWeb.Signal.UniqueConnection;\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        child.widthChanged.connect(this, this.layoutChildren, flags);\n        child.heightChanged.connect(this, this.layoutChildren, flags);\n        child.visibleChanged.connect(this, this.layoutChildren, flags);\n      }\n    }\n  }]);\n\n  return _class39;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"PropertyAnimation\",\n  versions: /.*/,\n  baseClass: \"Animation\",\n  properties: {\n    duration: { type: \"int\", initialValue: 250 },\n    from: \"real\",\n    to: \"real\",\n    properties: \"string\",\n    property: \"string\",\n    target: \"QtObject\",\n    targets: \"list\"\n  }\n}, function () {\n  function _class40(meta) {\n    _classCallCheck(this, _class40);\n\n    QmlWeb.callSuper(this, meta);\n\n    var createProperty = QmlWeb.createProperty;\n    this.easing = new QmlWeb.QObject(this);\n    createProperty(\"enum\", this.easing, \"type\", { initialValue: this.Easing.Linear });\n    createProperty(\"real\", this.easing, \"amplitude\", { initialValue: 1 });\n    createProperty(\"real\", this.easing, \"overshoot\", { initialValue: 1.70158 });\n    createProperty(\"real\", this.easing, \"period\", { initialValue: 0.3 });\n\n    this.easing.$valueForProgress = function (t) {\n      return QmlWeb.$ease(this.type, this.period, this.amplitude, this.overshoot, t);\n    };\n\n    this.$props = [];\n    this.$targets = [];\n    this.$actions = [];\n\n    this.targetChanged.connect(this, this.$redoTargets);\n    this.targetsChanged.connect(this, this.$redoTargets);\n    this.propertyChanged.connect(this, this.$redoProperties);\n    this.propertiesChanged.connect(this, this.$redoProperties);\n\n    if (meta.object.$on !== undefined) {\n      this.property = meta.object.$on;\n      this.target = this.$parent;\n    }\n  }\n\n  _createClass(_class40, [{\n    key: \"$redoActions\",\n    value: function $redoActions() {\n      this.$actions = [];\n      for (var i = 0; i < this.$targets.length; i++) {\n        for (var j in this.$props) {\n          this.$actions.push({\n            target: this.$targets[i],\n            property: this.$props[j],\n            from: this.from,\n            to: this.to\n          });\n        }\n      }\n    }\n  }, {\n    key: \"$redoProperties\",\n    value: function $redoProperties() {\n      this.$props = this.properties.split(\",\");\n\n      // Remove whitespaces\n      for (var i = 0; i < this.$props.length; i++) {\n        var matches = this.$props[i].match(/\\w+/);\n        if (matches) {\n          this.$props[i] = matches[0];\n        } else {\n          this.$props.splice(i, 1);\n          i--;\n        }\n      }\n      // Merge properties and property\n      if (this.property && this.$props.indexOf(this.property) === -1) {\n        this.$props.push(this.property);\n      }\n    }\n  }, {\n    key: \"$redoTargets\",\n    value: function $redoTargets() {\n      this.$targets = this.targets.slice();\n      if (this.target && this.$targets.indexOf(this.target) === -1) {\n        this.$targets.push(this.target);\n      }\n    }\n  }]);\n\n  return _class40;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"PropertyChanges\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    target: \"QtObject\",\n    explicit: \"bool\",\n    restoreEntryValues: { type: \"bool\", initialValue: true }\n  }\n}, function () {\n  function _class41(meta) {\n    _classCallCheck(this, _class41);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$actions = [];\n  }\n\n  _createClass(_class41, [{\n    key: \"$setCustomData\",\n    value: function $setCustomData(property, value) {\n      this.$actions.push({ property: property, value: value });\n    }\n  }]);\n\n  return _class41;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Rectangle\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    color: { type: \"color\", initialValue: \"white\" },\n    radius: \"real\"\n  }\n}, function () {\n  function _class42(meta) {\n    _classCallCheck(this, _class42);\n\n    QmlWeb.callSuper(this, meta);\n\n    var createProperty = QmlWeb.createProperty;\n    this.border = new QmlWeb.QObject(this);\n    createProperty(\"color\", this.border, \"color\", { initialValue: \"black\" });\n    createProperty(\"int\", this.border, \"width\", { initialValue: 1 });\n    this.$borderActive = false;\n\n    var bg = this.impl = document.createElement(\"div\");\n    bg.style.pointerEvents = \"none\";\n    bg.style.position = \"absolute\";\n    bg.style.left = bg.style.right = bg.style.top = bg.style.bottom = \"0px\";\n    bg.style.borderWidth = \"0px\";\n    bg.style.borderStyle = \"solid\";\n    bg.style.borderColor = \"black\";\n    bg.style.backgroundColor = \"white\";\n    this.dom.appendChild(bg);\n\n    this.colorChanged.connect(this, this.$onColorChanged);\n    this.radiusChanged.connect(this, this.$onRadiusChanged);\n    this.border.colorChanged.connect(this, this.border$onColorChanged);\n    this.border.widthChanged.connect(this, this.border$onWidthChanged);\n    this.widthChanged.connect(this, this.$updateBorder);\n    this.heightChanged.connect(this, this.$updateBorder);\n  }\n\n  _createClass(_class42, [{\n    key: \"$onColorChanged\",\n    value: function $onColorChanged(newVal) {\n      this.impl.style.backgroundColor = new QmlWeb.QColor(newVal);\n    }\n  }, {\n    key: \"border$onColorChanged\",\n    value: function border$onColorChanged(newVal) {\n      this.$borderActive = true;\n      this.impl.style.borderColor = new QmlWeb.QColor(newVal);\n      this.$updateBorder();\n    }\n  }, {\n    key: \"border$onWidthChanged\",\n    value: function border$onWidthChanged() {\n      this.$borderActive = true;\n      this.$updateBorder();\n    }\n  }, {\n    key: \"$onRadiusChanged\",\n    value: function $onRadiusChanged(newVal) {\n      this.impl.style.borderRadius = newVal + \"px\";\n    }\n  }, {\n    key: \"$updateBorder\",\n    value: function $updateBorder() {\n      var border = this.$borderActive ? Math.max(0, this.border.width) : 0;\n      var style = this.impl.style;\n      if (border * 2 > this.width || border * 2 > this.height) {\n        // Border is covering the whole background\n        style.borderWidth = \"0px\";\n        style.borderTopWidth = this.height + \"px\";\n      } else {\n        style.borderWidth = border + \"px\";\n      }\n    }\n  }]);\n\n  return _class42;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"RegExpValidator\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    regExp: \"var\"\n  }\n}, function () {\n  function _class43(meta) {\n    _classCallCheck(this, _class43);\n\n    QmlWeb.callSuper(this, meta);\n  }\n\n  _createClass(_class43, [{\n    key: \"validate\",\n    value: function validate(string) {\n      if (!this.regExp) return true;\n      return this.regExp.test(string);\n    }\n  }]);\n\n  return _class43;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Repeater\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    delegate: \"Component\",\n    model: { type: \"variant\", initialValue: 0 },\n    count: \"int\"\n  },\n  signals: {\n    _childrenInserted: []\n  },\n  defaultProperty: \"delegate\"\n}, function () {\n  function _class44(meta) {\n    _classCallCheck(this, _class44);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.parent = meta.parent;\n    // TODO: some (all ?) of the components including Repeater needs to know own\n    // parent at creation time. Please consider this major change.\n\n    this.$completed = false;\n    this.$items = []; // List of created items\n\n    this.modelChanged.connect(this, this.$onModelChanged);\n    this.delegateChanged.connect(this, this.$onDelegateChanged);\n    this.parentChanged.connect(this, this.$onParentChanged);\n  }\n\n  _createClass(_class44, [{\n    key: \"container\",\n    value: function container() {\n      return this.parent;\n    }\n  }, {\n    key: \"itemAt\",\n    value: function itemAt(index) {\n      return this.$items[index];\n    }\n  }, {\n    key: \"$onModelChanged\",\n    value: function $onModelChanged() {\n      this.$applyModel();\n    }\n  }, {\n    key: \"$onDelegateChanged\",\n    value: function $onDelegateChanged() {\n      this.$applyModel();\n    }\n  }, {\n    key: \"$onParentChanged\",\n    value: function $onParentChanged() {\n      this.$applyModel();\n    }\n  }, {\n    key: \"$getModel\",\n    value: function $getModel() {\n      var QMLListModel = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"ListModel\");\n      return this.model instanceof QMLListModel ? this.model.$model : this.model;\n    }\n  }, {\n    key: \"$applyModel\",\n    value: function $applyModel() {\n      if (!this.delegate || !this.parent) {\n        return;\n      }\n      var model = this.$getModel();\n      if (model instanceof QmlWeb.JSItemModel) {\n        var flags = QmlWeb.Signal.UniqueConnection;\n        model.dataChanged.connect(this, this.$_onModelDataChanged, flags);\n        model.rowsInserted.connect(this, this.$_onRowsInserted, flags);\n        model.rowsMoved.connect(this, this.$_onRowsMoved, flags);\n        model.rowsRemoved.connect(this, this.$_onRowsRemoved, flags);\n        model.modelReset.connect(this, this.$_onModelReset, flags);\n\n        this.$removeChildren(0, this.$items.length);\n        this.$insertChildren(0, model.rowCount());\n      } else if (typeof model === \"number\") {\n        if (this.$items.length > model) {\n          // have more than we need\n          this.$removeChildren(model, this.$items.length);\n        } else {\n          // need more\n          this.$insertChildren(this.$items.length, model);\n        }\n      } else if (model instanceof Array) {\n        this.$removeChildren(0, this.$items.length);\n        this.$insertChildren(0, model.length);\n      }\n      this.count = this.$items.length;\n    }\n  }, {\n    key: \"$callOnCompleted\",\n    value: function $callOnCompleted(child) {\n      child.Component.completed();\n      var QMLBaseObject = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"QtObject\");\n      for (var i = 0; i < child.$tidyupList.length; i++) {\n        if (child.$tidyupList[i] instanceof QMLBaseObject) {\n          this.$callOnCompleted(child.$tidyupList[i]);\n        }\n      }\n    }\n  }, {\n    key: \"$_onModelDataChanged\",\n    value: function $_onModelDataChanged(startIndex, endIndex, roles) {\n      var model = this.$getModel();\n      var roleNames = roles || model.roleNames;\n      for (var index = startIndex; index <= endIndex; index++) {\n        var _item3 = this.$items[index];\n        for (var i in roleNames) {\n          _item3.$properties[roleNames[i]].set(model.data(index, roleNames[i]), QmlWeb.QMLProperty.ReasonInit, _item3, this.model.$context);\n        }\n      }\n    }\n  }, {\n    key: \"$_onRowsInserted\",\n    value: function $_onRowsInserted(startIndex, endIndex) {\n      this.$insertChildren(startIndex, endIndex);\n      this.count = this.$items.length;\n    }\n  }, {\n    key: \"$_onRowsMoved\",\n    value: function $_onRowsMoved(sourceStartIndex, sourceEndIndex, destinationIndex) {\n      var vals = this.$items.splice(sourceStartIndex, sourceEndIndex - sourceStartIndex);\n      for (var i = 0; i < vals.length; i++) {\n        this.$items.splice(destinationIndex + i, 0, vals[i]);\n      }\n      var smallestChangedIndex = sourceStartIndex < destinationIndex ? sourceStartIndex : destinationIndex;\n      for (var _i11 = smallestChangedIndex; _i11 < this.$items.length; _i11++) {\n        this.$items[_i11].index = _i11;\n      }\n    }\n  }, {\n    key: \"$_onRowsRemoved\",\n    value: function $_onRowsRemoved(startIndex, endIndex) {\n      this.$removeChildren(startIndex, endIndex);\n      for (var i = startIndex; i < this.$items.length; i++) {\n        this.$items[i].index = i;\n      }\n      this.count = this.$items.length;\n    }\n  }, {\n    key: \"$_onModelReset\",\n    value: function $_onModelReset() {\n      this.$applyModel();\n    }\n  }, {\n    key: \"$insertChildren\",\n    value: function $insertChildren(startIndex, endIndex) {\n      if (endIndex <= 0) {\n        this.count = 0;\n        return;\n      }\n\n      var QMLOperationState = QmlWeb.QMLOperationState;\n      var createProperty = QmlWeb.createProperty;\n      var model = this.$getModel();\n      var index = void 0;\n      for (index = startIndex; index < endIndex; index++) {\n        var newItem = this.delegate.$createObject(this.parent);\n        createProperty(\"int\", newItem, \"index\", { initialValue: index });\n\n        // To properly import JavaScript in the context of a component\n        this.delegate.finalizeImports();\n\n        if (typeof model === \"number\" || model instanceof Array) {\n          if (typeof newItem.$properties.modelData === \"undefined\") {\n            createProperty(\"variant\", newItem, \"modelData\");\n          }\n          var value = model instanceof Array ? model[index] : typeof model === \"number\" ? index : \"undefined\";\n          newItem.$properties.modelData.set(value, QmlWeb.QMLProperty.ReasonInit, newItem, model.$context);\n        } else {\n          for (var i = 0; i < model.roleNames.length; i++) {\n            var roleName = model.roleNames[i];\n            if (typeof newItem.$properties[roleName] === \"undefined\") {\n              createProperty(\"variant\", newItem, roleName);\n            }\n            newItem.$properties[roleName].set(model.data(index, roleName), QmlWeb.QMLProperty.ReasonInit, newItem, this.model.$context);\n          }\n        }\n\n        this.$items.splice(index, 0, newItem);\n\n        // parent must be set after the roles have been added to newItem scope in\n        // case we are outside of QMLOperationState.Init and parentChanged has\n        // any side effects that result in those roleNames being referenced.\n        newItem.parent = this.parent;\n\n        // TODO debug this. Without check to Init, Completed sometimes called\n        // twice.. But is this check correct?\n        if (QmlWeb.engine.operationState !== QMLOperationState.Init && QmlWeb.engine.operationState !== QMLOperationState.Idle) {\n          // We don't call those on first creation, as they will be called\n          // by the regular creation-procedures at the right time.\n          this.$callOnCompleted(newItem);\n        }\n      }\n      if (QmlWeb.engine.operationState !== QMLOperationState.Init) {\n        // We don't call those on first creation, as they will be called\n        // by the regular creation-procedures at the right time.\n        QmlWeb.engine.$initializePropertyBindings();\n      }\n\n      if (index > 0) {\n        this.container().childrenChanged();\n      }\n\n      for (var _i12 = endIndex; _i12 < this.$items.length; _i12++) {\n        this.$items[_i12].index = _i12;\n      }\n    }\n  }, {\n    key: \"$removeChildren\",\n    value: function $removeChildren(startIndex, endIndex) {\n      var removed = this.$items.splice(startIndex, endIndex - startIndex);\n      for (var index in removed) {\n        removed[index].$delete();\n        this.$removeChildProperties(removed[index]);\n      }\n    }\n  }, {\n    key: \"$removeChildProperties\",\n    value: function $removeChildProperties(child) {\n      var signals = QmlWeb.engine.completedSignals;\n      signals.splice(signals.indexOf(child.Component.completed), 1);\n      for (var i = 0; i < child.children.length; i++) {\n        this.$removeChildProperties(child.children[i]);\n      }\n    }\n  }]);\n\n  return _class44;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Rotation\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    angle: \"real\"\n  }\n}, function () {\n  function _class45(meta) {\n    _classCallCheck(this, _class45);\n\n    QmlWeb.callSuper(this, meta);\n\n    var createProperty = QmlWeb.createProperty;\n\n    this.axis = new QmlWeb.QObject(this);\n    createProperty(\"real\", this.axis, \"x\");\n    createProperty(\"real\", this.axis, \"y\");\n    createProperty(\"real\", this.axis, \"z\", { initialValue: 1 });\n\n    this.origin = new QmlWeb.QObject(this);\n    createProperty(\"real\", this.origin, \"x\");\n    createProperty(\"real\", this.origin, \"y\");\n\n    this.angleChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.axis.xChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.axis.yChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.axis.zChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.origin.xChanged.connect(this, this.$updateOrigin);\n    this.origin.yChanged.connect(this, this.$updateOrigin);\n    this.$parent.$updateTransform();\n  }\n\n  _createClass(_class45, [{\n    key: \"$updateOrigin\",\n    value: function $updateOrigin() {\n      var style = this.$parent.dom.style;\n      style.transformOrigin = this.origin.x + \"px \" + this.origin.y + \"px\";\n      style.webkitTransformOrigin = this.origin.x + \"px \" + this.origin.y + \"px\";\n    }\n  }]);\n\n  return _class45;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Row\",\n  versions: /.*/,\n  baseClass: \"Positioner\",\n  properties: {\n    layoutDirection: \"enum\"\n  }\n}, function () {\n  function _class46(meta) {\n    _classCallCheck(this, _class46);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.layoutDirectionChanged.connect(this, this.layoutChildren);\n    this.layoutChildren();\n  }\n\n  _createClass(_class46, [{\n    key: \"layoutChildren\",\n    value: function layoutChildren() {\n      var curPos = 0;\n      var maxHeight = 0;\n      // When layoutDirection is RightToLeft we need oposite order\n      var i = this.layoutDirection === 1 ? this.children.length - 1 : 0;\n      var endPoint = this.layoutDirection === 1 ? -1 : this.children.length;\n      var step = this.layoutDirection === 1 ? -1 : 1;\n      for (; i !== endPoint; i += step) {\n        var child = this.children[i];\n        if (!(child.visible && child.width && child.height)) {\n          continue;\n        }\n        maxHeight = child.height > maxHeight ? child.height : maxHeight;\n\n        child.x = curPos;\n        curPos += child.width + this.spacing;\n      }\n      this.implicitHeight = maxHeight;\n      // We want no spacing at the right side\n      this.implicitWidth = curPos - this.spacing;\n    }\n  }]);\n\n  return _class46;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Scale\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    xScale: \"real\",\n    yScale: \"real\"\n  }\n}, function () {\n  function _class47(meta) {\n    _classCallCheck(this, _class47);\n\n    QmlWeb.callSuper(this, meta);\n\n    var createProperty = QmlWeb.createProperty;\n    this.origin = new QmlWeb.QObject(this);\n    createProperty(\"real\", this.origin, \"x\");\n    createProperty(\"real\", this.origin, \"y\");\n\n    this.xScaleChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.yScaleChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.origin.xChanged.connect(this, this.$updateOrigin);\n    this.origin.yChanged.connect(this, this.$updateOrigin);\n\n    /* QML default origin is top-left, while CSS default origin is centre, so\n     * $updateOrigin must be called to set the initial transformOrigin. */\n    this.$updateOrigin();\n  }\n\n  _createClass(_class47, [{\n    key: \"$updateOrigin\",\n    value: function $updateOrigin() {\n      var style = this.$parent.dom.style;\n      style.transformOrigin = this.origin.x + \"px \" + this.origin.y + \"px\";\n      style.webkitTransformOrigin = this.origin.x + \"px \" + this.origin.y + \"px\";\n    }\n  }]);\n\n  return _class47;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"SequentialAnimation\",\n  versions: /.*/,\n  baseClass: \"Animation\",\n  properties: {\n    animations: \"list\"\n  },\n  defaultProperty: \"animations\"\n}, function () {\n  function _class48(meta) {\n    var _this32 = this;\n\n    _classCallCheck(this, _class48);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.animationsChanged.connect(this, this.$onAnimatonsChanged);\n\n    QmlWeb.engine.$registerStart(function () {\n      if (!_this32.running) return;\n      _this32.running = false; // toggled back by start();\n      _this32.start();\n    });\n    QmlWeb.engine.$registerStop(function () {\n      return self.stop();\n    });\n  }\n\n  _createClass(_class48, [{\n    key: \"$onAnimatonsChanged\",\n    value: function $onAnimatonsChanged() {\n      var flags = QmlWeb.Signal.UniqueConnection;\n      for (var i = 0; i < this.animations.length; i++) {\n        var animation = this.animations[i];\n        animation.runningChanged.connect(this, this.$nextAnimation, flags);\n      }\n    }\n  }, {\n    key: \"$nextAnimation\",\n    value: function $nextAnimation(proceed) {\n      if (this.running && !proceed) {\n        this.$curIndex++;\n        if (this.$curIndex < this.animations.length) {\n          var anim = this.animations[this.$curIndex];\n          console.log(\"nextAnimation\", this, this.$curIndex, anim);\n          anim.start();\n        } else {\n          this.$passedLoops++;\n          if (this.$passedLoops >= this.loops) {\n            this.complete();\n          } else {\n            this.$curIndex = -1;\n            this.$nextAnimation();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (this.running) return;\n      this.running = true;\n      this.$curIndex = -1;\n      this.$passedLoops = 0;\n      this.$nextAnimation();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this.running) return;\n      this.running = false;\n      if (this.$curIndex < this.animations.length) {\n        this.animations[this.$curIndex].stop();\n      }\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      if (!this.running) return;\n      if (this.$curIndex < this.animations.length) {\n        // Stop current animation\n        this.animations[this.$curIndex].stop();\n      }\n      this.running = false;\n    }\n  }]);\n\n  return _class48;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"State\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    name: \"string\",\n    changes: \"list\",\n    extend: \"string\",\n    when: \"bool\"\n  },\n  defaultProperty: \"changes\"\n}, function () {\n  function _class49(meta) {\n    _classCallCheck(this, _class49);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$item = this.$parent;\n\n    this.whenChanged.connect(this, this.$onWhenChanged);\n  }\n\n  _createClass(_class49, [{\n    key: \"$getAllChanges\",\n    value: function $getAllChanges() {\n      var _this33 = this;\n\n      if (this.extend) {\n        /* ECMAScript 2015. TODO: polyfill Array?\n        const base = this.$item.states.find(state => state.name === this.extend);\n        */\n        var states = this.$item.states;\n        var base = states.filter(function (state) {\n          return state.name === _this33.extend;\n        })[0];\n        if (base) {\n          return base.$getAllChanges().concat(this.changes);\n        }\n        console.error(\"Can't find the state to extend!\");\n      }\n      return this.changes;\n    }\n  }, {\n    key: \"$onWhenChanged\",\n    value: function $onWhenChanged(newVal) {\n      if (newVal) {\n        this.$item.state = this.name;\n      } else if (this.$item.state === this.name) {\n        this.$item.state = \"\";\n      }\n    }\n  }]);\n\n  return _class49;\n}());\n\nvar platformsDetectors = [\n//{ name: \"W8\", regexp: /Windows NT 6\\.2/ },\n//{ name: \"W7\", regexp: /Windows NT 6\\.1/ },\n//{ name: \"Windows\", regexp: /Windows NT/ },\n{ name: \"OSX\", regexp: /Macintosh/ }];\n\nvar systemPalettes = {};\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"SystemPalette\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  enums: {\n    SystemPalette: {\n      Active: \"active\", Inactive: \"inactive\", Disabled: \"disabled\"\n    }\n  },\n  properties: {\n    alternateBase: { type: \"color\", readOnly: true },\n    base: { type: \"color\", readOnly: true },\n    button: { type: \"color\", readOnly: true },\n    buttonText: { type: \"color\", readOnly: true },\n    dark: { type: \"color\", readOnly: true },\n    highlight: { type: \"color\", readOnly: true },\n    highlightedText: { type: \"color\", readOnly: true },\n    light: { type: \"color\", readOnly: true },\n    mid: { type: \"color\", readOnly: true },\n    midlight: { type: \"color\", readOnly: true },\n    shadow: { type: \"color\", readOnly: true },\n    text: { type: \"color\", readOnly: true },\n    window: { type: \"color\", readOnly: true },\n    windowText: { type: \"color\", readOnly: true },\n\n    colorGroup: \"enum\"\n  }\n}, function () {\n  function _class50(meta) {\n    _classCallCheck(this, _class50);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.colorGroupChanged.connect(this, this.$onColorGroupChanged);\n\n    this.$platform = \"OSX\";\n    // Detect OS\n    for (var i = 0; i < platformsDetectors.length; ++i) {\n      if (platformsDetectors[i].regexp.test(navigator.userAgent)) {\n        this.$platform = platformsDetectors[i].name;\n        break;\n      }\n    }\n  }\n\n  _createClass(_class50, [{\n    key: \"$onColorGroupChanged\",\n    value: function $onColorGroupChanged(newVal) {\n      var _this34 = this;\n\n      var pallete = systemPalettes[this.$platform][newVal];\n      this.$canEditReadOnlyProperties = true;\n      Object.keys(pallete).forEach(function (key) {\n        _this34[key] = pallete[key];\n      });\n      delete this.$canEditReadOnlyProperties;\n    }\n  }]);\n\n  return _class50;\n}());\n\nsystemPalettes.OSX = {\n  active: {\n    alternateBase: \"#f6f6f6\",\n    base: \"#ffffff\",\n    button: \"#ededed\",\n    buttonText: \"#000000\",\n    dark: \"#bfbfbf\",\n    highlight: \"#fbed73\",\n    highlightText: \"#000000\",\n    light: \"#ffffff\",\n    mid: \"#a9a9a9\",\n    midlight: \"#f6f6f6\",\n    shadow: \"#8b8b8b\",\n    text: \"#000000\",\n    window: \"#ededed\",\n    windowText: \"#000000\"\n  },\n  inactive: {\n    alternateBase: \"#f6f6f6\",\n    base: \"#ffffff\",\n    button: \"#ededed\",\n    buttonText: \"#000000\",\n    dark: \"#bfbfbf\",\n    highlight: \"#d0d0d0\",\n    highlightText: \"#000000\",\n    light: \"#ffffff\",\n    mid: \"#a9a9a9\",\n    midlight: \"#f6f6f6\",\n    shadow: \"#8b8b8b\",\n    text: \"#000000\",\n    window: \"#ededed\",\n    windowText: \"#000000\"\n  },\n  disabled: {\n    alternateBase: \"#f6f6f6\",\n    base: \"#ededed\",\n    button: \"#ededed\",\n    buttonText: \"#949494\",\n    dark: \"#bfbfbf\",\n    highlight: \"#d0d0d0\",\n    highlightText: \"#7f7f7f\",\n    light: \"#ffffff\",\n    mid: \"#a9a9a9\",\n    midlight: \"#f6f6f6\",\n    shadow: \"#8b8b8b\",\n    text: \"#7f7f7f\",\n    window: \"#ededed\",\n    windowText: \"#7f7f7f\"\n  }\n};\n\nQmlWeb.systemPalettes = systemPalettes;\nQmlWeb.platformsDetectors = platformsDetectors;\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Text\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  enums: {\n    Text: {\n      NoWrap: 0, WordWrap: 1, WrapAnywhere: 2, Wrap: 3,\n      WrapAtWordBoundaryOrAnywhere: 4,\n      AlignLeft: 1, AlignRight: 2, AlignHCenter: 4, AlignJustify: 8,\n      AlignTop: 32, AlignBottom: 64, AlignVCenter: 128,\n      Normal: 0, Outline: 1, Raised: 2, Sunken: 3\n    }\n  },\n  properties: {\n    color: { type: \"color\", initialValue: \"black\" },\n    text: \"string\",\n    lineHeight: \"real\",\n    wrapMode: { type: \"enum\", initialValue: 0 }, // Text.NoWrap\n    horizontalAlignment: { type: \"enum\", initialValue: 1 }, // Text.AlignLeft\n    style: \"enum\",\n    styleColor: \"color\"\n  }\n}, function () {\n  function _class51(meta) {\n    _classCallCheck(this, _class51);\n\n    QmlWeb.callSuper(this, meta);\n\n    var fc = this.impl = document.createElement(\"span\");\n    fc.style.pointerEvents = \"none\";\n    fc.style.width = \"100%\";\n    fc.style.height = \"100%\";\n    fc.style.whiteSpace = \"pre\";\n    this.dom.style.textAlign = \"left\";\n    this.dom.appendChild(fc);\n\n    var QMLFont = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Font\");\n    this.font = new QMLFont(this);\n\n    this.colorChanged.connect(this, this.$onColorChanged);\n    this.textChanged.connect(this, this.$onTextChanged);\n    this.lineHeightChanged.connect(this, this.$onLineHeightChanged);\n    this.wrapModeChanged.connect(this, this.$onWrapModeChanged);\n    this.horizontalAlignmentChanged.connect(this, this.$onHorizontalAlignmentChanged);\n    this.styleChanged.connect(this, this.$onStyleChanged);\n    this.styleColorChanged.connect(this, this.$onStyleColorChanged);\n\n    this.font.family = \"sans-serif\";\n    this.font.pointSize = 10;\n\n    this.widthChanged.connect(this, this.$onWidthChanged);\n\n    this.font.boldChanged.connect(this, this.$onFontChanged);\n    this.font.weightChanged.connect(this, this.$onFontChanged);\n    this.font.pixelSizeChanged.connect(this, this.$onFontChanged);\n    this.font.pointSizeChanged.connect(this, this.$onFontChanged);\n    this.font.familyChanged.connect(this, this.$onFontChanged);\n    this.font.letterSpacingChanged.connect(this, this.$onFontChanged);\n    this.font.wordSpacingChanged.connect(this, this.$onFontChanged);\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n  }\n\n  _createClass(_class51, [{\n    key: \"$onColorChanged\",\n    value: function $onColorChanged(newVal) {\n      this.impl.style.color = new QmlWeb.QColor(newVal);\n    }\n  }, {\n    key: \"$onTextChanged\",\n    value: function $onTextChanged(newVal) {\n      this.impl.innerHTML = newVal;\n      this.$updateImplicit();\n    }\n  }, {\n    key: \"$onWidthChanged\",\n    value: function $onWidthChanged() {\n      this.$updateImplicit();\n    }\n  }, {\n    key: \"$onLineHeightChanged\",\n    value: function $onLineHeightChanged(newVal) {\n      this.impl.style.lineHeight = newVal + \"px\";\n      this.$updateImplicit();\n    }\n  }, {\n    key: \"$onStyleChanged\",\n    value: function $onStyleChanged(newVal) {\n      this.$updateShadow(newVal, this.styleColor);\n    }\n  }, {\n    key: \"$onStyleColorChanged\",\n    value: function $onStyleColorChanged(newVal) {\n      this.$updateShadow(this.style, new QmlWeb.QColor(newVal));\n    }\n  }, {\n    key: \"$onWrapModeChanged\",\n    value: function $onWrapModeChanged(newVal) {\n      var style = this.impl.style;\n      switch (newVal) {\n        case this.Text.NoWrap:\n          style.whiteSpace = \"pre\";\n          break;\n        case this.Text.WordWrap:\n          style.whiteSpace = \"pre-wrap\";\n          style.wordWrap = \"normal\";\n          break;\n        case this.Text.WrapAnywhere:\n          style.whiteSpace = \"pre-wrap\";\n          style.wordBreak = \"break-all\";\n          break;\n        case this.Text.Wrap:\n        case this.Text.WrapAtWordBoundaryOrAnywhere:\n          style.whiteSpace = \"pre-wrap\";\n          style.wordWrap = \"break-word\";\n      }\n      this.$updateJustifyWhiteSpace();\n    }\n  }, {\n    key: \"$onHorizontalAlignmentChanged\",\n    value: function $onHorizontalAlignmentChanged(newVal) {\n      var textAlign = null;\n      switch (newVal) {\n        case this.Text.AlignLeft:\n          textAlign = \"left\";\n          break;\n        case this.Text.AlignRight:\n          textAlign = \"right\";\n          break;\n        case this.Text.AlignHCenter:\n          textAlign = \"center\";\n          break;\n        case this.Text.AlignJustify:\n          textAlign = \"justify\";\n          break;\n      }\n      this.dom.style.textAlign = textAlign;\n      this.$updateJustifyWhiteSpace();\n    }\n  }, {\n    key: \"$onFontChanged\",\n    value: function $onFontChanged() {\n      this.$updateImplicit();\n    }\n  }, {\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.$updateImplicit();\n    }\n  }, {\n    key: \"$updateImplicit\",\n    value: function $updateImplicit() {\n      if (!this.text || !this.dom) {\n        this.implicitHeight = this.implicitWidth = 0;\n        return;\n      }\n      var fc = this.impl;\n      // Need to move the child out of it's parent so that it can properly\n      // recalculate it's \"natural\" offsetWidth/offsetHeight\n      if (this.$isUsingImplicitWidth) {\n        document.body.appendChild(fc);\n      }\n      var height = fc.offsetHeight;\n      var width = fc.offsetWidth;\n      if (this.$isUsingImplicitWidth) {\n        this.dom.appendChild(fc);\n      }\n\n      this.implicitHeight = height;\n      this.implicitWidth = width;\n    }\n  }, {\n    key: \"$updateShadow\",\n    value: function $updateShadow(textStyle, styleColor) {\n      var style = this.impl.style;\n      switch (textStyle) {\n        case 0:\n          style.textShadow = \"none\";\n          break;\n        case 1:\n          style.textShadow = [\"1px 0 0 \" + styleColor, \"-1px 0 0 \" + styleColor, \"0 1px 0 \" + styleColor, \"0 -1px 0 \" + styleColor].join(\",\");\n          break;\n        case 2:\n          style.textShadow = \"1px 1px 0 \" + styleColor;\n          break;\n        case 3:\n          style.textShadow = \"-1px -1px 0 \" + styleColor;\n          break;\n      }\n    }\n  }, {\n    key: \"$updateJustifyWhiteSpace\",\n    value: function $updateJustifyWhiteSpace() {\n      var style = this.impl.style;\n      // AlignJustify doesn't work with pre/pre-wrap, so we decide the lesser of\n      // the two evils to be ignoring \"\\n\"s inside the text.\n      if (this.horizontalAlignment === this.Text.AlignJustify) {\n        style.whiteSpace = \"normal\";\n      }\n      this.$updateImplicit();\n    }\n  }]);\n\n  return _class51;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"TextEdit\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    activeFocusOnPress: { type: \"bool\", initialValue: true },\n    baseUrl: \"url\",\n    canPaste: \"bool\",\n    canRedo: \"bool\",\n    canUndo: \"bool\",\n    color: { type: \"color\", initialValue: \"white\" },\n    contentHeight: \"real\",\n    contentWidth: \"real\",\n    cursorDelegate: \"Component\",\n    cursorPosition: \"int\",\n    cursorRectangle: \"rectangle\",\n    cursorVisible: { type: \"bool\", initialValue: true },\n    effectiveHorizontalAlignment: \"enum\",\n    horizontalAlignment: \"enum\",\n    hoveredLink: \"string\",\n    inputMethodComposing: \"bool\",\n    inputMethodHints: \"enum\",\n    length: \"int\",\n    lineCount: \"int\",\n    mouseSelectionMode: \"enum\",\n    persistentSelection: \"bool\",\n    readOnly: \"bool\",\n    renderType: \"enum\",\n    selectByKeyboard: { type: \"bool\", initialValue: true },\n    selectByMouse: \"bool\",\n    selectedText: \"string\",\n    selectedTextColor: { type: \"color\", initialValue: \"yellow\" },\n    selectionColor: { type: \"color\", initialValue: \"pink\" },\n    selectionEnd: \"int\",\n    selectionStart: \"int\",\n    text: \"string\",\n    textDocument: \"TextDocument\",\n    textFormat: \"enum\",\n    textMargin: \"real\",\n    verticalAlignment: \"enum\",\n    wrapMode: \"enum\"\n  },\n  signals: {\n    linkActivated: [{ type: \"string\", name: \"link\" }],\n    linkHovered: [{ type: \"string\", name: \"link\" }]\n  }\n}, function () {\n  function _class52(meta) {\n    var _this35 = this;\n\n    _classCallCheck(this, _class52);\n\n    QmlWeb.callSuper(this, meta);\n\n    var QMLFont = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Font\");\n    this.font = new QMLFont(this);\n\n    // Undo / Redo stacks;\n    this.undoStack = [];\n    this.undoStackPosition = -1;\n    this.redoStack = [];\n    this.redoStackPosition = -1;\n\n    var textarea = this.impl = document.createElement(\"textarea\");\n    textarea.style.pointerEvents = \"auto\";\n    textarea.style.width = \"100%\";\n    textarea.style.height = \"100%\";\n    textarea.style.boxSizing = \"border-box\";\n    textarea.style.borderWidth = \"0\";\n    textarea.style.background = \"none\";\n    textarea.style.outline = \"none\";\n    textarea.style.resize = \"none\";\n    textarea.style.padding = \"0\"; // TODO: padding/*Padding props from Qt 5.6\n    // In some browsers text-areas have a margin by default, which distorts\n    // the positioning, so we need to manually set it to 0.\n    textarea.style.margin = \"0\";\n    textarea.disabled = false;\n    this.dom.appendChild(textarea);\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n    this.textChanged.connect(this, this.$onTextChanged);\n    this.colorChanged.connect(this, this.$onColorChanged);\n\n    this.impl.addEventListener(\"input\", function () {\n      return _this35.$updateValue();\n    });\n  }\n\n  _createClass(_class52, [{\n    key: \"append\",\n    value: function append(text) {\n      this.text += text;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      // TODO\n    }\n  }, {\n    key: \"cut\",\n    value: function cut() {\n      this.text = this.text(0, this.selectionStart) + this.text(this.selectionEnd, this.text.length);\n      // TODO\n    }\n  }, {\n    key: \"deselect\",\n    value: function deselect() {\n      //this.selectionStart = -1;\n      //this.selectionEnd = -1;\n      //this.selectedText = null;\n      // TODO\n    }\n  }, {\n    key: \"getFormattedText\",\n    value: function getFormattedText(start, end) {\n      var text = this.text.slice(start, end);\n      // TODO\n      // process text\n      return text;\n    }\n  }, {\n    key: \"getText\",\n    value: function getText(start, end) {\n      return this.text.slice(start, end);\n    }\n  }, {\n    key: \"insert\",\n    value: function insert() /*position, text*/{\n      // TODO\n    }\n  }, {\n    key: \"isRightToLeft\",\n    value: function isRightToLeft() /*start, end*/{\n      // TODO\n    }\n  }, {\n    key: \"linkAt\",\n    value: function linkAt() /*x, y*/{\n      // TODO\n    }\n  }, {\n    key: \"moveCursorSelection\",\n    value: function moveCursorSelection() /*x, y*/{\n      // TODO\n    }\n  }, {\n    key: \"paste\",\n    value: function paste() {\n      // TODO\n    }\n  }, {\n    key: \"positionAt\",\n    value: function positionAt() /*x, y*/{\n      // TODO\n    }\n  }, {\n    key: \"positionToRectangle\",\n    value: function positionToRectangle() /*position*/{\n      // TODO\n    }\n  }, {\n    key: \"redo\",\n    value: function redo() {\n      // TODO\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() /*start, end*/{\n      // TODO\n    }\n  }, {\n    key: \"select\",\n    value: function select() /*start, end*/{\n      // TODO\n    }\n  }, {\n    key: \"selectAll\",\n    value: function selectAll() {\n      // TODO\n    }\n  }, {\n    key: \"selectWord\",\n    value: function selectWord() {\n      // TODO\n    }\n  }, {\n    key: \"undo\",\n    value: function undo() {\n      // TODO\n    }\n  }, {\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.selectByKeyboard = !this.readOnly;\n      this.$updateValue();\n      this.implicitWidth = this.offsetWidth;\n      this.implicitHeight = this.offsetHeight;\n    }\n  }, {\n    key: \"$onTextChanged\",\n    value: function $onTextChanged(newVal) {\n      this.impl.value = newVal;\n    }\n  }, {\n    key: \"$onColorChanged\",\n    value: function $onColorChanged(newVal) {\n      this.impl.style.color = newVal;\n    }\n  }, {\n    key: \"$updateValue\",\n    value: function $updateValue() {\n      if (this.text !== this.impl.value) {\n        this.text = this.impl.value;\n      }\n      this.length = this.text.length;\n      this.lineCount = this.$getLineCount();\n      this.$updateCss();\n    }\n    // Transfer dom style to firstChild,\n    // then clear corresponding dom style\n\n  }, {\n    key: \"$updateCss\",\n    value: function $updateCss() {\n      var supported = [\"border\", \"borderRadius\", \"borderWidth\", \"borderColor\", \"backgroundColor\"];\n      var style = this.impl.style;\n      for (var n = 0; n < supported.length; n++) {\n        var o = supported[n];\n        var v = this.css[o];\n        if (v) {\n          style[o] = v;\n          this.css[o] = null;\n        }\n      }\n    }\n  }, {\n    key: \"$getLineCount\",\n    value: function $getLineCount() {\n      return this.text.split(/\\n/).length;\n    }\n  }]);\n\n  return _class52;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"TextInput\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  enums: {\n    TextInput: { Normal: 0, Password: 1, NoEcho: 2, PasswordEchoOnEdit: 3 }\n  },\n  properties: {\n    text: \"string\",\n    maximumLength: { type: \"int\", initialValue: -1 },\n    readOnly: \"bool\",\n    validator: \"var\",\n    echoMode: \"enum\" // TextInput.Normal\n  },\n  signals: {\n    accepted: []\n  }\n}, function () {\n  function _class53(meta) {\n    var _this36 = this;\n\n    _classCallCheck(this, _class53);\n\n    QmlWeb.callSuper(this, meta);\n\n    var QMLFont = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Font\");\n    this.font = new QMLFont(this);\n\n    var input = this.impl = document.createElement(\"input\");\n    input.type = \"text\";\n    input.disabled = true;\n    input.style.pointerEvents = \"auto\";\n    // In some browsers text-inputs have a margin by default, which distorts\n    // the positioning, so we need to manually set it to 0.\n    input.style.margin = \"0\";\n    input.style.padding = \"0\";\n    input.style.width = \"100%\";\n    input.style.height = \"100%\";\n    this.dom.appendChild(input);\n    this.setupFocusOnDom(input);\n    input.disabled = false;\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n    this.textChanged.connect(this, this.$onTextChanged);\n    this.echoModeChanged.connect(this, this.$onEchoModeChanged);\n    this.maximumLengthChanged.connect(this, this.$onMaximumLengthChanged);\n    this.readOnlyChanged.connect(this, this.$onReadOnlyChanged);\n    this.Keys.pressed.connect(this, this.Keys$onPressed);\n\n    this.impl.addEventListener(\"input\", function () {\n      return _this36.$updateValue();\n    });\n  }\n\n  _createClass(_class53, [{\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.implicitWidth = this.impl.offsetWidth;\n      this.implicitHeight = this.impl.offsetHeight;\n    }\n  }, {\n    key: \"$onTextChanged\",\n    value: function $onTextChanged(newVal) {\n      // We have to check if value actually changes.\n      // If we do not have this check, then after user updates text input\n      // following occurs: user updates gui text -> updateValue gets called ->\n      // textChanged gets called -> gui value updates again -> caret position\n      // moves to the right!\n      if (this.impl.value !== newVal) {\n        this.impl.value = newVal;\n      }\n    }\n  }, {\n    key: \"$onEchoModeChanged\",\n    value: function $onEchoModeChanged(newVal) {\n      var TextInput = this.TextInput;\n      var input = this.impl;\n      switch (newVal) {\n        case TextInput.Normal:\n          input.type = \"text\";\n          break;\n        case TextInput.Password:\n          input.type = \"password\";\n          break;\n        case TextInput.NoEcho:\n          // Not supported, use password, that's nearest\n          input.type = \"password\";\n          break;\n        case TextInput.PasswordEchoOnEdit:\n          // Not supported, use password, that's nearest\n          input.type = \"password\";\n          break;\n      }\n    }\n  }, {\n    key: \"$onMaximumLengthChanged\",\n    value: function $onMaximumLengthChanged(newVal) {\n      this.impl.maxLength = newVal < 0 ? null : newVal;\n    }\n  }, {\n    key: \"$onReadOnlyChanged\",\n    value: function $onReadOnlyChanged(newVal) {\n      this.impl.disabled = newVal;\n    }\n  }, {\n    key: \"Keys$onPressed\",\n    value: function Keys$onPressed(e) {\n      var Qt = QmlWeb.Qt;\n      var submit = e.key === Qt.Key_Return || e.key === Qt.Key_Enter;\n      if (submit && this.$testValidator()) {\n        this.accepted();\n        e.accepted = true;\n      }\n    }\n  }, {\n    key: \"$testValidator\",\n    value: function $testValidator() {\n      if (this.validator) {\n        return this.validator.validate(this.text);\n      }\n      return true;\n    }\n  }, {\n    key: \"$updateValue\",\n    value: function $updateValue() {\n      if (this.text !== this.impl.value) {\n        this.$canEditReadOnlyProperties = true;\n        this.text = this.impl.value;\n        this.$canEditReadOnlyProperties = false;\n      }\n    }\n  }]);\n\n  return _class53;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Transition\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    animations: \"list\",\n    from: { type: \"string\", initialValue: \"*\" },\n    to: { type: \"string\", initialValue: \"*\" },\n    reversible: \"bool\"\n  },\n  defaultProperty: \"animations\"\n}, function () {\n  function _class54(meta) {\n    _classCallCheck(this, _class54);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$item = this.$parent;\n  }\n\n  _createClass(_class54, [{\n    key: \"$start\",\n    value: function $start(actions) {\n      for (var i = 0; i < this.animations.length; i++) {\n        var animation = this.animations[i];\n        animation.$actions = [];\n        var $targets = animation.$targets,\n            $props = animation.$props,\n            $actions = animation.$actions;\n\n        for (var j in actions) {\n          var _action6 = actions[j];\n          if (($targets.length === 0 || $targets.indexOf(_action6.target) !== -1) && ($props.length === 0 || $props.indexOf(_action6.property) !== -1)) {\n            $actions.push(_action6);\n          }\n        }\n        animation.start();\n      }\n    }\n  }, {\n    key: \"$stop\",\n    value: function $stop() {\n      for (var i = 0; i < this.animations.length; i++) {\n        this.animations[i].stop();\n      }\n    }\n  }]);\n\n  return _class54;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Translate\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    x: \"real\",\n    y: \"real\"\n  }\n}, function () {\n  function _class55(meta) {\n    _classCallCheck(this, _class55);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.xChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.yChanged.connect(this.$parent, this.$parent.$updateTransform);\n  }\n\n  return _class55;\n}());\n\n// WARNING: Can have wrong behavior if url is changed while the socket is in\n// Connecting state.\n// TODO: Recheck everything.\n\nQmlWeb.registerQmlType({\n  module: \"QtWebSockets\",\n  name: \"WebSocket\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  enums: {\n    WebSocket: { Connecting: 0, Open: 1, Closing: 2, Closed: 3, Error: 4 }\n  },\n  properties: {\n    active: \"bool\",\n    status: { type: \"enum\", initialValue: 3 }, // WebSocket.Closed\n    errorString: \"string\",\n    url: \"url\"\n  },\n  signals: {\n    textMessageReceived: [{ type: \"string\", name: \"message\" }]\n  }\n}, function () {\n  function _class56(meta) {\n    _classCallCheck(this, _class56);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$socket = undefined;\n    this.$reconnect = false;\n\n    this.statusChanged.connect(this, this.$onStatusChanged);\n    this.activeChanged.connect(this, this.$reconnectSocket);\n    this.urlChanged.connect(this, this.$reconnectSocket);\n  }\n\n  _createClass(_class56, [{\n    key: \"$onStatusChanged\",\n    value: function $onStatusChanged(status) {\n      if (status !== this.WebSocket.Error) {\n        this.errorString = \"\";\n      }\n    }\n  }, {\n    key: \"$connectSocket\",\n    value: function $connectSocket() {\n      var _this37 = this;\n\n      this.$reconnect = false;\n\n      if (!this.url || !this.active) {\n        return;\n      }\n\n      this.status = this.WebSocket.Connecting;\n      this.$socket = new WebSocket(this.url);\n      this.$socket.onopen = function () {\n        _this37.status = _this37.WebSocket.Open;\n      };\n      this.$socket.onclose = function () {\n        _this37.status = _this37.WebSocket.Closed;\n        if (_this37.$reconnect) {\n          _this37.$connectSocket();\n        }\n      };\n      this.$socket.onerror = function (error) {\n        _this37.errorString = error.message;\n        _this37.status = _this37.WebSocket.Error;\n      };\n      this.$socket.onmessage = function (message) {\n        _this37.textMessageReceived(message.data);\n      };\n    }\n  }, {\n    key: \"$reconnectSocket\",\n    value: function $reconnectSocket() {\n      this.$reconnect = true;\n      if (this.status === this.WebSocket.Open) {\n        this.status = this.WebSocket.Closing;\n        this.$socket.close();\n      } else if (this.status !== this.WebSocket.Closing) {\n        this.$connectSocket();\n      }\n    }\n  }, {\n    key: \"sendTextMessage\",\n    value: function sendTextMessage(message) {\n      if (this.status === this.WebSocket.Open) {\n        this.$socket.send(message);\n      }\n    }\n  }]);\n\n  return _class56;\n}());\n}(typeof global != \"undefined\" ? global : window));\n\n\n",";(function(global) {\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar QmlWeb = {};\n\nglobal.QmlWeb = QmlWeb;\n\nvar objectIds = 0;\n\nvar QObject = function () {\n  function QObject(parent) {\n    _classCallCheck(this, QObject);\n\n    this.$parent = parent;\n    if (parent && parent.$tidyupList) {\n      parent.$tidyupList.push(this);\n    }\n\n    // List of things to tidy up when deleting this object.\n    this.$tidyupList = [];\n    this.$properties = {};\n    this.$signals = [];\n\n    this.objectId = objectIds++;\n  }\n\n  _createClass(QObject, [{\n    key: \"$delete\",\n    value: function $delete() {\n      if (this.$Component) {\n        this.$Component.destruction();\n      }\n\n      while (this.$tidyupList.length > 0) {\n        var item = this.$tidyupList[0];\n        if (item.$delete) {\n          // It's a QObject\n          item.$delete();\n        } else {\n          // It must be a signal\n          item.disconnect(this);\n        }\n      }\n\n      for (var i in this.$properties) {\n        var prop = this.$properties[i];\n        while (prop.$tidyupList.length > 0) {\n          prop.$tidyupList[0].disconnect(prop);\n        }\n      }\n\n      if (this.$parent && this.$parent.$tidyupList) {\n        var index = this.$parent.$tidyupList.indexOf(this);\n        this.$parent.$tidyupList.splice(index, 1);\n      }\n\n      // must do this:\n      // 1) parent will be notified and erase object from it's children.\n      // 2) DOM node will be removed.\n      this.parent = undefined;\n\n      // Disconnect any slots connected to any of our signals. Do this after\n      // clearing the parent, as that relies on parentChanged being handled.\n      for (var _i in this.$signals) {\n        this.$signals[_i].disconnect();\n      }\n    }\n\n    // must have a `destroy` method\n    // http://doc.qt.io/qt-5/qtqml-javascript-dynamicobjectcreation.html\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.$delete();\n    }\n  }]);\n\n  return QObject;\n}();\n\nQmlWeb.QObject = QObject;\n\nvar JSItemModel = function () {\n  function JSItemModel() {\n    _classCallCheck(this, JSItemModel);\n\n    this.roleNames = [];\n\n    var Signal = QmlWeb.Signal;\n    this.dataChanged = Signal.signal([{ type: \"int\", name: \"startIndex\" }, { type: \"int\", name: \"endIndex\" }]);\n    this.rowsInserted = Signal.signal([{ type: \"int\", name: \"startIndex\" }, { type: \"int\", name: \"endIndex\" }]);\n    this.rowsMoved = Signal.signal([{ type: \"int\", name: \"sourceStartIndex\" }, { type: \"int\", name: \"sourceEndIndex\" }, { type: \"int\", name: \"destinationIndex\" }]);\n    this.rowsRemoved = Signal.signal([{ type: \"int\", name: \"startIndex\" }, { type: \"int\", name: \"endIndex\" }]);\n    this.modelReset = Signal.signal();\n  }\n\n  _createClass(JSItemModel, [{\n    key: \"setRoleNames\",\n    value: function setRoleNames(names) {\n      this.roleNames = names;\n    }\n  }]);\n\n  return JSItemModel;\n}();\n\nQmlWeb.JSItemModel = JSItemModel;\n\n// TODO complete implementation (with attributes `r`,`g` and `b`).\n\nvar QColor = function () {\n  function QColor(val) {\n    _classCallCheck(this, QColor);\n\n    this.$value = \"black\";\n    if (val instanceof QColor) {\n      // Copy constructor\n      this.$value = val.$value;\n    } else if (typeof val === \"string\") {\n      this.$value = val.toLowerCase();\n    } else if (typeof val === \"number\") {\n      // we assume it is int value and must be converted to css hex with padding\n      var rgb = (Math.round(val) + 0x1000000).toString(16).substr(-6);\n      this.$value = \"#\" + rgb;\n    }\n  }\n\n  _createClass(QColor, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.$value;\n    }\n  }, {\n    key: \"$get\",\n    value: function $get() {\n      // Returns the same instance for all equivalent colors.\n      // NOTE: the returned value should not be changed using method calls, if\n      // those would be added in the future, the returned value should be wrapped.\n      if (!QColor.$colors[this.$value]) {\n        if (QColor.$colorsCount >= QColor.comparableColorsLimit) {\n          // Too many colors created, bail out to avoid memory hit\n          return this;\n        }\n        QColor.$colors[this.$value] = this;\n        QColor.$colorsCount++;\n        if (QColor.$colorsCount === QColor.comparableColorsLimit) {\n          console.warn(\"QmlWeb: the number of QColor instances reached the limit set in\", \"QmlWeb.QColor.comparableColorsLimit. Further created colors would\", \"not be comparable to avoid memory hit.\");\n        }\n      }\n      return QColor.$colors[this.$value];\n    }\n  }]);\n\n  return QColor;\n}();\n\nQColor.$colors = {};\nQColor.$colorsCount = 0;\nQColor.comparableColorsLimit = 10000;\nQmlWeb.QColor = QColor;\n\nvar QSizeF = function (_QmlWeb$QObject) {\n  _inherits(QSizeF, _QmlWeb$QObject);\n\n  function QSizeF(width, height) {\n    _classCallCheck(this, QSizeF);\n\n    var _this = _possibleConstructorReturn(this, (QSizeF.__proto__ || Object.getPrototypeOf(QSizeF)).call(this));\n\n    var createProperty = QmlWeb.createProperty;\n    createProperty(\"real\", _this, \"width\", { initialValue: width });\n    createProperty(\"real\", _this, \"height\", { initialValue: height });\n    return _this;\n  }\n\n  return QSizeF;\n}(QmlWeb.QObject);\n\nQmlWeb.QSizeF = QSizeF;\n\nvar Signal = function () {\n  function Signal() {\n    var _this2 = this;\n\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Signal);\n\n    this.connectedSlots = [];\n    this.obj = options.obj;\n    this.options = options;\n\n    this.signal = function () {\n      return _this2.execute.apply(_this2, arguments);\n    };\n    this.signal.parameters = params;\n    this.signal.connect = this.connect.bind(this);\n    this.signal.disconnect = this.disconnect.bind(this);\n    this.signal.isConnected = this.isConnected.bind(this);\n\n    // TODO Fix Keys that don't have an obj for the signal\n    if (this.obj && this.obj.$signals !== undefined) {\n      this.obj.$signals.push(this.signal);\n    }\n  }\n\n  _createClass(Signal, [{\n    key: \"execute\",\n    value: function execute() {\n      QmlWeb.QMLProperty.pushEvalStack();\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      for (var i in this.connectedSlots) {\n        var desc = this.connectedSlots[i];\n        if (desc.type & Signal.QueuedConnection) {\n          Signal.$addQueued(desc, args);\n        } else {\n          Signal.$execute(desc, args);\n        }\n      }\n      QmlWeb.QMLProperty.popEvalStack();\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      var type = Signal.AutoConnection;\n\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      if (typeof args[args.length - 1] === \"number\") {\n        type = args.pop();\n      }\n      if (type & Signal.UniqueConnection) {\n        if (this.isConnected.apply(this, args)) {\n          return;\n        }\n      }\n      if (args.length === 1) {\n        this.connectedSlots.push({ thisObj: global, slot: args[0], type: type });\n      } else if (typeof args[1] === \"string\" || args[1] instanceof String) {\n        if (args[0].$tidyupList && args[0] !== this.obj) {\n          args[0].$tidyupList.push(this.signal);\n        }\n        var slot = args[0][args[1]];\n        this.connectedSlots.push({ thisObj: args[0], slot: slot, type: type });\n      } else {\n        if (args[0].$tidyupList && (!this.obj || args[0] !== this.obj && args[0] !== this.obj.$parent)) {\n          args[0].$tidyupList.push(this.signal);\n        }\n        this.connectedSlots.push({ thisObj: args[0], slot: args[1], type: type });\n      }\n\n      // Notify object of connect\n      if (this.options.obj && this.options.obj.$connectNotify) {\n        this.options.obj.$connectNotify(this.options);\n      }\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      // type meaning:\n      //  1 = function, 2 = string\n      //  3 = object with string method,  4 = object with function\n      // No args means disconnect everything connected to this signal\n      var callType = args.length === 1 ? args[0] instanceof Function ? 1 : 2 : typeof args[1] === \"string\" || args[1] instanceof String ? 3 : 4;\n      for (var i = 0; i < this.connectedSlots.length; i++) {\n        var _connectedSlots$i = this.connectedSlots[i],\n            slot = _connectedSlots$i.slot,\n            thisObj = _connectedSlots$i.thisObj;\n\n        if (args.length === 0 || callType === 1 && slot === args[0] || callType === 2 && thisObj === args[0] || callType === 3 && thisObj === args[0] && slot === args[0][args[1]] || thisObj === args[0] && slot === args[1]) {\n          if (thisObj) {\n            var index = thisObj.$tidyupList.indexOf(this.signal);\n            if (index >= 0) {\n              thisObj.$tidyupList.splice(index, 1);\n            }\n          }\n          this.connectedSlots.splice(i, 1);\n          // We have removed an item from the list so the indexes shifted one\n          // backwards\n          i--;\n        }\n      }\n\n      // Notify object of disconnect\n      if (this.options.obj && this.options.obj.$disconnectNotify) {\n        this.options.obj.$disconnectNotify(this.options);\n      }\n    }\n  }, {\n    key: \"isConnected\",\n    value: function isConnected() {\n      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      var callType = args.length === 1 ? 1 : typeof args[1] === \"string\" || args[1] instanceof String ? 2 : 3;\n      for (var i in this.connectedSlots) {\n        var _connectedSlots$i2 = this.connectedSlots[i],\n            slot = _connectedSlots$i2.slot,\n            thisObj = _connectedSlots$i2.thisObj;\n\n        if (callType === 1 && slot === args[0] || callType === 2 && thisObj === args[0] && slot === args[0][args[1]] || thisObj === args[0] && slot === args[1]) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }], [{\n    key: \"signal\",\n    value: function signal() {\n      for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      return new (Function.prototype.bind.apply(Signal, [null].concat(args)))().signal;\n    }\n  }, {\n    key: \"$execute\",\n    value: function $execute(desc, args) {\n      try {\n        desc.slot.apply(desc.thisObj, args);\n      } catch (err) {\n        console.error(\"Signal slot error:\", err.message, err, Function.prototype.toString.call(desc.slot));\n      }\n    }\n  }, {\n    key: \"$addQueued\",\n    value: function $addQueued(desc, args) {\n      if (Signal.$queued.length === 0) {\n        if (global.setImmediate) {\n          global.setImmediate(Signal.$executeQueued);\n        } else {\n          global.setTimeout(Signal.$executeQueued, 0);\n        }\n      }\n      Signal.$queued.push([desc, args]);\n    }\n  }, {\n    key: \"$executeQueued\",\n    value: function $executeQueued() {\n      // New queued signals should be executed on next tick of the event loop\n      var queued = Signal.$queued;\n      Signal.$queued = [];\n\n      QmlWeb.QMLProperty.pushEvalStack();\n      for (var i in queued) {\n        Signal.$execute.apply(Signal, _toConsumableArray(queued[i]));\n      }\n      QmlWeb.QMLProperty.popEvalStack();\n    }\n  }]);\n\n  return Signal;\n}();\n\nSignal.$queued = [];\n\nSignal.AutoConnection = 0;\nSignal.DirectConnection = 1;\nSignal.QueuedConnection = 2;\nSignal.UniqueConnection = 128;\n\nQmlWeb.Signal = Signal;\n\nvar Qt = {\n  rgba: function rgba(r, g, b, a) {\n    var intr = Math.round(r * 255);\n    var intg = Math.round(g * 255);\n    var intb = Math.round(b * 255);\n    return \"rgba(\" + intr + \",\" + intg + \",\" + intb + \",\" + a + \")\";\n  },\n  hsla: function hsla(h, s, l, a) {\n    var inth = Math.round(h * 360);\n    var ints = Math.round(s * 100);\n    var intl = Math.round(l * 100);\n    return \"hsla(\" + inth + \",\" + ints + \"%,\" + intl + \"%,\" + a + \")\";\n  },\n  openUrlExternally: function openUrlExternally(url) {\n    var page = window.open(url, \"_blank\");\n    page.focus();\n  },\n  // Load file, parse and construct as Component (.qml)\n  createComponent: function createComponent(name) {\n    var engine = QmlWeb.engine;\n\n    var file = engine.$resolvePath(name);\n\n    // If \"name\" was a full URL, \"file\" will be equivalent to name and this\n    // will try and load the Component from the full URL, otherwise, this\n    // doubles as checking for the file in the current directory.\n    var tree = engine.loadComponent(file);\n\n    // If the Component is not found, and it is not a URL, look for \"name\" in\n    // this context's importSearchPaths\n    if (!tree) {\n      var nameIsUrl = engine.$parseURI(name) !== undefined;\n      if (!nameIsUrl) {\n        var moreDirs = engine.importSearchPaths(QmlWeb.executionContext.importContextId);\n        for (var i = 0; i < moreDirs.length; i++) {\n          file = \"\" + moreDirs[i] + name;\n          tree = engine.loadComponent(file);\n          if (tree) break;\n        }\n      }\n    }\n\n    if (!tree) {\n      return undefined;\n    }\n\n    var QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n    var component = new QMLComponent({\n      object: tree,\n      context: QmlWeb.executionContext\n    });\n    component.$basePath = engine.extractBasePath(file);\n    component.$imports = tree.$imports;\n    component.$file = file; // just for debugging\n\n    engine.loadImports(tree.$imports, component.$basePath, component.importContextId);\n\n    engine.components[name] = component;\n    return component;\n  },\n\n  createQmlObject: function createQmlObject(src, parent, file) {\n    var tree = QmlWeb.parseQML(src, file);\n\n    // Create and initialize objects\n\n    var QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n    var component = new QMLComponent({\n      object: tree,\n      parent: parent,\n      context: QmlWeb.executionContext\n    });\n\n    var engine = QmlWeb.engine;\n    engine.loadImports(tree.$imports, undefined, component.importContextId);\n\n    var resolvedFile = file || Qt.resolvedUrl(\"createQmlObject_function\");\n    component.$basePath = engine.extractBasePath(resolvedFile);\n    component.$imports = tree.$imports; // for later use\n    // not just for debugging, but for basepath too, see above\n    component.$file = resolvedFile;\n\n    var obj = component.createObject(parent);\n\n    var QMLOperationState = QmlWeb.QMLOperationState;\n    if (engine.operationState !== QMLOperationState.Init && engine.operationState !== QMLOperationState.Idle) {\n      // We don't call those on first creation, as they will be called\n      // by the regular creation-procedures at the right time.\n      engine.$initializePropertyBindings();\n\n      engine.callCompletedSignals();\n    }\n\n    return obj;\n  },\n\n  // Returns url resolved relative to the URL of the caller.\n  // http://doc.qt.io/qt-5/qml-qtqml-qt.html#resolvedUrl-method\n  resolvedUrl: function resolvedUrl(url) {\n    return QmlWeb.qmlUrl(url);\n  },\n\n  size: function size(width, height) {\n    return new QmlWeb.QSizeF(width, height);\n  },\n\n  // Buttons masks\n  LeftButton: 1,\n  RightButton: 2,\n  MiddleButton: 4,\n  // Modifiers masks\n  NoModifier: 0,\n  ShiftModifier: 1,\n  ControlModifier: 2,\n  AltModifier: 4,\n  MetaModifier: 8,\n  KeypadModifier: 16, // Note: Not available in web\n  // Layout directions\n  LeftToRight: 0,\n  RightToLeft: 1,\n  // Orientations\n  Vertical: 0,\n  Horizontal: 1,\n  // Keys\n  Key_Escape: 27,\n  Key_Tab: 9,\n  Key_Backtab: 245,\n  Key_Backspace: 8,\n  Key_Return: 13,\n  Key_Enter: 13,\n  Key_Insert: 45,\n  Key_Delete: 46,\n  Key_Pause: 19,\n  Key_Print: 42,\n  Key_SysReq: 0,\n  Key_Clear: 12,\n  Key_Home: 36,\n  Key_End: 35,\n  Key_Left: 37,\n  Key_Up: 38,\n  Key_Right: 39,\n  Key_Down: 40,\n  Key_PageUp: 33,\n  Key_PageDown: 34,\n  Key_Shift: 16,\n  Key_Control: 17,\n  Key_Meta: 91,\n  Key_Alt: 18,\n  Key_AltGr: 0,\n  Key_CapsLock: 20,\n  Key_NumLock: 144,\n  Key_ScrollLock: 145,\n  Key_F1: 112, Key_F2: 113, Key_F3: 114, Key_F4: 115, Key_F5: 116, Key_F6: 117,\n  Key_F7: 118, Key_F8: 119, Key_F9: 120, Key_F10: 121, Key_F11: 122,\n  Key_F12: 123, Key_F13: 124, Key_F14: 125, Key_F15: 126, Key_F16: 127,\n  Key_F17: 128, Key_F18: 129, Key_F19: 130, Key_F20: 131, Key_F21: 132,\n  Key_F22: 133, Key_F23: 134, Key_F24: 135,\n  Key_F25: 0, Key_F26: 0, Key_F27: 0, Key_F28: 0, Key_F29: 0, Key_F30: 0,\n  Key_F31: 0, Key_F32: 0, Key_F33: 0, Key_F34: 0, Key_F35: 0,\n  Key_Super_L: 0,\n  Key_Super_R: 0,\n  Key_Menu: 0,\n  Key_Hyper_L: 0,\n  Key_Hyper_R: 0,\n  Key_Help: 6,\n  Key_Direction_L: 0,\n  Key_Direction_R: 0,\n  Key_Space: 32,\n  Key_Any: 32,\n  Key_Exclam: 161,\n  Key_QuoteDbl: 162,\n  Key_NumberSign: 163,\n  Key_Dollar: 164,\n  Key_Percent: 165,\n  Key_Ampersant: 166,\n  Key_Apostrophe: 222,\n  Key_ParenLeft: 168,\n  Key_ParenRight: 169,\n  Key_Asterisk: 170,\n  Key_Plus: 171,\n  Key_Comma: 188,\n  Key_Minus: 173,\n  Key_Period: 190,\n  Key_Slash: 191,\n  Key_0: 48, Key_1: 49, Key_2: 50, Key_3: 51, Key_4: 52,\n  Key_5: 53, Key_6: 54, Key_7: 55, Key_8: 56, Key_9: 57,\n  Key_Colon: 58,\n  Key_Semicolon: 59,\n  Key_Less: 60,\n  Key_Equal: 61,\n  Key_Greater: 62,\n  Key_Question: 63,\n  Key_At: 64,\n  Key_A: 65, Key_B: 66, Key_C: 67, Key_D: 68, Key_E: 69, Key_F: 70, Key_G: 71,\n  Key_H: 72, Key_I: 73, Key_J: 74, Key_K: 75, Key_L: 76, Key_M: 77, Key_N: 78,\n  Key_O: 79, Key_P: 80, Key_Q: 81, Key_R: 82, Key_S: 83, Key_T: 84, Key_U: 85,\n  Key_V: 86, Key_W: 87, Key_X: 88, Key_Y: 89, Key_Z: 90,\n  Key_BracketLeft: 219,\n  Key_Backslash: 220,\n  Key_BracketRight: 221,\n  Key_AsciiCircum: 160,\n  Key_Underscore: 167,\n  Key_QuoteLeft: 0,\n  Key_BraceLeft: 174,\n  Key_Bar: 172,\n  Key_BraceRight: 175,\n  Key_AsciiTilde: 176,\n  Key_Back: 0,\n  Key_Forward: 0,\n  Key_Stop: 0,\n  Key_VolumeDown: 182,\n  Key_VolumeUp: 183,\n  Key_VolumeMute: 181,\n  Key_multiply: 106,\n  Key_add: 107,\n  Key_substract: 109,\n  Key_divide: 111,\n  Key_News: 0,\n  Key_OfficeHome: 0,\n  Key_Option: 0,\n  Key_Paste: 0,\n  Key_Phone: 0,\n  Key_Calendar: 0,\n  Key_Reply: 0,\n  Key_Reload: 0,\n  Key_RotateWindows: 0,\n  Key_RotationPB: 0,\n  Key_RotationKB: 0,\n  Key_Save: 0,\n  Key_Send: 0,\n  Key_Spell: 0,\n  Key_SplitScreen: 0,\n  Key_Support: 0,\n  Key_TaskPane: 0,\n  Key_Terminal: 0,\n  Key_Tools: 0,\n  Key_Travel: 0,\n  Key_Video: 0,\n  Key_Word: 0,\n  Key_Xfer: 0,\n  Key_ZoomIn: 0,\n  Key_ZoomOut: 0,\n  Key_Away: 0,\n  Key_Messenger: 0,\n  Key_WebCam: 0,\n  Key_MailForward: 0,\n  Key_Pictures: 0,\n  Key_Music: 0,\n  Key_Battery: 0,\n  Key_Bluetooth: 0,\n  Key_WLAN: 0,\n  Key_UWB: 0,\n  Key_AudioForward: 0,\n  Key_AudioRepeat: 0,\n  Key_AudioRandomPlay: 0,\n  Key_Subtitle: 0,\n  Key_AudioCycleTrack: 0,\n  Key_Time: 0,\n  Key_Hibernate: 0,\n  Key_View: 0,\n  Key_TopMenu: 0,\n  Key_PowerDown: 0,\n  Key_Suspend: 0,\n  Key_ContrastAdjust: 0,\n  Key_MediaLast: 0,\n  Key_unknown: -1,\n  Key_Call: 0,\n  Key_Camera: 0,\n  Key_CameraFocus: 0,\n  Key_Context1: 0,\n  Key_Context2: 0,\n  Key_Context3: 0,\n  Key_Context4: 0,\n  Key_Flip: 0,\n  Key_Hangup: 0,\n  Key_No: 0,\n  Key_Select: 93,\n  Key_Yes: 0,\n  Key_ToggleCallHangup: 0,\n  Key_VoiceDial: 0,\n  Key_LastNumberRedial: 0,\n  Key_Execute: 43,\n  Key_Printer: 42,\n  Key_Play: 250,\n  Key_Sleep: 95,\n  Key_Zoom: 251,\n  Key_Cancel: 3,\n  // Align\n  AlignLeft: 0x0001,\n  AlignRight: 0x0002,\n  AlignHCenter: 0x0004,\n  AlignJustify: 0x0008,\n  AlignTop: 0x0020,\n  AlignBottom: 0x0040,\n  AlignVCenter: 0x0080,\n  AlignCenter: 0x0084,\n  AlignBaseline: 0x0100,\n  AlignAbsolute: 0x0010,\n  AlignLeading: 0x0001,\n  AlignTrailing: 0x0002,\n  AlignHorizontal_Mask: 0x001f,\n  AlignVertical_Mask: 0x01e0,\n  // Screen\n  PrimaryOrientation: 0,\n  PortraitOrientation: 1,\n  LandscapeOrientation: 2,\n  InvertedPortraitOrientation: 4,\n  InvertedLandscapeOrientation: 8,\n  // CursorShape\n  ArrowCursor: 0,\n  UpArrowCursor: 1,\n  CrossCursor: 2,\n  WaitCursor: 3,\n  IBeamCursor: 4,\n  SizeVerCursor: 5,\n  SizeHorCursor: 6,\n  SizeBDiagCursor: 7,\n  SizeFDiagCursor: 8,\n  SizeAllCursor: 9,\n  BlankCursor: 10,\n  SplitVCursor: 11,\n  SplitHCursor: 12,\n  PointingHandCursor: 13,\n  ForbiddenCursor: 14,\n  WhatsThisCursor: 15,\n  BusyCursor: 16,\n  OpenHandCursor: 17,\n  ClosedHandCursor: 18,\n  DragCopyCursor: 19,\n  DragMoveCursor: 20,\n  DragLinkCursor: 21,\n  LastCursor: 21, //DragLinkCursor,\n  BitmapCursor: 24,\n  CustomCursor: 25,\n  // ScrollBar Policy\n  ScrollBarAsNeeded: 0,\n  ScrollBarAlwaysOff: 1,\n  ScrollBarAlwaysOn: 2\n};\n\nQmlWeb.Qt = Qt;\n\nvar QMLBinding = function () {\n  /**\n   * Create QML binding.\n   * @param {Variant} val Sourcecode or function representing the binding\n   * @param {Array} tree Parser tree of the binding\n   * @return {Object} Object representing the binding\n   */\n  function QMLBinding(val, tree) {\n    _classCallCheck(this, QMLBinding);\n\n    // this.isFunction states whether the binding is a simple js statement or a\n    // function containing a return statement. We decide this on whether it is a\n    // code block or not. If it is, we require a return statement. If it is a\n    // code block it could though also be a object definition, so we need to\n    // check that as well (it is, if the content is labels).\n    this.isFunction = tree && tree[0] === \"block\" && tree[1][0] && tree[1][0][0] !== \"label\";\n    this.src = val;\n    this.compiled = false;\n  }\n\n  _createClass(QMLBinding, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        src: this.src,\n        deps: JSON.stringify(this.deps),\n        tree: JSON.stringify(this.tree)\n      };\n    }\n  }, {\n    key: \"eval\",\n    value: function _eval(object, context, basePath) {\n      // .call is needed for `this` support\n      return this.impl.call(object, object, context, basePath);\n    }\n\n    /**\n     * Compile binding. Afterwards you may call binding.eval to evaluate.\n     */\n\n  }, {\n    key: \"compile\",\n    value: function compile() {\n      this.src = this.src.trim();\n      this.impl = QMLBinding.bindSrc(this.src, this.isFunction);\n      this.compiled = true;\n    }\n  }], [{\n    key: \"bindSrc\",\n    value: function bindSrc(src, isFunction) {\n      return new Function(\"__executionObject\", \"__executionContext\", \"__basePath\", \"\\n      QmlWeb.executionContext = __executionContext;\\n      if (__basePath) {\\n        QmlWeb.engine.$basePath = __basePath;\\n      }\\n      with(QmlWeb) with(__executionContext) with(__executionObject) {\\n        \" + (isFunction ? \"\" : \"return\") + \" \" + src + \"\\n      }\\n    \");\n    }\n  }]);\n\n  return QMLBinding;\n}();\n\nQmlWeb.QMLBinding = QMLBinding;\n\nfunction QMLBoolean(val) {\n  return !!val;\n}\nQMLBoolean.plainType = true;\nQmlWeb.qmlBoolean = QMLBoolean;\n\n// There can only be one running QMLEngine.\n// This variable points to the currently running engine.\nQmlWeb.engine = null;\n\nvar geometryProperties = [\"width\", \"height\", \"fill\", \"x\", \"y\", \"left\", \"right\", \"top\", \"bottom\"];\n\n// QML engine. EXPORTED.\n\nvar QMLEngine = function () {\n  function QMLEngine(element) {\n    _classCallCheck(this, QMLEngine);\n\n    //----------Public Members----------\n\n    this.fps = 60;\n    // Math.floor, causes bugs to timing?\n    this.$interval = Math.floor(1000 / this.fps);\n    this.running = false;\n    this.rootElement = element;\n\n    // Cached component trees (post-QmlWeb.convertToEngine)\n    this.components = {};\n\n    // Cached parsed JS files (post-QmlWeb.jsparse)\n    this.js = {};\n\n    // List of Component.completed signals\n    this.completedSignals = [];\n\n    // Current operation state of the engine (Idle, init, etc.)\n    this.operationState = 1;\n\n    // List of properties whose values are bindings. For internal use only.\n    this.bindedProperties = [];\n\n    // List of operations to perform later after init. For internal use only.\n    this.pendingOperations = [];\n\n    // Root object of the engine\n    this.rootObject = null;\n\n    // Base path of qml engine (used for resource loading)\n    this.$basePath = \"\";\n\n    // Module import paths overrides\n    this.userAddedModulePaths = {};\n\n    // Stores data for setImportPathList(), importPathList(), and addImportPath\n    this.userAddedImportPaths = [];\n\n    //----------Private Members---------\n\n    // Ticker resource id and ticker callbacks\n    this._tickers = [];\n    this._lastTick = Date.now();\n\n    // Callbacks for stopping or starting the engine\n    this._whenStop = [];\n    this._whenStart = [];\n\n    // Keyboard management\n    this.$initKeyboard();\n\n    //----------Construct----------\n\n    // TODO: Move to module initialization\n    var QMLBaseObject = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"QtObject\");\n    var constructors = QmlWeb.constructors;\n    for (var i in constructors) {\n      if (constructors[i].getAttachedObject) {\n        QmlWeb.setupGetter(QMLBaseObject.prototype, i, constructors[i].getAttachedObject);\n      }\n    }\n  }\n\n  //---------- Public Methods ----------\n\n  // Start the engine\n\n\n  _createClass(QMLEngine, [{\n    key: \"start\",\n    value: function start() {\n      QmlWeb.engine = this;\n      var QMLOperationState = QmlWeb.QMLOperationState;\n      if (this.operationState !== QMLOperationState.Running) {\n        this.operationState = QMLOperationState.Running;\n        this._tickerId = setInterval(this._tick.bind(this), this.$interval);\n        this._whenStart.forEach(function (callback) {\n          return callback();\n        });\n      }\n    }\n\n    // Stop the engine\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var QMLOperationState = QmlWeb.QMLOperationState;\n      if (this.operationState === QMLOperationState.Running) {\n        clearInterval(this._tickerId);\n        this.operationState = QMLOperationState.Idle;\n        this._whenStop.forEach(function (callback) {\n          return callback();\n        });\n      }\n    }\n\n    // eslint-disable-next-line max-len\n    /** from http://docs.closure-library.googlecode.com/git/local_closure_goog_uri_uri.js.source.html\n     *\n     * Removes dot segments in given path component, as described in\n     * RFC 3986, section 5.2.4.\n     *\n     * @param {string} path A non-empty path component.\n     * @return {string} Path component with removed dot segments.\n     */\n\n  }, {\n    key: \"removeDotSegments\",\n    value: function removeDotSegments(path) {\n      // path.startsWith(\"/\") is not supported in some browsers\n      var leadingSlash = path && path[0] === \"/\";\n      var segments = path.split(\"/\");\n      var out = [];\n\n      for (var pos = 0; pos < segments.length;) {\n        var segment = segments[pos++];\n\n        if (segment === \".\") {\n          if (leadingSlash && pos === segments.length) {\n            out.push(\"\");\n          }\n        } else if (segment === \"..\") {\n          if (out.length > 1 || out.length === 1 && out[0] !== \"\") {\n            out.pop();\n          }\n          if (leadingSlash && pos === segments.length) {\n            out.push(\"\");\n          }\n        } else {\n          out.push(segment);\n          leadingSlash = true;\n        }\n      }\n\n      return out.join(\"/\");\n    }\n  }, {\n    key: \"extractBasePath\",\n    value: function extractBasePath(file) {\n      // work both in url (\"/\") and windows (\"\\\", from file://d:\\test\\) notation\n      var basePath = file.split(/[/\\\\]/);\n      basePath[basePath.length - 1] = \"\";\n      return basePath.join(\"/\");\n    }\n  }, {\n    key: \"extractFileName\",\n    value: function extractFileName(file) {\n      return file.split(/[/\\\\]/).pop();\n    }\n\n    // Load file, parse and construct (.qml or .qml.js)\n\n  }, {\n    key: \"loadFile\",\n    value: function loadFile(file) {\n      var parentComponent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      // Create an anchor element to get the absolute path from the DOM\n      if (!this.$basePathA) {\n        this.$basePathA = document.createElement(\"a\");\n      }\n      this.$basePathA.href = this.extractBasePath(file);\n      this.$basePath = this.$basePathA.href;\n      var fileName = this.extractFileName(file);\n      var tree = this.loadComponent(this.$resolvePath(fileName));\n      return this.loadQMLTree(tree, parentComponent, file);\n    }\n\n    // parse and construct qml\n    // file is not required; only for debug purposes\n    // This function is only used by the QmlWeb tests\n\n  }, {\n    key: \"loadQML\",\n    value: function loadQML(src) {\n      var parentComponent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n      return this.loadQMLTree(QmlWeb.parseQML(src, file), parentComponent, file);\n    }\n  }, {\n    key: \"loadQMLTree\",\n    value: function loadQMLTree(tree) {\n      var parentComponent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n      QmlWeb.engine = this;\n\n      // Create and initialize objects\n      var QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n      var component = new QMLComponent({\n        object: tree,\n        parent: parentComponent\n      });\n\n      this.loadImports(tree.$imports, undefined, component.importContextId);\n      component.$basePath = this.$basePath;\n      component.$imports = tree.$imports; // for later use\n      component.$file = file; // just for debugging\n\n      this.rootObject = component.$createObject(parentComponent);\n      component.finalizeImports(this.rootContext());\n      this.$initializePropertyBindings();\n\n      this.start();\n\n      this.callCompletedSignals();\n\n      return component;\n    }\n  }, {\n    key: \"rootContext\",\n    value: function rootContext() {\n      return this.rootObject.$context;\n    }\n\n    // next 3 methods used in Qt.createComponent for qml files lookup\n    // http://doc.qt.io/qt-5/qqmlengine.html#addImportPath\n\n  }, {\n    key: \"addImportPath\",\n    value: function addImportPath(dirpath) {\n      this.userAddedImportPaths.push(dirpath);\n    }\n\n    /* Add this dirpath to be checked for components. This is the result of\n     * something like:\n     *\n     * import \"SomeDir/AnotherDirectory\"\n     *\n     * The importContextId ensures it is only accessible from the file in which\n     * it was imported. */\n\n  }, {\n    key: \"addComponentImportPath\",\n    value: function addComponentImportPath(importContextId, dirpath, qualifier) {\n      if (!this.componentImportPaths) {\n        this.componentImportPaths = {};\n      }\n      if (!this.componentImportPaths[importContextId]) {\n        this.componentImportPaths[importContextId] = {};\n      }\n\n      var paths = this.componentImportPaths[importContextId];\n\n      if (qualifier) {\n        if (!paths.qualified) {\n          paths.qualified = {};\n        }\n        paths.qualified[qualifier] = dirpath;\n      } else {\n        if (!paths.unqualified) {\n          paths.unqualified = [];\n        }\n        paths.unqualified.push(dirpath);\n      }\n    }\n  }, {\n    key: \"importSearchPaths\",\n    value: function importSearchPaths(importContextId) {\n      if (!this.componentImportPaths) {\n        return [];\n      }\n      var paths = this.componentImportPaths[importContextId];\n      if (!paths) {\n        return [];\n      }\n      return paths.unqualified || [];\n    }\n  }, {\n    key: \"qualifiedImportPath\",\n    value: function qualifiedImportPath(importContextId, qualifier) {\n      if (!this.componentImportPaths) {\n        return \"\";\n      }\n      var paths = this.componentImportPaths[importContextId];\n      if (!paths || !paths.qualified) {\n        return \"\";\n      }\n      return paths.qualified[qualifier] || \"\";\n    }\n  }, {\n    key: \"setImportPathList\",\n    value: function setImportPathList(arrayOfDirs) {\n      this.userAddedImportPaths = arrayOfDirs;\n    }\n  }, {\n    key: \"importPathList\",\n    value: function importPathList() {\n      return this.userAddedImportPaths;\n    }\n\n    // `addModulePath` defines conrete path for module lookup\n    // e.g. addModulePath(\"QtQuick.Controls\", \"http://example.com/controls\")\n    // will force system to `import QtQuick.Controls` module from\n    // `http://example.com/controls/qmldir`\n\n  }, {\n    key: \"addModulePath\",\n    value: function addModulePath(moduleName, dirPath) {\n      // Keep the mapping. It will be used in loadImports() function.\n      // Remove trailing slash as it required for `readQmlDir`.\n      this.userAddedModulePaths[moduleName] = dirPath.replace(/\\/$/, \"\");\n    }\n  }, {\n    key: \"registerProperty\",\n    value: function registerProperty(obj, propName) {\n      var dependantProperties = [];\n      var value = obj[propName];\n\n      var getter = function getter() {\n        var QMLProperty = QmlWeb.QMLProperty;\n        if (QMLProperty.evaluatingProperty && dependantProperties.indexOf(QMLProperty.evaluatingProperty) === -1) {\n          dependantProperties.push(QMLProperty.evaluatingProperty);\n        }\n        return value;\n      };\n\n      var setter = function setter(newVal) {\n        value = newVal;\n        for (var i in dependantProperties) {\n          dependantProperties[i].update();\n        }\n      };\n\n      QmlWeb.setupGetterSetter(obj, propName, getter, setter);\n    }\n  }, {\n    key: \"loadImports\",\n    value: function loadImports(importsArray) {\n      var currentFileDir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$basePath;\n      var importContextId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n\n      if (!this.qmldirsContents) {\n        this.qmldirsContents = {}; // cache\n\n        // putting initial keys in qmldirsContents - is a hack. We should find a\n        // way to explain to qmlweb, is this built-in module or qmldir-style\n        // module.\n        for (var module in QmlWeb.modules) {\n          if (module !== \"Main\") {\n            this.qmldirsContents[module] = {};\n          }\n        }\n      }\n\n      if (!this.qmldirs) {\n        this.qmldirs = {}; // resulting components lookup table\n      }\n\n      if (!importsArray || importsArray.length === 0) {\n        return;\n      }\n\n      for (var i = 0; i < importsArray.length; i++) {\n        this.loadImport(importsArray[i], currentFileDir, importContextId);\n      }\n    }\n  }, {\n    key: \"loadImport\",\n    value: function loadImport(entry, currentFileDir, importContextId) {\n      var name = entry[1];\n\n      // is it url to remote resource\n      var nameIsUrl = name.indexOf(\"//\") === 0 || name.indexOf(\"://\") >= 0;\n      // is it a module name, e.g. QtQuick, QtQuick.Controls, etc\n      var nameIsQualifiedModuleName = entry[4];\n      // local [relative] dir\n      var nameIsDir = !nameIsQualifiedModuleName && !nameIsUrl;\n\n      if (nameIsDir) {\n        name = this.$resolvePath(name, currentFileDir);\n        if (name[name.length - 1] === \"/\") {\n          // remove trailing slash as it required for `readQmlDir`\n          name = name.substr(0, name.length - 1);\n        }\n      }\n\n      var content = this.qmldirsContents[name];\n      // check if we have already loaded that qmldir file\n      if (!content) {\n        if (nameIsQualifiedModuleName && this.userAddedModulePaths[name]) {\n          // 1. we have qualified module and user had configured path for that\n          // module with this.addModulePath\n          content = QmlWeb.readQmlDir(this.userAddedModulePaths[name]);\n        } else if (nameIsUrl || nameIsDir) {\n          // 2. direct load\n          // nameIsUrl => url do not need dirs\n          // nameIsDir => already computed full path above\n          content = QmlWeb.readQmlDir(name);\n        } else {\n          // 3. qt-style lookup for qualified module\n          var probableDirs = [currentFileDir].concat(this.importPathList());\n          var diredName = name.replace(/\\./g, \"/\");\n\n          for (var k = 0; k < probableDirs.length; k++) {\n            var file = probableDirs[k] + diredName;\n            content = QmlWeb.readQmlDir(file);\n            if (content) {\n              break;\n            }\n          }\n        }\n        this.qmldirsContents[name] = content;\n      }\n\n      /* If there is no qmldir, add these directories to the list of places to\n        * search for components (within this import scope). \"noqmldir\" is\n        * inserted into the qmldir cache to avoid future attempts at fetching\n        * the qmldir file, but we always need to the call to\n        * \"addComponentImportPath\" for these sorts of directories. */\n      if (!content || content === \"noqmldir\") {\n        if (nameIsDir) {\n          if (entry[3]) {\n            /* Use entry[1] directly, as we don't want to include the\n              * basePath, otherwise it gets prepended twice in\n              * createComponent. */\n            this.addComponentImportPath(importContextId, entry[1] + \"/\", entry[3]);\n          } else {\n            this.addComponentImportPath(importContextId, name + \"/\");\n          }\n        }\n\n        this.qmldirsContents[name] = \"noqmldir\";\n        return;\n      }\n\n      // copy founded externals to global var\n      // TODO actually we have to copy it to current component\n      for (var attrname in content.externals) {\n        this.qmldirs[attrname] = content.externals[attrname];\n      }\n\n      // keep already loaded qmldir files\n      this.qmldirsContents[name] = content;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return {\n        width: this.rootObject.getWidth(),\n        height: this.rootObject.getHeight()\n      };\n    }\n  }, {\n    key: \"focusedElement\",\n    value: function focusedElement() {\n      return this.rootContext().activeFocus;\n    }\n\n    //---------- Private Methods ----------\n\n  }, {\n    key: \"$initKeyboard\",\n    value: function $initKeyboard() {\n      var _this3 = this;\n\n      document.onkeypress = function (e) {\n        var focusedElement = _this3.focusedElement();\n        var event = QmlWeb.eventToKeyboard(e || window.event);\n        var eventName = QmlWeb.keyboardSignals[event.key];\n\n        while (focusedElement && !event.accepted) {\n          var backup = focusedElement.$context.event;\n          focusedElement.$context.event = event;\n          focusedElement.Keys.pressed(event);\n          if (eventName) {\n            focusedElement.Keys[eventName](event);\n          }\n          focusedElement.$context.event = backup;\n          if (event.accepted) {\n            e.preventDefault();\n          } else {\n            focusedElement = focusedElement.$parent;\n          }\n        }\n      };\n\n      document.onkeyup = function (e) {\n        var focusedElement = _this3.focusedElement();\n        var event = QmlWeb.eventToKeyboard(e || window.event);\n\n        while (focusedElement && !event.accepted) {\n          var backup = focusedElement.$context.event;\n          focusedElement.$context.event = event;\n          focusedElement.Keys.released(event);\n          focusedElement.$context.event = backup;\n          if (event.accepted) {\n            e.preventDefault();\n          } else {\n            focusedElement = focusedElement.$parent;\n          }\n        }\n      };\n    }\n  }, {\n    key: \"_tick\",\n    value: function _tick() {\n      var now = Date.now();\n      var elapsed = now - this._lastTick;\n      this._lastTick = now;\n      this._tickers.forEach(function (ticker) {\n        return ticker(now, elapsed);\n      });\n    }\n\n    // Load resolved file, parse and construct as Component (.qml)\n\n  }, {\n    key: \"loadComponent\",\n    value: function loadComponent(file) {\n      if (file in this.components) {\n        return this.components[file];\n      }\n\n      var uri = this.$parseURI(file);\n      if (!uri) {\n        return undefined;\n      }\n\n      var tree = void 0;\n      if (uri.scheme === \"qrc://\") {\n        tree = QmlWeb.qrc[uri.path];\n        if (!tree) {\n          return undefined;\n        }\n        // QmlWeb.qrc contains pre-parsed Component objects, but they still need\n        // convertToEngine called on them.\n        tree = QmlWeb.convertToEngine(tree);\n      } else {\n        var src = QmlWeb.getUrlContents(file, true);\n        if (!src) {\n          console.error(\"QMLEngine.loadComponent: Failed to load:\", file);\n          return undefined;\n        }\n\n        console.log(\"QMLEngine.loadComponent: Loading file:\", file);\n        tree = QmlWeb.parseQML(src, file);\n      }\n\n      if (!tree) {\n        return undefined;\n      }\n\n      if (tree.$children.length !== 1) {\n        console.error(\"QMLEngine.loadComponent: Failed to load:\", file, \": A QML component must only contain one root element!\");\n        return undefined;\n      }\n\n      tree.$file = file;\n      this.components[file] = tree;\n      return tree;\n    }\n\n    // Load resolved file and parse as JavaScript\n\n  }, {\n    key: \"loadJS\",\n    value: function loadJS(file) {\n      if (file in this.js) {\n        return this.js[file];\n      }\n\n      var uri = this.$parseURI(file);\n      if (!uri) {\n        return undefined;\n      }\n\n      if (uri.scheme === \"qrc://\") {\n        return QmlWeb.qrc[uri.path];\n      }\n\n      QmlWeb.loadParser();\n      return QmlWeb.jsparse(QmlWeb.getUrlContents(file));\n    }\n  }, {\n    key: \"$registerStart\",\n    value: function $registerStart(f) {\n      this._whenStart.push(f);\n    }\n  }, {\n    key: \"$registerStop\",\n    value: function $registerStop(f) {\n      this._whenStop.push(f);\n    }\n  }, {\n    key: \"$addTicker\",\n    value: function $addTicker(t) {\n      this._tickers.push(t);\n    }\n  }, {\n    key: \"$removeTicker\",\n    value: function $removeTicker(t) {\n      var index = this._tickers.indexOf(t);\n      if (index !== -1) {\n        this._tickers.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"$initializePropertyBindings\",\n    value: function $initializePropertyBindings() {\n      // Initialize property bindings\n      // we use `while`, because $initializePropertyBindings may be called\n      // recursive (because of Loader and/or createQmlObject )\n      while (this.bindedProperties.length > 0) {\n        var property = this.bindedProperties.shift();\n\n        if (!property.binding) {\n          // Probably, the binding was overwritten by an explicit value. Ignore.\n          continue;\n        }\n\n        if (property.needsUpdate) {\n          property.update();\n        } else if (geometryProperties.indexOf(property.name) >= 0) {\n          // It is possible that bindings with these names was already evaluated\n          // during eval of other bindings but in that case $updateHGeometry and\n          // $updateVGeometry could be blocked during their eval.\n          // So we call them explicitly, just in case.\n          var obj = property.obj,\n              changed = property.changed;\n\n          if (obj.$updateHGeometry && changed.isConnected(obj, obj.$updateHGeometry)) {\n            obj.$updateHGeometry(property.val, property.val, property.name);\n          }\n          if (obj.$updateVGeometry && changed.isConnected(obj, obj.$updateVGeometry)) {\n            obj.$updateVGeometry(property.val, property.val, property.name);\n          }\n        }\n      }\n\n      this.$initializeAliasSignals();\n    }\n\n    // This parses the full URL into scheme, authority and path\n\n  }, {\n    key: \"$parseURI\",\n    value: function $parseURI(uri) {\n      var match = uri.match(/^([^/]*?:\\/\\/)(.*?)(\\/.*)$/);\n      if (match) {\n        return {\n          scheme: match[1],\n          authority: match[2],\n          path: match[3]\n        };\n      }\n      return undefined;\n    }\n\n    // Return a path to load the file\n\n  }, {\n    key: \"$resolvePath\",\n    value: function $resolvePath(file) {\n      var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$basePath;\n\n      // probably, replace :// with :/ ?\n      if (!file || file.indexOf(\"://\") !== -1 || file.indexOf(\"data:\") === 0 || file.indexOf(\"blob:\") === 0) {\n        return file;\n      }\n\n      var basePathURI = this.$parseURI(basePath);\n      if (!basePathURI) {\n        return file;\n      }\n\n      var path = basePathURI.path;\n      if (file.indexOf(\"/\") === 0) {\n        path = file;\n      } else {\n        path = \"\" + path + file;\n      }\n\n      // Remove duplicate slashes and dot segments in the path\n      path = this.removeDotSegments(path.replace(/([^:]\\/)\\/+/g, \"$1\"));\n\n      return \"\" + basePathURI.scheme + basePathURI.authority + path;\n    }\n\n    // Return a DOM-valid path to load the image (fileURL is an already-resolved\n    // URL)\n\n  }, {\n    key: \"$resolveImageURL\",\n    value: function $resolveImageURL(fileURL) {\n      var uri = this.$parseURI(fileURL);\n      // If we are within the resource system, look up a \"real\" path that can be\n      // used by the DOM. If not found, return the path itself without the\n      // \"qrc://\" scheme.\n      if (uri && uri.scheme === \"qrc://\") {\n        return QmlWeb.qrc[uri.path] || uri.path;\n      }\n\n      // Something we can't parse, just pass it through\n      return fileURL;\n    }\n  }, {\n    key: \"$initializeAliasSignals\",\n    value: function $initializeAliasSignals() {\n      // Perform pending operations. Now we use it only to init alias's \"changed\"\n      // handlers, that's why we have such strange function name.\n      while (this.pendingOperations.length > 0) {\n        var op = this.pendingOperations.shift();\n        op[0](op[1], op[2], op[3]);\n      }\n      this.pendingOperations = [];\n    }\n  }, {\n    key: \"callCompletedSignals\",\n    value: function callCompletedSignals() {\n      // the while loop is better than for..in loop, because completedSignals\n      // array might change dynamically when some completed signal handlers will\n      // create objects dynamically via createQmlObject or Loader\n      while (this.completedSignals.length > 0) {\n        var handler = this.completedSignals.shift();\n        handler();\n      }\n    }\n  }]);\n\n  return QMLEngine;\n}();\n\nQmlWeb.QMLEngine = QMLEngine;\n\nfunction QMLInteger(val) {\n  return val | 0;\n}\nQMLInteger.plainType = true;\nQmlWeb.qmlInteger = QMLInteger;\n\nfunction QMLList(meta) {\n  var list = [];\n  if (meta.object instanceof Array) {\n    for (var i in meta.object) {\n      list.push(QmlWeb.construct({\n        object: meta.object[i],\n        parent: meta.parent,\n        context: meta.context\n      }));\n    }\n  } else if (meta.object instanceof QmlWeb.QMLMetaElement) {\n    list.push(QmlWeb.construct({\n      object: meta.object,\n      parent: meta.parent,\n      context: meta.context\n    }));\n  }\n\n  return list;\n}\nQMLList.plainType = true;\nQmlWeb.qmlList = QMLList;\n\nfunction QMLNumber(val) {\n  return +val;\n}\nQMLNumber.plainType = true;\nQmlWeb.qmlNumber = QMLNumber;\n\nvar QMLOperationState = {\n  Idle: 1,\n  Init: 2,\n  Running: 3\n};\n\nQmlWeb.QMLOperationState = QMLOperationState;\n\nvar QMLProperty = function () {\n  function QMLProperty(type, obj, name) {\n    _classCallCheck(this, QMLProperty);\n\n    this.obj = obj;\n    this.name = name;\n    this.changed = QmlWeb.Signal.signal([], { obj: obj });\n    this.binding = null;\n    this.objectScope = null;\n    this.componentScope = null;\n    this.value = undefined;\n    this.type = type;\n    this.animation = null;\n    this.needsUpdate = true;\n\n    // This list contains all signals that hold references to this object.\n    // It is needed when deleting, as we need to tidy up all references to this\n    // object.\n    this.$tidyupList = [];\n  }\n\n  // Called by update and set to actually set this.val, performing any type\n  // conversion required.\n\n\n  _createClass(QMLProperty, [{\n    key: \"$setVal\",\n    value: function $setVal(val, componentScope) {\n      var constructors = QmlWeb.constructors;\n      if (constructors[this.type] === QmlWeb.qmlList) {\n        this.val = QmlWeb.qmlList({\n          object: val,\n          parent: this.obj,\n          context: componentScope\n        });\n      } else if (val instanceof QmlWeb.QMLMetaElement) {\n        var _QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n        if (constructors[val.$class] === _QMLComponent || constructors[this.type] === _QMLComponent) {\n          this.val = new _QMLComponent({\n            object: val,\n            parent: this.obj,\n            context: componentScope\n          });\n          /* $basePath must be set here so that Components that are assigned to\n           * properties (e.g. Repeater delegates) can properly resolve child\n           * Components that live in the same directory in\n           * Component.createObject. */\n          this.val.$basePath = componentScope.$basePath;\n        } else {\n          this.val = QmlWeb.construct({\n            object: val,\n            parent: this.obj,\n            context: componentScope\n          });\n        }\n      } else if (val instanceof Object || val === undefined || val === null) {\n        this.val = val;\n      } else if (constructors[this.type].plainType) {\n        this.val = constructors[this.type](val);\n      } else {\n        this.val = new constructors[this.type](val);\n      }\n    }\n\n    // Updater recalculates the value of a property if one of the dependencies\n    // changed\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.needsUpdate = false;\n\n      if (!this.binding) {\n        return;\n      }\n\n      var oldVal = this.val;\n\n      try {\n        QMLProperty.pushEvaluatingProperty(this);\n        if (!this.binding.compiled) {\n          this.binding.compile();\n        }\n        this.$setVal(this.binding.eval(this.objectScope, this.componentScope, this.componentScopeBasePath), this.componentScope);\n      } catch (e) {\n        console.log(\"QMLProperty.update binding error:\", e, Function.prototype.toString.call(this.binding.eval));\n      } finally {\n        QMLProperty.popEvaluatingProperty();\n      }\n\n      if (this.animation) {\n        this.animation.$actions = [{\n          target: this.animation.target || this.obj,\n          property: this.animation.property || this.name,\n          from: this.animation.from || oldVal,\n          to: this.animation.to || this.val\n        }];\n        this.animation.restart();\n      }\n\n      if (this.val !== oldVal) {\n        this.changed(this.val, oldVal, this.name);\n      }\n    }\n\n    // Define getter\n\n  }, {\n    key: \"get\",\n    value: function get() {\n      //if (this.needsUpdate && !QMLProperty.evaluatingPropertyPaused) {\n      if (this.needsUpdate && QmlWeb.engine.operationState !== QmlWeb.QMLOperationState.Init) {\n        this.update();\n      }\n\n      // If this call to the getter is due to a property that is dependant on this\n      // one, we need it to take track of changes\n      if (QMLProperty.evaluatingProperty) {\n        //console.log(this,QMLProperty.evaluatingPropertyStack.slice(0),this.val);\n        this.changed.connect(QMLProperty.evaluatingProperty, QMLProperty.prototype.update, QmlWeb.Signal.UniqueConnection);\n      }\n\n      if (this.val && this.val.$get) {\n        return this.val.$get();\n      }\n\n      return this.val;\n    }\n    // Define setter\n\n  }, {\n    key: \"set\",\n    value: function set(newVal, reason, objectScope, componentScope) {\n      var oldVal = this.val;\n\n      var val = newVal;\n      if (val instanceof QmlWeb.QMLBinding) {\n        if (!objectScope || !componentScope) {\n          throw new Error(\"Internal error: binding assigned without scope\");\n        }\n        this.binding = val;\n        this.objectScope = objectScope;\n        this.componentScope = componentScope;\n        this.componentScopeBasePath = componentScope.$basePath;\n\n        if (QmlWeb.engine.operationState !== QmlWeb.QMLOperationState.Init) {\n          if (!val.compiled) {\n            val.compile();\n          }\n          try {\n            QMLProperty.pushEvaluatingProperty(this);\n            this.needsUpdate = false;\n            val = this.binding.eval(objectScope, componentScope, this.componentScopeBasePath);\n          } finally {\n            QMLProperty.popEvaluatingProperty();\n          }\n        } else {\n          QmlWeb.engine.bindedProperties.push(this);\n          return;\n        }\n      } else {\n        if (reason !== QMLProperty.ReasonAnimation) {\n          this.binding = null;\n        }\n        if (val instanceof Array) {\n          val = val.slice(); // Copies the array\n        }\n      }\n\n      if (reason === QMLProperty.ReasonInit && typeof val === \"undefined\") {\n        if (QMLProperty.typeInitialValues.hasOwnProperty(this.type)) {\n          val = QMLProperty.typeInitialValues[this.type];\n        }\n      }\n\n      this.$setVal(val, componentScope);\n\n      if (this.val !== oldVal) {\n        if (this.animation && reason === QMLProperty.ReasonUser) {\n          this.animation.running = false;\n          this.animation.$actions = [{\n            target: this.animation.target || this.obj,\n            property: this.animation.property || this.name,\n            from: this.animation.from || oldVal,\n            to: this.animation.to || this.val\n          }];\n          this.animation.running = true;\n        }\n        if (this.obj.$syncPropertyToRemote instanceof Function && reason === QMLProperty.ReasonUser) {\n          // is a remote object from e.g. a QWebChannel\n          this.obj.$syncPropertyToRemote(this.name, val);\n        } else {\n          this.changed(this.val, oldVal, this.name);\n        }\n      }\n    }\n  }], [{\n    key: \"pushEvalStack\",\n    value: function pushEvalStack() {\n      QMLProperty.evaluatingPropertyStackOfStacks.push(QMLProperty.evaluatingPropertyStack);\n      QMLProperty.evaluatingPropertyStack = [];\n      QMLProperty.evaluatingProperty = undefined;\n      //  console.log(\"evaluatingProperty=>undefined due to push stck \");\n    }\n  }, {\n    key: \"popEvalStack\",\n    value: function popEvalStack() {\n      QMLProperty.evaluatingPropertyStack = QMLProperty.evaluatingPropertyStackOfStacks.pop() || [];\n      QMLProperty.evaluatingProperty = QMLProperty.evaluatingPropertyStack[QMLProperty.evaluatingPropertyStack.length - 1];\n    }\n  }, {\n    key: \"pushEvaluatingProperty\",\n    value: function pushEvaluatingProperty(prop) {\n      // TODO say warnings if already on stack. This means binding loop.\n      // BTW actually we do not loop because needsUpdate flag is reset before\n      // entering update again.\n      if (QMLProperty.evaluatingPropertyStack.indexOf(prop) >= 0) {\n        console.error(\"Property binding loop detected for property\", prop.name, [prop].slice(0));\n      }\n      QMLProperty.evaluatingProperty = prop;\n      QMLProperty.evaluatingPropertyStack.push(prop); //keep stack of props\n    }\n  }, {\n    key: \"popEvaluatingProperty\",\n    value: function popEvaluatingProperty() {\n      QMLProperty.evaluatingPropertyStack.pop();\n      QMLProperty.evaluatingProperty = QMLProperty.evaluatingPropertyStack[QMLProperty.evaluatingPropertyStack.length - 1];\n    }\n  }]);\n\n  return QMLProperty;\n}();\n\n// Property that is currently beeing evaluated. Used to get the information\n// which property called the getter of a certain other property for\n// evaluation and is thus dependant on it.\n\n\nQMLProperty.evaluatingProperty = undefined;\nQMLProperty.evaluatingPropertyPaused = false;\nQMLProperty.evaluatingPropertyStack = [];\nQMLProperty.evaluatingPropertyStackOfStacks = [];\n\nQMLProperty.typeInitialValues = {\n  int: 0,\n  real: 0,\n  double: 0,\n  string: \"\",\n  bool: false,\n  list: [],\n  enum: 0,\n  url: \"\"\n};\n\nQMLProperty.ReasonUser = 0;\nQMLProperty.ReasonInit = 1;\nQMLProperty.ReasonAnimation = 2;\n\nQmlWeb.QMLProperty = QMLProperty;\n\nfunction QMLString(val) {\n  return \"\" + val;\n}\nQMLString.plainType = true;\nQmlWeb.qmlString = QMLString;\n\nfunction QMLUrl(val) {\n  return QmlWeb.engine.$resolvePath(\"\" + val);\n}\nQMLUrl.plainType = true;\nQmlWeb.qmlUrl = QMLUrl;\n\nfunction QMLVariant(val) {\n  return val;\n}\nQMLVariant.plainType = true;\nQmlWeb.qmlVariant = QMLVariant;\n\nwindow.addEventListener(\"load\", function () {\n  var metaTags = document.getElementsByTagName(\"body\");\n  for (var i = 0; i < metaTags.length; ++i) {\n    var metaTag = metaTags[i];\n    var source = metaTag.getAttribute(\"data-qml\");\n    if (source) {\n      QmlWeb.qmlEngine = new QmlWeb.QMLEngine();\n      QmlWeb.qmlEngine.loadFile(source);\n      QmlWeb.qmlEngine.start();\n      break;\n    }\n  }\n});\n\nvar Easing = {\n  Linear: 1,\n  InQuad: 2, OutQuad: 3, InOutQuad: 4, OutInQuad: 5,\n  InCubic: 6, OutCubic: 7, InOutCubic: 8, OutInCubic: 9,\n  InQuart: 10, OutQuart: 11, InOutQuart: 12, OutInQuart: 13,\n  InQuint: 14, OutQuint: 15, InOutQuint: 16, OutInQuint: 17,\n  InSine: 18, OutSine: 19, InOutSine: 20, OutInSine: 21,\n  InExpo: 22, OutExpo: 23, InOutExpo: 24, OutInExpo: 25,\n  InCirc: 26, OutCirc: 27, InOutCirc: 28, OutInCirc: 29,\n  InElastic: 30, OutElastic: 31, InOutElastic: 32, OutInElastic: 33,\n  InBack: 34, OutBack: 35, InOutBack: 36, OutInBack: 37,\n  InBounce: 38, OutBounce: 39, InOutBounce: 40, OutInBounce: 41\n};\n\n// eslint-disable-next-line complexity\nQmlWeb.$ease = function (type, period, amplitude, overshoot, t) {\n  switch (type) {\n    // Linear\n    case Easing.Linear:\n      return t;\n\n    // Quad\n    case Easing.InQuad:\n      return Math.pow(t, 2);\n    case Easing.OutQuad:\n      return -Math.pow(t - 1, 2) + 1;\n    case Easing.InOutQuad:\n      if (t < 0.5) {\n        return 2 * Math.pow(t, 2);\n      }\n      return -2 * Math.pow(t - 1, 2) + 1;\n    case Easing.OutInQuad:\n      if (t < 0.5) {\n        return -2 * Math.pow(t - 0.5, 2) + 0.5;\n      }\n      return 2 * Math.pow(t - 0.5, 2) + 0.5;\n\n    // Cubic\n    case Easing.InCubic:\n      return Math.pow(t, 3);\n    case Easing.OutCubic:\n      return Math.pow(t - 1, 3) + 1;\n    case Easing.InOutCubic:\n      if (t < 0.5) {\n        return 4 * Math.pow(t, 3);\n      }\n      return 4 * Math.pow(t - 1, 3) + 1;\n    case Easing.OutInCubic:\n      return 4 * Math.pow(t - 0.5, 3) + 0.5;\n\n    // Quart\n    case Easing.InQuart:\n      return Math.pow(t, 4);\n    case Easing.OutQuart:\n      return -Math.pow(t - 1, 4) + 1;\n    case Easing.InOutQuart:\n      if (t < 0.5) {\n        return 8 * Math.pow(t, 4);\n      }\n      return -8 * Math.pow(t - 1, 4) + 1;\n    case Easing.OutInQuart:\n      if (t < 0.5) {\n        return -8 * Math.pow(t - 0.5, 4) + 0.5;\n      }\n      return 8 * Math.pow(t - 0.5, 4) + 0.5;\n\n    // Quint\n    case Easing.InQuint:\n      return Math.pow(t, 5);\n    case Easing.OutQuint:\n      return Math.pow(t - 1, 5) + 1;\n    case Easing.InOutQuint:\n      if (t < 0.5) {\n        return 16 * Math.pow(t, 5);\n      }\n      return 16 * Math.pow(t - 1, 5) + 1;\n    case Easing.OutInQuint:\n      if (t < 0.5) {\n        return 16 * Math.pow(t - 0.5, 5) + 0.5;\n      }\n      return 16 * Math.pow(t - 0.5, 5) + 0.5;\n\n    // Sine\n    case Easing.InSine:\n      return -Math.cos(0.5 * Math.PI * t) + 1;\n    case Easing.OutSine:\n      return Math.sin(0.5 * Math.PI * t);\n    case Easing.InOutSine:\n      return -0.5 * Math.cos(Math.PI * t) + 0.5;\n    case Easing.OutInSine:\n      if (t < 0.5) {\n        return 0.5 * Math.sin(Math.PI * t);\n      }\n      return -0.5 * Math.sin(Math.PI * t) + 1;\n\n    // Expo\n    case Easing.InExpo:\n      return 1 / 1023 * (Math.pow(2, 10 * t) - 1);\n    case Easing.OutExpo:\n      return -1024 / 1023 * (Math.pow(2, -10 * t) - 1);\n    case Easing.InOutExpo:\n      if (t < 0.5) {\n        return 1 / 62 * (Math.pow(2, 10 * t) - 1);\n      }\n      return -512 / 31 * Math.pow(2, -10 * t) + 63 / 62;\n    case Easing.OutInExpo:\n      if (t < 0.5) {\n        return -16 / 31 * (Math.pow(2, -10 * t) - 1);\n      }\n      return 1 / 1984 * Math.pow(2, 10 * t) + 15 / 31;\n\n    // Circ\n    case Easing.InCirc:\n      return 1 - Math.sqrt(1 - t * t);\n    case Easing.OutCirc:\n      return Math.sqrt(1 - Math.pow(t - 1, 2));\n    case Easing.InOutCirc:\n      if (t < 0.5) {\n        return 0.5 * (1 - Math.sqrt(1 - 4 * t * t));\n      }\n      return 0.5 * (Math.sqrt(1 - 4 * Math.pow(t - 1, 2)) + 1);\n    case Easing.OutInCirc:\n      if (t < 0.5) {\n        return 0.5 * Math.sqrt(1 - Math.pow(2 * t - 1, 2));\n      }\n      return 0.5 * (2 - Math.sqrt(1 - Math.pow(2 * t - 1, 2)));\n\n    // Elastic\n    case Easing.InElastic:\n      return -amplitude * Math.pow(2, 10 * t - 10) * Math.sin(2 * t * Math.PI / period - Math.asin(1 / amplitude));\n    case Easing.OutElastic:\n      return amplitude * Math.pow(2, -10 * t) * Math.sin(2 * t * Math.PI / period - Math.asin(1 / amplitude)) + 1;\n    case Easing.InOutElastic:\n      if (t < 0.5) {\n        return -0.5 * amplitude * Math.pow(2, 20 * t - 10) * Math.sin(4 * t * Math.PI / period - Math.asin(1 / amplitude));\n      }\n      return -0.5 * amplitude * Math.pow(2, -20 * t + 10) * Math.sin(4 * t * Math.PI / period + Math.asin(1 / amplitude)) + 1;\n    case Easing.OutInElastic:\n      if (t < 0.5) {\n        return 0.5 * amplitude * Math.pow(2, -20 * t) * Math.sin(4 * t * Math.PI / period - Math.asin(1 / amplitude)) + 0.5;\n      }\n      return -0.5 * amplitude * Math.pow(2, 20 * t - 20) * Math.sin(4 * t * Math.PI / period - Math.asin(1 / amplitude)) + 0.5;\n\n    // Back\n    case Easing.InBack:\n      return (overshoot + 1) * Math.pow(t, 3) - overshoot * Math.pow(t, 2);\n    case Easing.OutBack:\n      return (overshoot + 1) * Math.pow(t - 1, 3) + overshoot * Math.pow(t - 1, 2) + 1;\n    case Easing.InOutBack:\n      if (t < 0.5) {\n        return 4 * (overshoot + 1) * Math.pow(t, 3) - 2 * overshoot * Math.pow(t, 2);\n      }\n      return 0.5 * (overshoot + 1) * Math.pow(2 * t - 2, 3) + overshoot / 2 * Math.pow(2 * t - 2, 2) + 1;\n    case Easing.OutInBack:\n      if (t < 0.5) {\n        return 0.5 * ((overshoot + 1) * Math.pow(2 * t - 1, 3) + overshoot * Math.pow(2 * t - 1, 2) + 1);\n      }\n      return 4 * (overshoot + 1) * Math.pow(t - 0.5, 3) - 2 * overshoot * Math.pow(t - 0.5, 2) + 0.5;\n    // Bounce\n    case Easing.InBounce:\n      if (t < 1 / 11) {\n        return -amplitude * 121 / 16 * (t * t - 1 / 11 * t);\n      } else if (t < 3 / 11) {\n        return -amplitude * 121 / 16 * (t * t - 4 / 11 * t + 3 / 121);\n      } else if (t < 7 / 11) {\n        return -amplitude * 121 / 16 * (t * t - 10 / 11 * t + 21 / 121);\n      }\n      return -(121 / 16) * (t * t - 2 * t + 1) + 1;\n    case Easing.OutBounce:\n      if (t < 4 / 11) {\n        return 121 / 16 * t * t;\n      } else if (t < 8 / 11) {\n        return amplitude * (121 / 16) * (t * t - 12 / 11 * t + 32 / 121) + 1;\n      } else if (t < 10 / 11) {\n        return amplitude * (121 / 16) * (t * t - 18 / 11 * t + 80 / 121) + 1;\n      }\n      return amplitude * (121 / 16) * (t * t - 21 / 11 * t + 10 / 11) + 1;\n    case Easing.InOutBounce:\n      if (t < 1 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 1 / 22 * t);\n      } else if (t < 3 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 2 / 11 * t + 3 / 484);\n      } else if (t < 7 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 5 / 11 * t + 21 / 484);\n      } else if (t < 11 / 22) {\n        return -121 / 8 * (t * t - t + 0.25) + 0.5;\n      } else if (t < 15 / 22) {\n        return 121 / 8 * (t * t - t) + 137 / 32;\n      } else if (t < 19 / 22) {\n        return amplitude * 121 / 8 * (t * t - 17 / 11 * t + 285 / 484) + 1;\n      } else if (t < 21 / 22) {\n        return amplitude * 121 / 8 * (t * t - 20 / 11 * t + 399 / 484) + 1;\n      }\n      return amplitude * 121 / 8 * (t * t - 43 / 22 * t + 21 / 22) + 1;\n    case Easing.OutInBounce:\n      if (t < 4 / 22) {\n        return 121 / 8 * t * t;\n      } else if (t < 8 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 6 / 11 * t + 8 / 121) + 0.5;\n      } else if (t < 10 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 9 / 11 * t + 20 / 121) + 0.5;\n      } else if (t < 11 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 21 / 22 * t + 5 / 22) + 0.5;\n      } else if (t < 12 / 22) {\n        return amplitude * 121 / 8 * (t * t - 23 / 22 * t + 3 / 11) + 0.5;\n      } else if (t < 14 / 22) {\n        return amplitude * 121 / 8 * (t * t - 13 / 11 * t + 42 / 121) + 0.5;\n      } else if (t < 18 / 22) {\n        return amplitude * 121 / 8 * (t * t - 16 / 11 * t + 63 / 121) + 0.5;\n      }\n      return -121 / 8 * (t * t - 2 * t + 117 / 121) + 0.5;\n\n    // Default\n    default:\n      console.error(\"Unsupported animation type: \", type);\n      return t;\n  }\n};\n\nQmlWeb.Easing = Easing;\n\n/* eslint accessor-pairs: 0 */\n\nfunction setupGetter(obj, propName, func) {\n  Object.defineProperty(obj, propName, {\n    get: func,\n    configurable: true,\n    enumerable: true\n  });\n}\n\nfunction setupSetter(obj, propName, func) {\n  Object.defineProperty(obj, propName, {\n    set: func,\n    configurable: true,\n    enumerable: false\n  });\n}\n\nfunction setupGetterSetter(obj, propName, getter, setter) {\n  Object.defineProperty(obj, propName, {\n    get: getter,\n    set: setter,\n    configurable: true,\n    enumerable: false\n  });\n}\n\nQmlWeb.setupGetter = setupGetter;\nQmlWeb.setupSetter = setupSetter;\nQmlWeb.setupGetterSetter = setupGetterSetter;\n\nvar QmlWebHelpers = function () {\n  function QmlWebHelpers() {\n    _classCallCheck(this, QmlWebHelpers);\n  }\n\n  _createClass(QmlWebHelpers, null, [{\n    key: \"arrayFindIndex\",\n    value: function arrayFindIndex(array, callback) {\n      // Note: does not support thisArg, we don't need that\n      if (!Array.prototype.findIndex) {\n        for (var key in array) {\n          if (callback(array[key], key, array)) {\n            return key;\n          }\n        }\n        return -1;\n      }\n      return Array.prototype.findIndex.call(array, callback);\n    }\n  }, {\n    key: \"mergeObjects\",\n    value: function mergeObjects() {\n      var merged = {};\n\n      for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      for (var i in args) {\n        var arg = args[i];\n        if (!arg) {\n          continue;\n        }\n        for (var key in arg) {\n          merged[key] = arg[key];\n        }\n      }\n      return merged;\n    }\n  }]);\n\n  return QmlWebHelpers;\n}();\n\nQmlWeb.helpers = QmlWebHelpers;\n\n/* @license\n\nMIT License\n\nCopyright (c) 2011 Lauri Paimen <lauri@paimen.info>\nCopyright (c) 2015 Pavel Vasev <pavel.vasev@gmail.com> - initial and working\n                                                         import implementation.\nCopyright (c) 2016 QmlWeb contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/**\n * Get URL contents.\n * @param url {String} Url to fetch.\n * @param skipExceptions {bool} when turned on, ignore exeptions and return\n *        false. This feature is used by readQmlDir.\n * @private\n * @return {mixed} String of contents or false in errors.\n */\nfunction getUrlContents(url, skipExceptions) {\n  if (typeof QmlWeb.urlContentCache[url] === \"undefined\") {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url, false);\n\n    if (skipExceptions) {\n      try {\n        xhr.send(null);\n      } catch (e) {\n        return false;\n      }\n      // it is OK to not have logging here, because DeveloperTools already will\n      // have red log record\n    } else {\n      xhr.send(null);\n    }\n\n    if (xhr.status !== 200 && xhr.status !== 0) {\n      // 0 if accessing with file://\n      console.log(\"Retrieving \" + url + \" failed: \" + xhr.responseText, xhr);\n      return false;\n    }\n    QmlWeb.urlContentCache[url] = xhr.responseText;\n  }\n  return QmlWeb.urlContentCache[url];\n}\nif (typeof QmlWeb.urlContentCache === \"undefined\") {\n  QmlWeb.urlContentCache = {};\n}\n\n/**\n * Read qmldir spec file at directory.\n * @param url Url of the directory\n * @return {Object} Object, where .internals lists qmldir internal references\n *                          and .externals lists qmldir external references.\n */\n\n/*  Note on how importing works.\n\nparseQML gives us `tree.$imports` variable, which contains information from\n`import` statements.\n\nAfter each call to parseQML, we call engine.loadImports(tree.$imports).\nIt in turn invokes readQmlDir() calls for each import, with respect to current\ncomponent base path and engine.importPathList().\n\nWe keep all component names from all qmldir files in global variable\n`engine.qmldir`.\n\nIn construct() function, we use `engine.qmldir` for component url lookup.\n\nReference import info: http://doc.qt.io/qt-5/qtqml-syntax-imports.html\nAlso please look at notes and TODO's in qtcore.js::loadImports() and\nqtcore.js::construct() methods.\n*/\n\nfunction readQmlDir(url) {\n  // in case 'url' is empty, do not attach \"/\"\n  // Q1: when this happen?\n  var qmldirFileUrl = url.length > 0 ? url + \"/qmldir\" : \"qmldir\";\n\n  var parsedUrl = QmlWeb.engine.$parseURI(qmldirFileUrl);\n\n  var qmldir = void 0;\n  if (parsedUrl.scheme === \"qrc://\") {\n    qmldir = QmlWeb.qrc[parsedUrl.path];\n  } else {\n    qmldir = getUrlContents(qmldirFileUrl, true) || undefined;\n  }\n\n  var internals = {};\n  var externals = {};\n\n  if (qmldir === undefined) {\n    return false;\n  }\n\n  // we have to check for \"://\"\n  // In that case, item path is meant to be absolute, and we have no need to\n  // prefix it with base url\n  function makeurl(path) {\n    if (path.indexOf(\"://\") > 0) {\n      return path;\n    }\n    return url + \"/\" + path;\n  }\n\n  var lines = qmldir.split(/\\r?\\n/);\n  for (var i = 0; i < lines.length; i++) {\n    // trim\n    var line = lines[i].replace(/^\\s+|\\s+$/g, \"\");\n    if (!line.length || line[0] === \"#\") {\n      // Empty line or comment\n      continue;\n    }\n    var match = line.split(/\\s+/);\n    if (match.length === 2 || match.length === 3) {\n      if (match[0] === \"plugin\") {\n        console.log(url + \": qmldir plugins are not supported!\");\n      } else if (match[0] === \"internal\") {\n        internals[match[1]] = { url: makeurl(match[2]) };\n      } else if (match.length === 2) {\n        externals[match[0]] = { url: makeurl(match[1]) };\n      } else {\n        externals[match[0]] = { url: makeurl(match[2]), version: match[1] };\n      }\n    } else {\n      console.log(url + \": unmatched: \" + line);\n    }\n  }\n  return { internals: internals, externals: externals };\n}\n\nQmlWeb.getUrlContents = getUrlContents;\nQmlWeb.readQmlDir = readQmlDir;\n\nfunction importJavascriptInContext(jsData, $context) {\n  /* Remove any \".pragma\" statements, as they are not valid JavaScript */\n  var source = jsData.source.replace(/\\.pragma.*(?:\\r\\n|\\r|\\n)/, \"\\n\");\n  // TODO: pass more objects to the scope?\n  new Function(\"jsData\", \"$context\", \"\\n    with(QmlWeb) with ($context) {\\n      \" + source + \"\\n    }\\n    \" + jsData.exports.map(function (sym) {\n    return \"$context.\" + sym + \" = \" + sym + \";\";\n  }).join(\"\") + \"\\n  \")(jsData, $context);\n}\n\nQmlWeb.importJavascriptInContext = importJavascriptInContext;\n\nQmlWeb.keyCodeToQt = function (e) {\n  var Qt = QmlWeb.Qt;\n  e.keypad = e.keyCode >= 96 && e.keyCode <= 111;\n  if (e.keyCode === Qt.Key_Tab && e.shiftKey) {\n    return Qt.Key_Backtab;\n  }\n  if (e.keyCode >= 97 && e.keyCode <= 122) {\n    return e.keyCode - (97 - Qt.Key_A);\n  }\n  return e.keyCode;\n};\n\nQmlWeb.eventToKeyboard = function (e) {\n  return {\n    accepted: false,\n    count: 1,\n    isAutoRepeat: false,\n    key: QmlWeb.keyCodeToQt(e),\n    modifiers: e.ctrlKey * QmlWeb.Qt.CtrlModifier | e.altKey * QmlWeb.Qt.AltModifier | e.shiftKey * QmlWeb.Qt.ShiftModifier | e.metaKey * QmlWeb.Qt.MetaModifier | e.keypad * QmlWeb.Qt.KeypadModifier,\n    text: String.fromCharCode(e.charCode)\n  };\n};\n\nQmlWeb.keyboardSignals = {};\n[\"asterisk\", \"back\", \"backtab\", \"call\", \"cancel\", \"delete\", \"escape\", \"flip\", 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \"hangup\", \"menu\", \"no\", \"return\", \"select\", \"space\", \"tab\", \"volumeDown\", \"volumeUp\", \"yes\", \"up\", \"right\", \"down\", \"left\"].forEach(function (key) {\n  var name = key.toString();\n  var qtName = \"Key_\" + name[0].toUpperCase() + name.slice(1);\n  var prefix = typeof key === \"number\" ? \"digit\" : \"\";\n  QmlWeb.keyboardSignals[QmlWeb.Qt[qtName]] = \"\" + prefix + name + \"Pressed\";\n});\n\nQmlWeb.executionContext = null;\n\nvar modules = {\n  Main: {\n    int: QmlWeb.qmlInteger,\n    real: QmlWeb.qmlNumber,\n    double: QmlWeb.qmlNumber,\n    string: QmlWeb.qmlString,\n    bool: QmlWeb.qmlBoolean,\n    list: QmlWeb.qmlList,\n    color: QmlWeb.QColor,\n    enum: QmlWeb.qmlNumber,\n    url: QmlWeb.qmlUrl,\n    variant: QmlWeb.qmlVariant,\n    var: QmlWeb.qmlVariant\n  }\n};\n\n// All object constructors\nQmlWeb.constructors = modules.Main;\n\nvar dependants = {};\n\nvar perImportContextConstructors = {};\nvar importContextIds = 0;\n\n// Helper. Adds a type to the constructor list\nfunction registerGlobalQmlType(name, type) {\n  QmlWeb[type.name] = type;\n  QmlWeb.constructors[name] = type;\n  modules.Main[name] = type;\n}\n\n// Helper. Register a type to a module\nfunction registerQmlType(options, constructor) {\n  if (constructor !== undefined) {\n    options.constructor = constructor;\n  }\n\n  if (typeof options.baseClass === \"string\") {\n    var _ret = function () {\n      // TODO: Does not support version specification (yet?)\n      var baseModule = void 0;\n      var baseName = void 0;\n      var dot = options.baseClass.lastIndexOf(\".\");\n      if (dot === -1) {\n        baseModule = options.module;\n        baseName = options.baseClass;\n      } else {\n        baseModule = options.baseClass.substring(0, dot);\n        baseName = options.baseClass.substring(dot + 1);\n      }\n      var found = (modules[baseModule] || []).filter(function (descr) {\n        return descr.name === baseName;\n      });\n      if (found.length > 0) {\n        // Ok, we found our base class\n        options.baseClass = found[0].constructor;\n      } else {\n        // Base class not found, delay the loading\n        var baseId = [baseModule, baseName].join(\".\");\n        if (!dependants.hasOwnProperty(baseId)) {\n          dependants[baseId] = [];\n        }\n        dependants[baseId].push(options);\n        return {\n          v: void 0\n        };\n      }\n    }();\n\n    if ((typeof _ret === \"undefined\" ? \"undefined\" : _typeof(_ret)) === \"object\") return _ret.v;\n  }\n\n  var descriptor = typeof options === \"function\" ? {\n    module: options.module,\n    name: options.element,\n    versions: options.versions,\n    baseClass: options.baseClass,\n    enums: options.enums,\n    signals: options.signals,\n    defaultProperty: options.defaultProperty,\n    properties: options.properties,\n    constructor: options\n  } : options;\n\n  descriptor.constructor.$qmlTypeInfo = {\n    enums: descriptor.enums,\n    signals: descriptor.signals,\n    defaultProperty: descriptor.defaultProperty,\n    properties: descriptor.properties\n  };\n\n  if (descriptor.global) {\n    registerGlobalQmlType(descriptor.name, descriptor.constructor);\n  }\n\n  var moduleDescriptor = {\n    name: descriptor.name,\n    versions: descriptor.versions,\n    constructor: descriptor.constructor\n  };\n\n  if (typeof modules[descriptor.module] === \"undefined\") {\n    modules[descriptor.module] = [];\n  }\n  modules[descriptor.module].push(moduleDescriptor);\n\n  if (typeof descriptor.baseClass !== \"undefined\") {\n    inherit(descriptor.constructor, descriptor.baseClass);\n  }\n\n  var id = [descriptor.module, descriptor.name].join(\".\");\n  if (dependants.hasOwnProperty(id)) {\n    dependants[id].forEach(function (opt) {\n      return registerQmlType(opt);\n    });\n    dependants[id].length = 0;\n  }\n}\n\nfunction getConstructor(moduleName, version, name) {\n  if (typeof modules[moduleName] !== \"undefined\") {\n    for (var i = 0; i < modules[moduleName].length; ++i) {\n      var type = modules[moduleName][i];\n      if (type.name === name && type.versions.test(version)) {\n        return type.constructor;\n      }\n    }\n  }\n  return null;\n}\n\nfunction getModuleConstructors(moduleName, version) {\n  var constructors = {};\n  if (typeof modules[moduleName] === \"undefined\") {\n    console.warn(\"module \\\"\" + moduleName + \"\\\" not found\");\n    return constructors;\n  }\n  for (var i = 0; i < modules[moduleName].length; ++i) {\n    var module = modules[moduleName][i];\n    if (module.versions.test(version)) {\n      constructors[module.name] = module.constructor;\n    }\n  }\n  return constructors;\n}\n\nfunction loadImports(self, imports) {\n  var mergeObjects = QmlWeb.helpers.mergeObjects;\n  var constructors = mergeObjects(modules.Main);\n  if (imports.filter(function (row) {\n    return row[1] === \"QtQml\";\n  }).length === 0 && imports.filter(function (row) {\n    return row[1] === \"QtQuick\";\n  }).length === 1) {\n    imports.push([\"qmlimport\", \"QtQml\", 2, \"\", true]);\n  }\n  for (var i = 0; i < imports.length; ++i) {\n    var _imports$i = _slicedToArray(imports[i], 4),\n        moduleName = _imports$i[1],\n        moduleVersion = _imports$i[2],\n        moduleAlias = _imports$i[3];\n\n    var moduleConstructors = getModuleConstructors(moduleName, moduleVersion);\n\n    if (moduleAlias !== \"\") {\n      constructors[moduleAlias] = mergeObjects(constructors[moduleAlias], moduleConstructors);\n    } else {\n      constructors = mergeObjects(constructors, moduleConstructors);\n    }\n  }\n  self.importContextId = importContextIds++;\n  perImportContextConstructors[self.importContextId] = constructors;\n  QmlWeb.constructors = constructors; // TODO: why do we need this?\n}\n\nfunction inherit(constructor, baseClass) {\n  var oldProto = constructor.prototype;\n  constructor.prototype = Object.create(baseClass.prototype);\n  Object.getOwnPropertyNames(oldProto).forEach(function (prop) {\n    constructor.prototype[prop] = oldProto[prop];\n  });\n  constructor.prototype.constructor = baseClass;\n}\n\nfunction callSuper(self, meta) {\n  var info = meta.super.$qmlTypeInfo || {};\n  meta.super = meta.super.prototype.constructor;\n  meta.super.call(self, meta);\n\n  if (info.enums) {\n    // TODO: not exported to the whole file scope yet\n    Object.keys(info.enums).forEach(function (name) {\n      self[name] = info.enums[name];\n\n      if (!global[name]) {\n        global[name] = self[name]; // HACK\n      }\n    });\n  }\n  if (info.properties) {\n    Object.keys(info.properties).forEach(function (name) {\n      var desc = info.properties[name];\n      if (typeof desc === \"string\") {\n        desc = { type: desc };\n      }\n      QmlWeb.createProperty(desc.type, self, name, desc);\n    });\n  }\n  if (info.signals) {\n    Object.keys(info.signals).forEach(function (name) {\n      var params = info.signals[name];\n      self[name] = QmlWeb.Signal.signal(params);\n    });\n  }\n  if (info.defaultProperty) {\n    self.$defaultProperty = info.defaultProperty;\n  }\n}\n\n/**\n * QML Object constructor.\n * @param {Object} meta Meta information about the object and the creation\n *                      context\n * @return {Object} New qml object\n */\nfunction construct(meta) {\n  var item = void 0;\n\n  var constructors = perImportContextConstructors[meta.context.importContextId];\n\n  var classComponents = meta.object.$class.split(\".\");\n  for (var ci = 0; ci < classComponents.length; ++ci) {\n    var c = classComponents[ci];\n    constructors = constructors[c];\n    if (constructors === undefined) {\n      break;\n    }\n  }\n\n  if (constructors !== undefined) {\n    var _constructor = constructors;\n    meta.super = _constructor;\n    item = new _constructor(meta);\n    meta.super = undefined;\n  } else {\n    // Load component from file. Please look at import.js for main notes.\n    // Actually, we have to use that order:\n    // 1) try to load component from current basePath\n    // 2) from importPathList\n    // 3) from directories in imports statements and then\n    // 4) from qmldir files\n    // Currently we support only 1,2 and 4 and use order: 4,1,2\n    // TODO: engine.qmldirs is global for all loaded components.\n    //       That's not qml's original behaviour.\n    var qdirInfo = QmlWeb.engine.qmldirs[meta.object.$class];\n    // Are we have info on that component in some imported qmldir files?\n\n    /* This will also be set in applyProperties, but needs to be set here\n     * for Qt.createComponent to have the correct context. */\n    QmlWeb.executionContext = meta.context;\n\n    var filePath = void 0;\n    if (qdirInfo) {\n      filePath = qdirInfo.url;\n    } else if (classComponents.length === 2) {\n      var qualified = QmlWeb.engine.qualifiedImportPath(meta.context.importContextId, classComponents[0]);\n      filePath = \"\" + qualified + classComponents[1] + \".qml\";\n    } else {\n      filePath = classComponents[0] + \".qml\";\n    }\n\n    var component = QmlWeb.Qt.createComponent(filePath);\n\n    if (!component) {\n      throw new Error(\"No constructor found for \" + meta.object.$class);\n    }\n\n    item = component.$createObject(meta.parent);\n    if (typeof item.dom !== \"undefined\") {\n      item.dom.className += \" \" + classComponents[classComponents.length - 1];\n      if (meta.object.id) {\n        item.dom.className += \"  \" + meta.object.id;\n      }\n    }\n    // Handle default properties\n  }\n\n  // id\n  if (meta.object.id) {\n    QmlWeb.setupGetterSetter(meta.context, meta.object.id, function () {\n      return item;\n    }, function () {});\n  }\n\n  // keep path in item for probale use it later in Qt.resolvedUrl\n  item.$context.$basePath = QmlWeb.engine.$basePath; //gut\n\n  // We want to use the item's scope, but this Component's imports\n  item.$context.importContextId = meta.context.importContextId;\n\n  // Apply properties (Bindings won't get evaluated, yet)\n  QmlWeb.applyProperties(meta.object, item, item, item.$context);\n\n  return item;\n}\n\nQmlWeb.modules = modules;\nQmlWeb.registerGlobalQmlType = registerGlobalQmlType;\nQmlWeb.registerQmlType = registerQmlType;\nQmlWeb.getConstructor = getConstructor;\nQmlWeb.loadImports = loadImports;\nQmlWeb.callSuper = callSuper;\nQmlWeb.construct = construct;\n\n/**\n * Create property getters and setters for object.\n * @param {Object} obj Object for which gsetters will be set\n * @param {String} propName Property name\n * @param {Object} [options] Options that allow finetuning of the property\n */\nfunction createProperty(type, obj, propName) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  var QMLProperty = QmlWeb.QMLProperty;\n  var prop = new QMLProperty(type, obj, propName);\n  obj[propName + \"Changed\"] = prop.changed;\n  obj.$properties[propName] = prop;\n  obj.$properties[propName].set(options.initialValue, QMLProperty.ReasonInit);\n\n  var getter = function getter() {\n    return obj.$properties[propName].get();\n  };\n  var setter = void 0;\n  if (options.readOnly) {\n    setter = function setter(newVal) {\n      if (!obj.$canEditReadOnlyProperties) {\n        throw new Error(\"property '\" + propName + \"' has read only access\");\n      }\n      obj.$properties[propName].set(newVal, QMLProperty.ReasonUser);\n    };\n  } else {\n    setter = function setter(newVal) {\n      obj.$properties[propName].set(newVal, QMLProperty.ReasonUser);\n    };\n  }\n  QmlWeb.setupGetterSetter(obj, propName, getter, setter);\n  if (obj.$isComponentRoot) {\n    QmlWeb.setupGetterSetter(obj.$context, propName, getter, setter);\n  }\n}\n\n/**\n * Apply properties from metaObject to item.\n * @param {Object} metaObject Source of properties\n * @param {Object} item Target of property apply\n * @param {Object} objectScope Scope in which properties should be evaluated\n * @param {Object} componentScope Component scope in which properties should be\n *                 evaluated\n */\nfunction applyProperties(metaObject, item, objectScopeIn, componentScope) {\n  var QMLProperty = QmlWeb.QMLProperty;\n  var objectScope = objectScopeIn || item;\n  QmlWeb.executionContext = componentScope;\n\n  if (metaObject.$children && metaObject.$children.length !== 0) {\n    if (item.$defaultProperty) {\n      item.$properties[item.$defaultProperty].set(metaObject.$children, QMLProperty.ReasonInit, objectScope, componentScope);\n    } else {\n      throw new Error(\"Cannot assign to unexistant default property\");\n    }\n  }\n  // We purposefully set the default property AFTER using it, in order to only\n  // have it applied for instanciations of this component, but not for its\n  // internal children\n  if (metaObject.$defaultProperty) {\n    item.$defaultProperty = metaObject.$defaultProperty;\n  }\n\n  for (var i in metaObject) {\n    var value = metaObject[i];\n    if (i === \"id\" || i === \"$class\") {\n      // keep them\n      item[i] = value;\n      continue;\n    }\n\n    // skip global id's and internal values\n    if (i === \"id\" || i[0] === \"$\") {\n      // TODO: what? See above.\n      continue;\n    }\n\n    // slots\n    if (i.indexOf(\"on\") === 0 && i.length > 2 && /[A-Z]/.test(i[2])) {\n      var signalName = i[2].toLowerCase() + i.slice(3);\n      if (connectSignal(item, signalName, value, objectScope, componentScope)) {\n        continue;\n      }\n      if (item.$setCustomSlot) {\n        item.$setCustomSlot(signalName, value, objectScope, componentScope);\n        continue;\n      }\n    }\n\n    if (value instanceof Object) {\n      if (applyProperty(item, i, value, objectScope, componentScope)) {\n        continue;\n      }\n    }\n\n    if (item.$properties && i in item.$properties) {\n      item.$properties[i].set(value, QMLProperty.ReasonInit, objectScope, componentScope);\n    } else if (i in item) {\n      item[i] = value;\n    } else if (item.$setCustomData) {\n      item.$setCustomData(i, value);\n    } else {\n      console.warn(\"Cannot assign to non-existent property \\\"\" + i + \"\\\". Ignoring assignment.\");\n    }\n  }\n}\n\nfunction applyProperty(item, i, value, objectScope, componentScope) {\n  var QMLProperty = QmlWeb.QMLProperty;\n\n  if (value instanceof QmlWeb.QMLSignalDefinition) {\n    item[i] = QmlWeb.Signal.signal(value.parameters);\n    if (item.$isComponentRoot) {\n      componentScope[i] = item[i];\n    }\n    return true;\n  }\n\n  if (value instanceof QmlWeb.QMLMethod) {\n    value.compile();\n    item[i] = value.eval(objectScope, componentScope, componentScope.$basePath);\n    if (item.$isComponentRoot) {\n      componentScope[i] = item[i];\n    }\n    return true;\n  }\n\n  if (value instanceof QmlWeb.QMLAliasDefinition) {\n    // TODO\n    // 1. Alias must be able to point to prop or id of local object,\n    //    eg: property alias q: t\n    // 2. Alias may have same name as id it points to: property alias\n    //    someid: someid\n    // 3. Alias proxy (or property proxy) to proxy prop access to selected\n    //    incapsulated object. (think twice).\n    createProperty(\"alias\", item, i);\n    item.$properties[i].componentScope = componentScope;\n    item.$properties[i].componentScopeBasePath = componentScope.$basePath;\n    item.$properties[i].val = value;\n    item.$properties[i].get = function () {\n      var obj = this.componentScope[this.val.objectName];\n      var propertyName = this.val.propertyName;\n      return propertyName ? obj.$properties[propertyName].get() : obj;\n    };\n    item.$properties[i].set = function (newVal, reason, _objectScope, _componentScope) {\n      if (!this.val.propertyName) {\n        throw new Error(\"Cannot set alias property pointing to an QML object.\");\n      }\n      var obj = this.componentScope[this.val.objectName];\n      var prop = obj.$properties[this.val.propertyName];\n      prop.set(newVal, reason, _objectScope, _componentScope);\n    };\n\n    if (value.propertyName) {\n      var con = function con(prop) {\n        var obj = prop.componentScope[prop.val.objectName];\n        if (!obj) {\n          console.error(\"qtcore: target object \", prop.val.objectName, \" not found for alias \", prop);\n        } else {\n          (function () {\n            var targetProp = obj.$properties[prop.val.propertyName];\n            if (!targetProp) {\n              console.error(\"qtcore: target property [\", prop.val.objectName, \"].\", prop.val.propertyName, \" not found for alias \", prop.name);\n            } else {\n              (function () {\n                // targetProp.changed.connect( prop.changed );\n                // it is not sufficient to connect to `changed` of source property\n                // we have to propagate own changed to it too\n                // seems the best way to do this is to make them identical?..\n                // prop.changed = targetProp.changed;\n                // obj[`${i}Changed`] = prop.changed;\n                // no. because those object might be destroyed later.\n                var loopWatchdog = false;\n                targetProp.changed.connect(item, function () {\n                  for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n                    args[_key7] = arguments[_key7];\n                  }\n\n                  if (loopWatchdog) return;\n                  loopWatchdog = true;\n                  prop.changed.apply(item, args);\n                  loopWatchdog = false;\n                });\n                prop.changed.connect(obj, function () {\n                  for (var _len8 = arguments.length, args = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n                    args[_key8] = arguments[_key8];\n                  }\n\n                  if (loopWatchdog) return;\n                  loopWatchdog = true;\n                  targetProp.changed.apply(obj, args);\n                  loopWatchdog = false;\n                });\n              })();\n            }\n          })();\n        }\n      };\n      QmlWeb.engine.pendingOperations.push([con, item.$properties[i]]);\n    }\n    return true;\n  }\n\n  if (value instanceof QmlWeb.QMLPropertyDefinition) {\n    createProperty(value.type, item, i);\n    item.$properties[i].set(value.value, QMLProperty.ReasonInit, objectScope, componentScope);\n    return true;\n  }\n\n  if (item[i] && value instanceof QmlWeb.QMLMetaPropertyGroup) {\n    // Apply properties one by one, otherwise apply at once\n    applyProperties(value, item[i], objectScope, componentScope);\n    return true;\n  }\n\n  return false;\n}\n\nfunction connectSignal(item, signalName, value, objectScope, componentScope) {\n  if (!item[signalName]) {\n    console.warn(\"No signal called \" + signalName + \" found!\");\n    return undefined;\n  } else if (typeof item[signalName].connect !== \"function\") {\n    console.warn(signalName + \" is not a signal!\");\n    return undefined;\n  }\n\n  if (!value.compiled) {\n    var params = [];\n    for (var j in item[signalName].parameters) {\n      params.push(item[signalName].parameters[j].name);\n    }\n    // Wrap value.src in IIFE in case it includes a \"return\"\n    value.src = \"(\\n      function(\" + params.join(\", \") + \") {\\n        QmlWeb.executionContext = __executionContext;\\n        QmlWeb.engine.$oldBasePath = QmlWeb.engine.$basePath;\\n        QmlWeb.engine.$basePath = \\\"\" + componentScope.$basePath + \"\\\";\\n        try {\\n          (function() {\\n            \" + value.src + \"\\n          })();\\n        } finally {\\n          QmlWeb.engine.$basePath = QmlWeb.engine.$oldBasePath;\\n        }\\n      }\\n    )\";\n    value.isFunction = false;\n    value.compile();\n  }\n  // Don't pass in __basePath argument, as QMLEngine.$basePath is set in the\n  // value.src, as we need it set at the time the slot is called.\n  var slot = value.eval(objectScope, componentScope);\n  item[signalName].connect(item, slot);\n  return slot;\n}\n\nQmlWeb.createProperty = createProperty;\nQmlWeb.applyProperties = applyProperties;\nQmlWeb.connectSignal = connectSignal;\n\n/* @license\n\nMIT License\n\nCopyright (c) 2011 Lauri Paimen <lauri@paimen.info>\nCopyright (c) 2013 Anton Kreuzkamp <akreuzkamp@web.de>\nCopyright (c) 2016 QmlWeb contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nvar QMLMethod = function (_QmlWeb$QMLBinding) {\n  _inherits(QMLMethod, _QmlWeb$QMLBinding);\n\n  function QMLMethod() {\n    _classCallCheck(this, QMLMethod);\n\n    return _possibleConstructorReturn(this, (QMLMethod.__proto__ || Object.getPrototypeOf(QMLMethod)).apply(this, arguments));\n  }\n\n  return QMLMethod;\n}(QmlWeb.QMLBinding);\n\n/**\n * Create an object representing a QML property definition.\n * @param {String} type The type of the property\n * @param {Array} value The default value of the property\n * @return {Object} Object representing the defintion\n */\n\n\nvar QMLPropertyDefinition = function QMLPropertyDefinition(type, value) {\n  _classCallCheck(this, QMLPropertyDefinition);\n\n  this.type = type;\n  this.value = value;\n};\n\nvar QMLAliasDefinition = function QMLAliasDefinition(objName, propName) {\n  _classCallCheck(this, QMLAliasDefinition);\n\n  this.objectName = objName;\n  this.propertyName = propName;\n};\n\n/**\n * Create an object representing a QML signal definition.\n * @param {Array} params The parameters the signal ships\n * @return {Object} Object representing the defintion\n */\n\n\nvar QMLSignalDefinition = function QMLSignalDefinition(params) {\n  _classCallCheck(this, QMLSignalDefinition);\n\n  this.parameters = params;\n};\n\n/**\n * Create an object representing a group of QML properties (like anchors).\n * @return {Object} Object representing the group\n */\n\n\nvar QMLMetaPropertyGroup = function QMLMetaPropertyGroup() {\n  _classCallCheck(this, QMLMetaPropertyGroup);\n};\n\n/**\n * Create an object representing a QML element.\n * @param {String} type Type of the element\n * @param {String} onProp Name of the property specified with the \"on\" keyword\n */\n\n\nvar QMLMetaElement = function QMLMetaElement(type, onProp) {\n  _classCallCheck(this, QMLMetaElement);\n\n  this.$class = type;\n  this.$children = [];\n  this.$on = onProp;\n};\n\n// Convert parser tree to the format understood by engine\n\n\nfunction convertToEngine(tree) {\n  return convertToEngine.walk(tree);\n}\n\nfunction stringifyDots(elem) {\n  var sub = elem;\n  var path = [];\n  while (sub[0] === \"dot\") {\n    path.push(sub[1]);\n    sub = sub[2];\n  }\n  path.push(sub);\n  return path.join(\".\");\n}\n\nfunction applyProp(item, name, val) {\n  var curr = item; // output structure\n  var sub = name; // input structure\n  while (sub[0] === \"dot\") {\n    if (!curr[sub[1]]) {\n      curr[sub[1]] = new QMLMetaPropertyGroup();\n    }\n    curr = curr[sub[1]];\n    sub = sub[2];\n  }\n  curr[sub] = val;\n}\n\nconvertToEngine.walkers = {\n  toplevel: function toplevel(imports, statement) {\n    var item = { $class: \"Component\" };\n    item.$imports = imports;\n    item.$children = [convertToEngine.walk(statement)];\n    return item;\n  },\n  qmlelem: function qmlelem(elem, onProp, statements) {\n    var item = new QMLMetaElement(stringifyDots(elem), onProp);\n\n    for (var i in statements) {\n      var statement = statements[i];\n      var name = statement[1];\n      var val = convertToEngine.walk(statement);\n      switch (statement[0]) {\n        case \"qmldefaultprop\":\n          item.$defaultProperty = name;\n          item[name] = val;\n          break;\n        case \"qmlprop\":\n        case \"qmlpropdef\":\n        case \"qmlaliasdef\":\n        case \"qmlmethod\":\n        case \"qmlsignaldef\":\n          applyProp(item, name, val);\n          break;\n        case \"qmlelem\":\n          item.$children.push(val);\n          break;\n        case \"qmlobjdef\":\n          throw new Error(\"qmlobjdef support was removed, update qmlweb-parser to ^0.3.0.\");\n        case \"qmlobj\":\n          // Create object to item\n          item[name] = item[name] || new QMLMetaPropertyGroup();\n          for (var j in val) {\n            item[name][j] = val[j];\n          }\n          break;\n        default:\n          console.log(\"Unknown statement\", statement);\n      }\n    }\n    // Make $children be either a single item or an array, if it's more than one\n    if (item.$children.length === 1) {\n      item.$children = item.$children[0];\n    }\n\n    return item;\n  },\n  qmlprop: function qmlprop(name, tree, src) {\n    if (name === \"id\") {\n      // id property\n      return tree[1][1];\n    }\n    return convertToEngine.bindout(tree, src);\n  },\n  qmlobjdef: function qmlobjdef(name, property, tree, src) {\n    return convertToEngine.bindout(tree, src);\n  },\n  qmlobj: function qmlobj(elem, statements) {\n    var item = {};\n    for (var i in statements) {\n      var statement = statements[i];\n      var name = statement[1];\n      var val = convertToEngine.walk(statement);\n      if (statement[0] === \"qmlprop\") {\n        applyProp(item, name, val);\n      }\n    }\n    return item;\n  },\n  qmlmethod: function qmlmethod(name, tree, src) {\n    return new QMLMethod(src);\n  },\n  qmlpropdef: function qmlpropdef(name, type, tree, src) {\n    return new QMLPropertyDefinition(type, tree ? convertToEngine.bindout(tree, src) : undefined);\n  },\n  qmlaliasdef: function qmlaliasdef(name, objName, propName) {\n    return new QMLAliasDefinition(objName, propName);\n  },\n  qmlsignaldef: function qmlsignaldef(name, params) {\n    return new QMLSignalDefinition(params);\n  },\n  qmldefaultprop: function qmldefaultprop(tree) {\n    return convertToEngine.walk(tree);\n  },\n  name: function name(src) {\n    if (src === \"true\" || src === \"false\") {\n      return src === \"true\";\n    } else if (typeof src === \"boolean\") {\n      // TODO: is this needed? kept for compat with ==\n      return src;\n    }\n    return new QmlWeb.QMLBinding(src, [\"name\", src]);\n  },\n  num: function num(src) {\n    return +src;\n  },\n  string: function string(src) {\n    return String(src);\n  },\n  array: function array(tree, src) {\n    var a = [];\n    var isList = false;\n    var hasBinding = false;\n    for (var i in tree) {\n      var val = convertToEngine.bindout(tree[i]);\n      a.push(val);\n\n      if (val instanceof QMLMetaElement) {\n        isList = true;\n      } else if (val instanceof QmlWeb.QMLBinding) {\n        hasBinding = true;\n      }\n    }\n\n    if (hasBinding) {\n      if (isList) {\n        throw new TypeError(\"An array may either contain bindings or Element definitions.\");\n      }\n      return new QmlWeb.QMLBinding(src, tree);\n    }\n\n    return a;\n  }\n};\n\nconvertToEngine.walk = function (tree) {\n  var type = tree[0];\n  var walker = convertToEngine.walkers[type];\n  if (!walker) {\n    console.log(\"No walker for \" + type);\n    return undefined;\n  }\n  return walker.apply(type, tree.slice(1));\n};\n\n// Try to bind out tree and return static variable instead of binding\nconvertToEngine.bindout = function (statement, binding) {\n  // We want to process the content of the statement\n  // (but still handle the case, we get the content directly)\n  var tree = statement[0] === \"stat\" ? statement[1] : statement;\n\n  var type = tree[0];\n  var walker = convertToEngine.walkers[type];\n  if (walker) {\n    return walker.apply(type, tree.slice(1));\n  }\n  return new QmlWeb.QMLBinding(binding, tree);\n};\n\n// Help logger\nconvertToEngine.amIn = function (str, tree) {\n  console.log(str);\n  if (tree) console.log(JSON.stringify(tree, null, \"  \"));\n};\n\nfunction loadParser() {\n  if (typeof QmlWeb.parse !== \"undefined\") {\n    return;\n  }\n\n  console.log(\"Loading parser...\");\n  var tags = document.getElementsByTagName(\"script\");\n  for (var i in tags) {\n    if (tags[i].src && tags[i].src.indexOf(\"/qt.\") !== -1) {\n      var src = tags[i].src.replace(\"/qt.\", \"/qmlweb.parser.\");\n      // TODO: rewrite to async loading\n      var xhr = new XMLHttpRequest();\n      xhr.open(\"GET\", src, false);\n      xhr.send(null);\n      if (xhr.status !== 200 && xhr.status !== 0) {\n        // xhr.status === 0 if accessing with file://\n        throw new Error(\"Could not load QmlWeb parser!\");\n      }\n      new Function(xhr.responseText)();\n      QmlWeb.parse = QmlWeb.parse;\n      QmlWeb.jsparse = QmlWeb.jsparse;\n      return;\n    }\n  }\n}\n\n// Function to parse qml and output tree expected by engine\nfunction parseQML(src, file) {\n  loadParser();\n  QmlWeb.parse.nowParsingFile = file;\n  var parsetree = QmlWeb.parse(src, QmlWeb.parse.QmlDocument);\n  return convertToEngine(parsetree);\n}\n\nQmlWeb.QMLMethod = QMLMethod;\nQmlWeb.QMLPropertyDefinition = QMLPropertyDefinition;\nQmlWeb.QMLAliasDefinition = QMLAliasDefinition;\nQmlWeb.QMLSignalDefinition = QMLSignalDefinition;\nQmlWeb.QMLMetaPropertyGroup = QMLMetaPropertyGroup;\nQmlWeb.QMLMetaElement = QMLMetaElement;\nQmlWeb.convertToEngine = convertToEngine;\nQmlWeb.loadParser = loadParser;\nQmlWeb.parseQML = parseQML;\n\n/*\n\nQmlWeb.qrc is analogous to the Qt Resource System. It is expected to map a path\nwithin the resource system to the following pieces of data:\n\n1) For a QML Component, it is the return value of QmlWeb.parse\n2) For a JavaScript file, it is the return value of QmlWeb.jsparse\n2) For an image, it is any URL that an <img> tag can accept (e.g. a standard\n   URL to an image resource, or a \"data:\" URI). If there is no entry for a\n   given qrc image path, it will fall back to passing the path right through to\n   the DOM. This is mainly a convenience until support for images is added to\n   gulp-qmlweb.\n\nThe \"data-qml\" tag on <body> can be set to a \"qrc://\" URL like\n\"qrc:///root.qml\" to use a pre-parsed \"/root.qml\" from QmlWeb.qrc.\n\nSince relative URLs are resolved relative to the URL of the containing\ncomponent, any relative URL set within a file in the resource system will also\nresolve within the resource system. To access a Component, JavaScript or image\nfile that is stored outside of the resources system from within the resource\nsystem, a full URL must be used (e.g. \"http://www.example.com/images/foo.png\").\n\nVice-versa, in order to access a Component, JavaScript or image file that is\nstored within the resource system from outside of the resource system, a full\n\"qrc://\" URL must be used (e.g. \"qrc:///images/foo.png\").\n\nMore details here: http://doc.qt.io/qt-5/qml-url.html\n\n*/\nQmlWeb.qrc = {};\n\nQmlWeb.registerQmlType({\n  module: \"QmlWeb.Dom\",\n  name: \"DomElement\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    tagName: { type: \"string\", initialValue: \"div\" }\n  }\n}, function () {\n  function _class(meta) {\n    _classCallCheck(this, _class);\n\n    QmlWeb.callSuper(this, meta);\n\n    var tagName = meta.object.tagName || \"div\";\n    this.dom = document.createElement(tagName);\n\n    // TODO: support properties, styles, perhaps changing the tagName\n  }\n\n  return _class;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QmlWeb\",\n  name: \"RestModel\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    url: \"string\",\n    isLoading: \"bool\",\n    mimeType: { type: \"string\", initialValue: \"application/json\" },\n    queryMimeType: {\n      type: \"string\",\n      initialValue: \"application/x-www-urlencoded\"\n    }\n  },\n  signals: {\n    fetched: [],\n    saved: []\n  }\n}, function () {\n  function _class2(meta) {\n    _classCallCheck(this, _class2);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.attributes = this.getAttributes();\n    this.runningRequests = 0;\n  }\n\n  _createClass(_class2, [{\n    key: \"fetch\",\n    value: function fetch() {\n      var _this5 = this;\n\n      this.$ajax({\n        method: \"GET\",\n        mimeType: this.mimetype,\n        success: function success(xhr) {\n          _this5.$xhrReadResponse(xhr);\n          _this5.fetched();\n        }\n      });\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var _this6 = this;\n\n      this.$ajax({\n        method: \"DELETE\",\n        success: function success() {\n          _this6.destroy();\n        }\n      });\n    }\n  }, {\n    key: \"create\",\n    value: function create() {\n      this.$sendToServer(\"POST\");\n    }\n  }, {\n    key: \"save\",\n    value: function save() {\n      this.$sendToServer(\"PUT\");\n    }\n  }, {\n    key: \"$sendToServer\",\n    value: function $sendToServer(method) {\n      var _this7 = this;\n\n      this.$ajax({\n        method: method,\n        mimeType: this.queryMimeType,\n        body: this.$generateBodyForPostQuery(),\n        success: function success(xhr) {\n          _this7.$xhrReadResponse(xhr);\n          _this7.saved();\n        }\n      });\n    }\n  }, {\n    key: \"$generateBodyForPostQuery\",\n    value: function $generateBodyForPostQuery() {\n      var object = {};\n      for (var i = 0; i < this.attributes.length; ++i) {\n        object[this.attributes[i]] = this.$properties[this.attributes[i]].get();\n      }\n      console.log(object);\n      switch (this.queryMimeType) {\n        case \"application/json\":\n        case \"text/json\":\n          return JSON.stringify(object);\n        case \"application/x-www-urlencoded\":\n          return this.$objectToUrlEncoded(object);\n      }\n      return undefined;\n    }\n  }, {\n    key: \"$objectToUrlEncoded\",\n    value: function $objectToUrlEncoded(object, prefix) {\n      var parts = [];\n      for (var key in object) {\n        if (object.hasOwnProperty(key)) {\n          var value = object[key];\n          if (typeof prefix !== \"undefined\") {\n            key = prefix + \"[\" + key + \"]\";\n          }\n          if ((typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) === \"object\") {\n            parts.push(this.$objectToUrlEncoded(value, key));\n          } else {\n            var ekey = this.$myEncodeURIComponent(key);\n            var evalue = this.$myEncodeURIComponent(value);\n            parts.push(ekey + \"=\" + evalue);\n          }\n        }\n      }\n      return parts.join(\"&\");\n    }\n  }, {\n    key: \"$myEncodeURIComponent\",\n    value: function $myEncodeURIComponent(str) {\n      return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n        return \"%\" + c.charCodeAt(0).toString(16);\n      });\n    }\n  }, {\n    key: \"$ajax\",\n    value: function $ajax(options) {\n      var _this8 = this;\n\n      var xhr = new XMLHttpRequest();\n      xhr.overrideMimeType(this.mimeType);\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          if (xhr.status === 200) {\n            options.success(xhr);\n          } else {\n            options.failure(xhr);\n          }\n          _this8.runningRequests -= 1;\n          if (_this8.runningRequests <= 0) {\n            _this8.isLoading = false;\n          }\n        }\n      };\n      xhr.open(options.method, this.url, true);\n      if (typeof options.body !== \"undefined\") {\n        xhr.setRequestHeader(\"Content-Type\", this.queryMimeType);\n        xhr.send(options.body);\n      } else {\n        xhr.send(null);\n      }\n      this.runningRequests += 1;\n      this.isLoading = true;\n    }\n  }, {\n    key: \"$xhrReadResponse\",\n    value: function $xhrReadResponse(xhr) {\n      var responseObject = void 0;\n      if (this.mimeType === \"application/json\" || this.mimeType === \"text/json\") {\n        responseObject = JSON.parse(xhr.responseText);\n      }\n      this.$updatePropertiesFromResponseObject(responseObject);\n    }\n  }, {\n    key: \"$updatePropertiesFromResponseObject\",\n    value: function $updatePropertiesFromResponseObject(responseObject) {\n      var QMLProperty = QmlWeb.QMLProperty;\n      for (var key in responseObject) {\n        if (responseObject.hasOwnProperty(key) && this.$hasProperty(key)) {\n          this.$properties[key].set(responseObject[key], QMLProperty.ReasonUser);\n        }\n      }\n    }\n  }, {\n    key: \"$hasProperty\",\n    value: function $hasProperty(name) {\n      return typeof this.$properties[name] !== \"undefined\";\n    }\n  }]);\n\n  return _class2;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"Qt.labs.settings\",\n  name: \"Settings\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    category: \"string\"\n  }\n}, function () {\n  function _class3(meta) {\n    _classCallCheck(this, _class3);\n\n    QmlWeb.callSuper(this, meta);\n\n    if (typeof window.localStorage === \"undefined\") {\n      return;\n    }\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n  }\n\n  _createClass(_class3, [{\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.$loadProperties();\n      this.$initializeProperties();\n    }\n  }, {\n    key: \"$getKey\",\n    value: function $getKey(attrName) {\n      return this.category + \"/\" + attrName;\n    }\n  }, {\n    key: \"$loadProperties\",\n    value: function $loadProperties() {\n      var _this9 = this;\n\n      this.$attributes.forEach(function (attrName) {\n        if (!_this9.$properties[attrName]) return;\n\n        var key = _this9.$getKey(attrName);\n        _this9[attrName] = localStorage.getItem(key);\n      });\n    }\n  }, {\n    key: \"$initializeProperties\",\n    value: function $initializeProperties() {\n      var _this10 = this;\n\n      this.$attributes.forEach(function (attrName) {\n        if (!_this10.$properties[attrName]) return;\n\n        var emitter = _this10;\n        var signalName = attrName + \"Changed\";\n\n        if (_this10.$properties[attrName].type === \"alias\") {\n          emitter = _this10.$context[_this10.$properties[attrName].val.objectName];\n          signalName = _this10.$properties[attrName].val.propertyName + \"Changed\";\n        }\n\n        emitter[signalName].connect(_this10, function () {\n          localStorage.setItem(_this10.$getKey(attrName), _this10[attrName]);\n        });\n      });\n    }\n  }]);\n\n  return _class3;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtGraphicalEffects\",\n  name: \"FastBlur\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    radius: \"real\",\n    source: { type: \"var\", initialValue: null }\n  }\n}, function () {\n  function _class4(meta) {\n    _classCallCheck(this, _class4);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$previousSource = null;\n    this.$filterObject = undefined;\n\n    this.radiusChanged.connect(this, this.$onRadiusChanged);\n    this.sourceChanged.connect(this, this.$onSourceChanged);\n  }\n\n  _createClass(_class4, [{\n    key: \"$onRadiusChanged\",\n    value: function $onRadiusChanged() {\n      this.$updateEffect(this.source);\n    }\n  }, {\n    key: \"$onSourceChanged\",\n    value: function $onSourceChanged() {\n      this.$updateEffect(this.source);\n    }\n  }, {\n    key: \"$updateFilterObject\",\n    value: function $updateFilterObject() {\n      this.$filterObject = {\n        transformType: \"filter\",\n        operation: \"blur\",\n        parameters: this.radius + \"px\"\n      };\n    }\n  }, {\n    key: \"$updateEffect\",\n    value: function $updateEffect(source) {\n      console.log(\"updating effect\");\n      if (this.$previousSource) {\n        var index = this.$previousSource.transform.indexOf(this.$filterObject);\n        this.$previousSource.transform.splice(index, 1);\n        this.$previousSource.$updateTransform();\n      }\n      if (source && source.transform) {\n        this.$updateFilterObject();\n        console.log(\"updating effect:\", this.$filterObject, source);\n        source.transform.push(this.$filterObject);\n        source.$updateTransform();\n        this.$previousSource = source;\n      } else {\n        this.$previousSource = null;\n      }\n    }\n  }]);\n\n  return _class4;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtMobility\",\n  name: \"GeoLocation\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    accuracy: \"double\",\n    altitude: \"double\",\n    altitudeAccuracy: \"double\",\n    heading: \"double\",\n    latitude: \"double\",\n    longitude: \"double\",\n    speed: \"double\",\n    timestamp: \"date\",\n    label: \"string\"\n  }\n}, function () {\n  function _class5(meta) {\n    var _this11 = this;\n\n    _classCallCheck(this, _class5);\n\n    QmlWeb.callSuper(this, meta);\n\n    if (!navigator.geolocation) {\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(function (pos) {\n      return _this11.$updatePosition(pos);\n    });\n    navigator.geolocation.watchPosition(function (pos) {\n      return _this11.$updatePosition(pos);\n    });\n  }\n\n  _createClass(_class5, [{\n    key: \"$updatePosition\",\n    value: function $updatePosition(position) {\n      this.accuracy = position.coords.accuracy;\n      this.altitude = position.coords.altitude;\n      this.altitudeAccuracy = position.coords.altitudeAccuracy;\n      this.heading = position.coords.heading;\n      this.latitude = position.coords.latitude;\n      this.longitude = position.coords.longitude;\n      this.speed = position.coords.speed;\n      this.timestamp = position.timestamp;\n    }\n  }]);\n\n  return _class5;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtMultimedia\",\n  name: \"Video\",\n  versions: /^5\\./,\n  baseClass: \"QtQuick.Item\",\n  enums: {\n    MediaPlayer: {\n      NoError: 0, ResourceError: 1, FormatError: 2, NetworkError: 4,\n      AccessDenied: 8, ServiceMissing: 16,\n\n      StoppedState: 0, PlayingState: 1, PausedState: 2,\n\n      NoMedia: 0, Loading: 1, Loaded: 2, Buffering: 4, Stalled: 8,\n      EndOfMedia: 16, InvalidMedia: 32, UnknownStatus: 64\n    },\n    VideoOutput: { PreserveAspectFit: 0, PreserveAspectCrop: 1, Stretch: 2 }\n  },\n  properties: {\n    source: \"string\",\n    duration: \"int\",\n    position: \"int\",\n    autoPlay: \"bool\",\n    muted: \"bool\",\n    volume: \"real\",\n    playbackRate: \"real\",\n    playbackState: \"enum\", // MediaPlayer.StoppedState\n    fillMode: \"enum\", // VideoOutput.PreserveAspectFit\n    status: \"enum\", // MediaPlayer.NoMedia\n    error: \"enum\" // MediaPlayer.NoError\n  },\n  signals: {\n    paused: [],\n    playing: [],\n    stopped: []\n  }\n}, function () {\n  function _class6(meta) {\n    var _this12 = this;\n\n    _classCallCheck(this, _class6);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$runningEventListener = 0;\n\n    this.impl = document.createElement(\"video\");\n    this.impl.style.width = this.impl.style.height = \"100%\";\n    this.impl.style.margin = \"0\";\n    this.dom.appendChild(this.impl);\n\n    this.volume = this.impl.volume;\n    this.duration = this.impl.duration;\n\n    this.impl.addEventListener(\"play\", function () {\n      _this12.playing();\n      _this12.playbackState = _this12.MediaPlayer.PlayingState;\n    });\n\n    this.impl.addEventListener(\"pause\", function () {\n      _this12.paused();\n      _this12.playbackState = _this12.MediaPlayer.PausedState;\n    });\n\n    this.impl.addEventListener(\"timeupdate\", function () {\n      _this12.$runningEventListener++;\n      _this12.position = _this12.impl.currentTime * 1000;\n      _this12.$runningEventListener--;\n    });\n\n    this.impl.addEventListener(\"ended\", function () {\n      _this12.stopped();\n      _this12.playbackState = _this12.MediaPlayer.StoppedState;\n    });\n\n    this.impl.addEventListener(\"progress\", function () {\n      if (_this12.impl.buffered.length > 0) {\n        _this12.progress = _this12.impl.buffered.end(0) / _this12.impl.duration;\n        _this12.status = _this12.progress < 1 ? _this12.MediaPlayer.Buffering : _this12.MediaPlayer.Buffered;\n      }\n    });\n\n    this.impl.addEventListener(\"stalled\", function () {\n      _this12.status = _this12.MediaPlayer.Stalled;\n    });\n\n    this.impl.addEventListener(\"canplaythrough\", function () {\n      _this12.status = _this12.MediaPlayer.Buffered;\n    });\n\n    this.impl.addEventListener(\"loadstart\", function () {\n      _this12.status = _this12.MediaPlayer.Loading;\n    });\n\n    this.impl.addEventListener(\"durationchanged\", function () {\n      _this12.duration = _this12.impl.duration;\n    });\n\n    this.impl.addEventListener(\"volumechanged\", function () {\n      _this12.$runningEventListener++;\n      _this12.volume = _this12.impl.volume;\n      _this12.$runningEventListener--;\n    });\n\n    this.impl.addEventListener(\"suspend\", function () {\n      _this12.error |= _this12.MediaPlayer.NetworkError;\n    });\n\n    this.impl.addEventListener(\"error\", function () {\n      _this12.error |= _this12.MediaPlayer.ResourceError;\n    });\n\n    this.impl.addEventListener(\"ratechange\", function () {\n      _this12.$runningEventListener++;\n      _this12.playbackRate = _this12.impl.playbackRate;\n      _this12.$runningEventListener--;\n    });\n\n    this.autoPlayChanged.connect(this, this.$onAutoPlayChanged);\n    this.sourceChanged.connect(this, this.$onSourceChanged);\n    this.positionChanged.connect(this, this.$onPositionChanged);\n    this.volumeChanged.connect(this, this.$onVolumeChanged);\n    this.playbackRateChanged.connect(this, this.$onPlaybackRateChanged);\n    this.mutedChanged.connect(this, this.$onMutedChanged);\n    this.fillModeChanged.connect(this, this.$onFillModeChanged);\n  }\n\n  _createClass(_class6, [{\n    key: \"$onAutoPlayChanged\",\n    value: function $onAutoPlayChanged(newVal) {\n      this.impl.autoplay = newVal;\n    }\n  }, {\n    key: \"$onSourceChanged\",\n    value: function $onSourceChanged(source) {\n      var parts = source.split(\".\");\n      var extension = parts[parts.length - 1].toLowerCase();\n      var mime = this.mimetypeFromExtension(extension);\n      this.impl.src = source;\n      if (!this.impl.canPlayType(mime)) {\n        this.error |= this.MediaPlayer.FormatError;\n      }\n    }\n  }, {\n    key: \"$onPositionChanged\",\n    value: function $onPositionChanged(currentTime) {\n      if (this.$runningEventListener > 0) return;\n      this.impl.currentTime = currentTime / 1000;\n    }\n  }, {\n    key: \"$onVolumeChanged\",\n    value: function $onVolumeChanged(volume) {\n      if (this.$runningEventListener > 0) return;\n      this.impl.volume = volume;\n    }\n  }, {\n    key: \"$onPlaybackRateChanged\",\n    value: function $onPlaybackRateChanged(playbackRate) {\n      if (this.$runningEventListener > 0) return;\n      this.impl.playbackRate = playbackRate;\n    }\n  }, {\n    key: \"$onMutedChanged\",\n    value: function $onMutedChanged(newValue) {\n      if (newValue) {\n        this.$volulmeBackup = this.impl.volume;\n        this.volume = 0;\n      } else {\n        this.volume = this.$volumeBackup;\n      }\n    }\n  }, {\n    key: \"$onFillModeChanged\",\n    value: function $onFillModeChanged(newValue) {\n      switch (newValue) {\n        case this.VideoOutput.Stretch:\n          this.impl.style.objectFit = \"fill\";\n          break;\n        case this.VideoOutput.PreserveAspectFit:\n          this.impl.style.objectFit = \"\";\n          break;\n        case this.VideoOutput.PreserveAspectCrop:\n          this.impl.style.objectFit = \"cover\";\n          break;\n      }\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.impl.pause();\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      this.impl.play();\n    }\n  }, {\n    key: \"seek\",\n    value: function seek(offset) {\n      this.impl.currentTime = offset * 1000;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {}\n  }, {\n    key: \"mimetypeFromExtension\",\n    value: function mimetypeFromExtension(extension) {\n      var mimetypes = {\n        ogg: \"video/ogg\",\n        ogv: \"video/ogg\",\n        ogm: \"video/ogg\",\n        mp4: \"video/mp4\",\n        webm: \"video/webm\"\n      };\n      return mimetypes[extension] || \"\";\n    }\n  }]);\n\n  return _class6;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQml\",\n  name: \"Binding\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    target: { type: \"QtObject\", initialValue: null },\n    property: { type: \"string\", initialValue: \"\" },\n    value: { type: \"var\", initialValue: undefined },\n    when: { type: \"bool\", initialValue: true }\n  }\n}, function () {\n  function _class7(meta) {\n    _classCallCheck(this, _class7);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$property = undefined;\n\n    this.valueChanged.connect(this, this.$onValueChanged);\n    this.targetChanged.connect(this, this.$updateBinding);\n    this.propertyChanged.connect(this, this.$updateBinding);\n    this.whenChanged.connect(this, this.$updateBinding);\n  }\n\n  _createClass(_class7, [{\n    key: \"$updateBinding\",\n    value: function $updateBinding() {\n      if (!this.when || !this.target || !this.target.hasOwnProperty(this.property) || this.value === undefined) {\n        this.$property = undefined;\n        return;\n      }\n      this.$property = this.target.$properties[this.property];\n      this.$onValueChanged(this.value); // trigger value update\n    }\n  }, {\n    key: \"$onValueChanged\",\n    value: function $onValueChanged(value) {\n      if (value !== undefined && this.$property) {\n        this.$property.set(value);\n      }\n    }\n  }]);\n\n  return _class7;\n}());\n\nvar QMLContext = function () {\n  function QMLContext() {\n    _classCallCheck(this, QMLContext);\n  }\n\n  _createClass(QMLContext, [{\n    key: \"nameForObject\",\n    value: function nameForObject(obj) {\n      for (var name in this) {\n        if (this[name] === obj) {\n          return name;\n        }\n      }\n      return undefined;\n    }\n  }]);\n\n  return QMLContext;\n}();\n\nvar QMLComponent = function () {\n  function QMLComponent(meta) {\n    var _this13 = this;\n\n    _classCallCheck(this, QMLComponent);\n\n    if (QmlWeb.constructors[meta.object.$class] === QMLComponent) {\n      this.$metaObject = meta.object.$children[0];\n    } else {\n      this.$metaObject = meta.object;\n    }\n    this.$context = meta.context;\n\n    this.$jsImports = [];\n\n    if (meta.object.$imports instanceof Array) {\n      (function () {\n        var moduleImports = [];\n        var loadImport = function loadImport(importDesc) {\n          if (/\\.js$/.test(importDesc[1])) {\n            _this13.$jsImports.push(importDesc);\n          } else {\n            moduleImports.push(importDesc);\n          }\n        };\n\n        for (var i = 0; i < meta.object.$imports.length; ++i) {\n          loadImport(meta.object.$imports[i]);\n        }\n        QmlWeb.loadImports(_this13, moduleImports);\n        if (_this13.$context) {\n          _this13.finalizeImports(_this13.$context);\n        }\n      })();\n    }\n\n    /* If this Component does not have any imports, it is likely one that was\n     * created within another Component file. It should inherit the\n     * importContextId of the Component file it was created within. */\n    if (this.importContextId === undefined) {\n      this.importContextId = meta.context.importContextId;\n    }\n  }\n\n  _createClass(QMLComponent, [{\n    key: \"finalizeImports\",\n    value: function finalizeImports($context) {\n      var engine = QmlWeb.engine;\n      for (var i = 0; i < this.$jsImports.length; ++i) {\n        var importDesc = this.$jsImports[i];\n        var js = engine.loadJS(engine.$resolvePath(importDesc[1]));\n\n        if (!js) {\n          console.log(\"Component.finalizeImports: failed to import JavaScript\", importDesc[1]);\n          continue;\n        }\n\n        if (importDesc[3] !== \"\") {\n          $context[importDesc[3]] = {};\n          QmlWeb.importJavascriptInContext(js, $context[importDesc[3]]);\n        } else {\n          QmlWeb.importJavascriptInContext(js, $context);\n        }\n      }\n    }\n  }, {\n    key: \"$createObject\",\n    value: function $createObject(parent) {\n      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.$context;\n\n      var engine = QmlWeb.engine;\n      var oldState = engine.operationState;\n      engine.operationState = QmlWeb.QMLOperationState.Init;\n      // change base path to current component base path\n      var bp = engine.$basePath;\n      engine.$basePath = this.$basePath ? this.$basePath : engine.$basePath;\n\n      var newContext = context ? Object.create(context) : new QMLContext();\n\n      if (this.importContextId !== undefined) {\n        newContext.importContextId = this.importContextId;\n      }\n\n      var item = QmlWeb.construct({\n        object: this.$metaObject,\n        parent: parent,\n        context: newContext,\n        isComponentRoot: true\n      });\n\n      Object.keys(properties).forEach(function (propname) {\n        item[propname] = properties.propname;\n      });\n\n      // change base path back\n      // TODO looks a bit hacky\n      engine.$basePath = bp;\n\n      engine.operationState = oldState;\n      return item;\n    }\n  }, {\n    key: \"createObject\",\n    value: function createObject(parent) {\n      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var item = this.$createObject(parent, properties);\n      var QMLItem = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Item\");\n\n      if (item instanceof QMLItem) {\n        item.$properties.parent.set(parent, QmlWeb.QMLProperty.ReasonInit);\n      }\n\n      return item;\n    }\n  }], [{\n    key: \"getAttachedObject\",\n    value: function getAttachedObject() {\n      if (!this.$Component) {\n        this.$Component = new QmlWeb.QObject(this);\n        this.$Component.completed = QmlWeb.Signal.signal([]);\n        QmlWeb.engine.completedSignals.push(this.$Component.completed);\n\n        this.$Component.destruction = QmlWeb.Signal.signal([]);\n      }\n      return this.$Component;\n    }\n  }]);\n\n  return QMLComponent;\n}();\n\nQmlWeb.registerQmlType({\n  global: true,\n  module: \"QtQml\",\n  name: \"Component\",\n  versions: /.*/,\n  baseClass: \"QtObject\",\n  constructor: QMLComponent\n});\n\nQmlWeb.registerQmlType({\n  module: \"QtQml\",\n  name: \"Connections\",\n  versions: /.*/,\n  baseClass: \"QtObject\",\n  properties: {\n    target: \"QtObject\",\n    ignoreUnknownSignals: \"bool\"\n  }\n}, function () {\n  function _class8(meta) {\n    _classCallCheck(this, _class8);\n\n    QmlWeb.callSuper(this, meta);\n    this.target = this.$parent;\n    this.$connections = {};\n\n    this.$old_target = this.target;\n    this.targetChanged.connect(this, this.$onTargetChanged);\n    this.Component.completed.connect(this, this.Component$onCompleted);\n  }\n\n  _createClass(_class8, [{\n    key: \"$onTargetChanged\",\n    value: function $onTargetChanged() {\n      this.$reconnectTarget();\n    }\n  }, {\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.$reconnectTarget();\n    }\n  }, {\n    key: \"$reconnectTarget\",\n    value: function $reconnectTarget() {\n      var old_target = this.$old_target;\n      for (var i in this.$connections) {\n        var c = this.$connections[i];\n        if (c._currentConnection && old_target && old_target[i] && typeof old_target[i].disconnect === \"function\") {\n          old_target[i].disconnect(c._currentConnection);\n        }\n        if (this.target) {\n          c._currentConnection = QmlWeb.connectSignal(this.target, i, c.value, c.objectScope, c.componentScope);\n        }\n      }\n      this.$old_target = this.target;\n    }\n  }, {\n    key: \"$setCustomSlot\",\n    value: function $setCustomSlot(propName, value, objectScope, componentScope) {\n      this.$connections[propName] = { value: value, objectScope: objectScope, componentScope: componentScope };\n    }\n  }]);\n\n  return _class8;\n}());\n\n// Base object for all qml elements\n\nQmlWeb.registerQmlType({\n  module: \"QtQml\",\n  name: \"QtObject\",\n  versions: /.*/\n}, function (_QmlWeb$QObject2) {\n  _inherits(_class9, _QmlWeb$QObject2);\n\n  function _class9(meta) {\n    _classCallCheck(this, _class9);\n\n    var _this14 = _possibleConstructorReturn(this, (_class9.__proto__ || Object.getPrototypeOf(_class9)).call(this, meta.parent));\n\n    _this14.$isComponentRoot = meta.isComponentRoot;\n    _this14.$context = meta.context;\n\n    // Component get own properties\n    _this14.$attributes = [];\n    for (var key in meta.object) {\n      if (!meta.object.hasOwnProperty(key) || !meta.object[key]) {\n        continue;\n      }\n      var name = meta.object[key].__proto__.constructor.name;\n      if (name === \"QMLPropertyDefinition\" || name === \"QMLAliasDefinition\") {\n        _this14.$attributes.push(key);\n      }\n    }\n\n    var Signal = QmlWeb.Signal;\n\n    _this14.Keys = new QmlWeb.QObject(_this14);\n    _this14.Keys.asteriskPresed = Signal.signal();\n    _this14.Keys.backPressed = Signal.signal();\n    _this14.Keys.backtabPressed = Signal.signal();\n    _this14.Keys.callPressed = Signal.signal();\n    _this14.Keys.cancelPressed = Signal.signal();\n    _this14.Keys.deletePressed = Signal.signal();\n    for (var i = 0; i < 10; ++i) {\n      _this14.Keys[\"digit\" + i + \"Pressed\"] = Signal.signal();\n    }\n    _this14.Keys.escapePressed = Signal.signal();\n    _this14.Keys.flipPressed = Signal.signal();\n    _this14.Keys.hangupPressed = Signal.signal();\n    _this14.Keys.leftPressed = Signal.signal();\n    _this14.Keys.menuPressed = Signal.signal();\n    _this14.Keys.noPressed = Signal.signal();\n    _this14.Keys.pressed = Signal.signal();\n    _this14.Keys.released = Signal.signal();\n    _this14.Keys.returnPressed = Signal.signal();\n    _this14.Keys.rightPressed = Signal.signal();\n    _this14.Keys.selectPressed = Signal.signal();\n    _this14.Keys.spacePressed = Signal.signal();\n    _this14.Keys.tabPressed = Signal.signal();\n    _this14.Keys.upPressed = Signal.signal();\n    _this14.Keys.volumeDownPressed = Signal.signal();\n    _this14.Keys.volumeUpPressed = Signal.signal();\n    _this14.Keys.yesPressed = Signal.signal();\n    return _this14;\n  }\n\n  _createClass(_class9, [{\n    key: \"getAttributes\",\n    value: function getAttributes() {\n      return this.$attributes;\n    }\n  }]);\n\n  return _class9;\n}(QmlWeb.QObject));\n\nQmlWeb.registerQmlType({\n  module: \"QtQml\",\n  name: \"Timer\",\n  versions: /.*/,\n  baseClass: \"QtObject\",\n  properties: {\n    interval: { type: \"int\", initialValue: 1000 },\n    parent: { type: \"QtObject\", readOnly: true },\n    repeat: \"bool\",\n    running: \"bool\",\n    triggeredOnStart: \"bool\"\n  },\n  signals: {\n    triggered: []\n  }\n}, function () {\n  function _class10(meta) {\n    var _this15 = this;\n\n    _classCallCheck(this, _class10);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$properties.parent.set(this.$parent, QmlWeb.QMLProperty.ReasonInit);\n\n    /* This ensures that if the user toggles the \"running\" property manually,\n     * the timer will trigger. */\n    this.runningChanged.connect(this, this.$onRunningChanged);\n\n    QmlWeb.engine.$addTicker(function () {\n      return _this15.$ticker.apply(_this15, arguments);\n    });\n\n    QmlWeb.engine.$registerStart(function () {\n      if (_this15.running) {\n        _this15.restart();\n      }\n    });\n\n    QmlWeb.engine.$registerStop(function () {\n      return _this15.stop();\n    });\n  }\n\n  _createClass(_class10, [{\n    key: \"start\",\n    value: function start() {\n      this.running = true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.running = false;\n    }\n  }, {\n    key: \"restart\",\n    value: function restart() {\n      this.stop();\n      this.start();\n    }\n  }, {\n    key: \"$ticker\",\n    value: function $ticker(now) {\n      if (!this.running) return;\n      if (now - this.$prevTrigger >= this.interval) {\n        this.$prevTrigger = now;\n        this.$trigger();\n      }\n    }\n  }, {\n    key: \"$onRunningChanged\",\n    value: function $onRunningChanged() {\n      if (this.running) {\n        this.$prevTrigger = Date.now();\n        if (this.triggeredOnStart) {\n          this.$trigger();\n        }\n      }\n    }\n  }, {\n    key: \"$trigger\",\n    value: function $trigger() {\n      if (!this.repeat) {\n        // We set the value directly in order to be able to emit the\n        // runningChanged signal after triggered, like Qt does it.\n        this.$properties.running.val = false;\n      }\n\n      // Trigger this.\n      this.triggered();\n\n      if (!this.repeat) {\n        // Emit changed signal manually after setting the value manually above.\n        this.runningChanged();\n      }\n    }\n  }]);\n\n  return _class10;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick.Controls\",\n  name: \"Button\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    text: \"string\",\n    enabled: { type: \"bool\", initialValue: true }\n  },\n  signals: {\n    clicked: []\n  }\n}, function () {\n  function _class11(meta) {\n    var _this16 = this;\n\n    _classCallCheck(this, _class11);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n    this.textChanged.connect(this, this.$onTextChanged);\n    this.enabledChanged.connect(this, this.$onEnabledChanged);\n\n    var button = this.impl = document.createElement(\"button\");\n    button.style.pointerEvents = \"auto\";\n    this.dom.appendChild(button);\n\n    button.onclick = function () {\n      _this16.clicked();\n    };\n  }\n\n  _createClass(_class11, [{\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.implicitWidth = this.impl.offsetWidth;\n      this.implicitHeight = this.impl.offsetHeight;\n    }\n  }, {\n    key: \"$onTextChanged\",\n    value: function $onTextChanged(newVal) {\n      this.impl.textContent = newVal;\n      //TODO: Replace those statically sized borders\n      this.implicitWidth = this.impl.offsetWidth;\n      this.implicitHeight = this.impl.offsetHeight;\n    }\n  }, {\n    key: \"$onEnabledChanged\",\n    value: function $onEnabledChanged(newVal) {\n      this.impl.disabled = !newVal;\n    }\n  }]);\n\n  return _class11;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick.Controls\",\n  name: \"CheckBox\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    text: \"string\",\n    checked: \"bool\",\n    color: \"color\"\n  }\n}, function () {\n  function _class12(meta) {\n    var _this17 = this;\n\n    _classCallCheck(this, _class12);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.impl = document.createElement(\"label\");\n    this.impl.style.pointerEvents = \"auto\";\n\n    var checkbox = document.createElement(\"input\");\n    checkbox.type = \"checkbox\";\n    checkbox.style.verticalAlign = \"text-bottom\";\n    checkbox.addEventListener(\"change\", function () {\n      _this17.checked = checkbox.checked;\n    });\n    this.impl.appendChild(checkbox);\n\n    var span = document.createElement(\"span\");\n    this.impl.appendChild(span);\n\n    this.dom.appendChild(this.impl);\n\n    var QMLFont = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Font\");\n    this.font = new QMLFont(this);\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n    this.textChanged.connect(this, this.$onTextChanged);\n    this.colorChanged.connect(this, this.$onColorChanged);\n    this.checkedChanged.connect(this, this.$onCheckedChanged);\n  }\n\n  _createClass(_class12, [{\n    key: \"$onTextChanged\",\n    value: function $onTextChanged(newVal) {\n      this.impl.children[1].innerHTML = newVal;\n      this.implicitHeight = this.impl.offsetHeight;\n      this.implicitWidth = this.impl.offsetWidth > 0 ? this.impl.offsetWidth + 4 : 0;\n    }\n  }, {\n    key: \"$onColorChanged\",\n    value: function $onColorChanged(newVal) {\n      this.impl.children[1].style.color = new QmlWeb.QColor(newVal);\n    }\n  }, {\n    key: \"$onCheckedChanged\",\n    value: function $onCheckedChanged() {\n      this.impl.children[0].checked = this.checked;\n    }\n  }, {\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.implicitHeight = this.impl.offsetHeight;\n      this.implicitWidth = this.impl.offsetWidth > 0 ? this.impl.offsetWidth + 4 : 0;\n    }\n  }]);\n\n  return _class12;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick.Controls\",\n  name: \"ComboBox\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    count: \"int\",\n    currentIndex: \"int\",\n    currentText: \"string\",\n    menu: { type: \"array\", initialValue: [] },\n    model: { type: \"array\", initialValue: [] },\n    pressed: \"bool\"\n  },\n  signals: {\n    accepted: [],\n    activated: [{ type: \"int\", name: \"index\" }]\n  }\n}, function () {\n  function _class13(meta) {\n    var _this18 = this;\n\n    _classCallCheck(this, _class13);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.dom.style.pointerEvents = \"auto\";\n    this.name = \"QMLComboBox\";\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n    this.modelChanged.connect(this, this.$onModelChanged);\n\n    this.dom.onclick = function () {\n      var index = _this18.dom.firstChild.selectedIndex;\n      _this18.currentIndex = index;\n      _this18.currentText = _this18.model[index];\n      _this18.accepted();\n      _this18.activated(index);\n    };\n  }\n\n  _createClass(_class13, [{\n    key: \"find\",\n    value: function find(text) {\n      return this.model.indexOf(text);\n    }\n  }, {\n    key: \"selectAll\",\n    value: function selectAll() {\n      // TODO\n    }\n  }, {\n    key: \"textAt\",\n    value: function textAt(index) {\n      return this.model[index];\n    }\n  }, {\n    key: \"$updateImpl\",\n    value: function $updateImpl() {\n      this.currentIndex = 0;\n      this.count = this.model.length;\n      var entries = [];\n      for (var i = 0; i < this.count; i++) {\n        var elt = this.model[i];\n        //if (elt instanceof Array) { // TODO - optgroups? update model !\n        //    var count_i = elt.length;\n        //    for (var j = 0; j < count_i; j++)\n        //        html += \"<option>\" + elt[j] + \"</option>\";\n        //}\n        //else\n        entries.push(\"<option>\" + elt + \"</option>\");\n      }\n      // TODO: remove innerHTML, port to DOM\n      this.dom.innerHTML = \"<select>\" + entries.join(\"\") + \"</select>\";\n      this.impl = this.dom.firstChild;\n    }\n  }, {\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.$updateImpl();\n      this.implicitWidth = this.impl.offsetWidth;\n      this.implicitHeight = this.impl.offsetHeight;\n    }\n  }, {\n    key: \"$onModelChanged\",\n    value: function $onModelChanged() {\n      this.$updateImpl();\n    }\n  }]);\n\n  return _class13;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick.Controls\",\n  name: \"ScrollView\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    contentItem: \"Item\",\n    flickableItem: \"Item\", // TODO  0) implement it  1) make it read-only\n    viewport: \"Item\", // TODO\n    frameVisible: \"bool\",\n    highlightOnFocus: \"bool\", // TODO test\n    verticalScrollBarPolicy: \"enum\",\n    horizontalScrollBarPolicy: \"enum\",\n    style: \"Component\" // TODO\n  },\n  defaultProperty: \"contentItem\"\n}, function () {\n  function _class14(meta) {\n    _classCallCheck(this, _class14);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.css.pointerEvents = \"auto\";\n    this.setupFocusOnDom(this.dom);\n\n    this.contentItemChanged.connect(this, this.$onContentItemChanged);\n    this.flickableItemChanged.connect(this, this.$onFlickableItemChanged);\n    this.viewportChanged.connect(this, this.$onViewportChanged);\n    this.frameVisibleChanged.connect(this, this.$onFrameVisibleChanged);\n    this.highlightOnFocusChanged.connect(this, this.$onHighlightOnFocusChanged);\n    this.horizontalScrollBarPolicyChanged.connect(this, this.$onHorizontalScrollBarPolicyChanged);\n    this.verticalScrollBarPolicyChanged.connect(this, this.$onVerticalScrollBarPolicyChanged);\n    this.styleChanged.connect(this, this.$onStyleChanged);\n    this.childrenChanged.connect(this, this.$onChildrenChanged);\n    this.focusChanged.connect(this, this.$onFocusChanged);\n\n    this.width = this.implicitWidth = 240; // default QML ScrollView width\n    this.height = this.implicitHeight = 150; // default QML ScrollView height\n    this.width = this.implicitWidth;\n    this.height = this.implicitHeight;\n\n    var Qt = QmlWeb.Qt;\n    this.contentItem = undefined;\n    this.flickableItem = undefined;\n    this.viewport = undefined;\n    this.frameVisible = false;\n    this.highlightOnFocus = false;\n    this.verticalScrollBarPolicy = Qt.ScrollBarAsNeeded;\n    this.horizontalScrollBarPolicy = Qt.ScrollBarAsNeeded;\n    this.style = undefined;\n  }\n\n  _createClass(_class14, [{\n    key: \"$onContentItemChanged\",\n    value: function $onContentItemChanged(newItem) {\n      if ((typeof newItem === \"undefined\" ? \"undefined\" : _typeof(newItem)) !== undefined) {\n        newItem.parent = this;\n      }\n    }\n  }, {\n    key: \"$onFlickableItemChanged\",\n    value: function $onFlickableItemChanged() {}\n  }, {\n    key: \"$onHighlightOnFocusChanged\",\n    value: function $onHighlightOnFocusChanged() {}\n  }, {\n    key: \"$onViewportChanged\",\n    value: function $onViewportChanged() {}\n  }, {\n    key: \"$onFocusChanged\",\n    value: function $onFocusChanged(focus) {\n      this.css.outline = this.highlight && focus ? \"outline: lightblue solid 2px;\" : \"\";\n    }\n  }, {\n    key: \"$onFrameVisibleChanged\",\n    value: function $onFrameVisibleChanged(visible) {\n      this.css.border = visible ? \"1px solid gray\" : \"hidden\";\n    }\n  }, {\n    key: \"$onHorizontalScrollBarPolicyChanged\",\n    value: function $onHorizontalScrollBarPolicyChanged(newPolicy) {\n      this.css.overflowX = this.$scrollBarPolicyToCssOverflow(newPolicy);\n    }\n  }, {\n    key: \"$onVerticalScrollBarPolicyChanged\",\n    value: function $onVerticalScrollBarPolicyChanged(newPolicy) {\n      this.css.overflowY = this.$scrollBarPolicyToCssOverflow(newPolicy);\n    }\n  }, {\n    key: \"$onStyleChanged\",\n    value: function $onStyleChanged() {}\n  }, {\n    key: \"$onChildrenChanged\",\n    value: function $onChildrenChanged() {\n      if (typeof this.contentItem === \"undefined\" && this.children.length === 1) {\n        this.contentItem = this.children[0];\n      }\n    }\n  }, {\n    key: \"$scrollBarPolicyToCssOverflow\",\n    value: function $scrollBarPolicyToCssOverflow(policy) {\n      var Qt = QmlWeb.Qt;\n      switch (policy) {\n        case Qt.ScrollBarAsNeeded:\n          return \"auto\";\n        case Qt.ScrollBarAlwaysOff:\n          return \"hidden\";\n        case Qt.ScrollBarAlwaysOn:\n          return \"scroll\";\n      }\n      return \"auto\";\n    }\n  }]);\n\n  return _class14;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick.Controls\",\n  name: \"TextArea\",\n  versions: /.*/,\n  baseClass: \"QtQuick.TextEdit\"\n}, function () {\n  function _class15(meta) {\n    _classCallCheck(this, _class15);\n\n    QmlWeb.callSuper(this, meta);\n    var textarea = this.impl;\n    textarea.style.padding = \"5px\";\n    textarea.style.borderWidth = \"1px\";\n    textarea.style.backgroundColor = \"#fff\";\n  }\n\n  return _class15;\n}());\n\n/**\n *\n * TextField is used to accept a line of text input.\n * Input constraints can be placed on a TextField item\n * (for example, through a validator or inputMask).\n * Setting echoMode to an appropriate value enables TextField\n * to be used for a password input field.\n *\n * Valid entries for echoMode and alignment are defined in TextInput.\n *\n */\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick.Controls\",\n  name: \"TextField\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  enums: {\n    TextInput: { Normal: 0, Password: 1, NoEcho: 2, PasswordEchoOnEdit: 3 }\n  },\n  properties: {\n    text: \"string\",\n    maximumLength: { type: \"int\", initialValue: -1 },\n    readOnly: \"bool\",\n    validator: \"var\",\n    echoMode: \"enum\" // TextInput.Normal\n  },\n  signals: {\n    accepted: []\n  }\n}, function () {\n  function _class16(meta) {\n    var _this19 = this;\n\n    _classCallCheck(this, _class16);\n\n    QmlWeb.callSuper(this, meta);\n\n    var QMLFont = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Font\");\n    this.font = new QMLFont(this);\n\n    var input = this.impl = document.createElement(\"input\");\n    input.type = \"text\";\n    input.disabled = true;\n    input.style.pointerEvents = \"auto\";\n    input.style.margin = \"0\";\n    input.style.width = \"100%\";\n    this.dom.appendChild(input);\n    this.setupFocusOnDom(input);\n    input.disabled = false;\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n    this.textChanged.connect(this, this.$onTextChanged);\n    this.echoModeChanged.connect(this, this.$onEchoModeChanged);\n    this.maximumLengthChanged.connect(this, this.$onMaximumLengthChanged);\n    this.readOnlyChanged.connect(this, this.$onReadOnlyChanged);\n    this.Keys.pressed.connect(this, this.Keys$onPressed);\n\n    this.impl.addEventListener(\"input\", function () {\n      return _this19.$updateValue();\n    });\n  }\n\n  _createClass(_class16, [{\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.implicitWidth = this.impl.offsetWidth;\n      this.implicitHeight = this.impl.offsetHeight;\n    }\n  }, {\n    key: \"$onTextChanged\",\n    value: function $onTextChanged(newVal) {\n      // See TextInput for comments\n      if (this.impl.value !== newVal) {\n        this.impl.value = newVal;\n      }\n    }\n  }, {\n    key: \"$onEchoModeChanged\",\n    value: function $onEchoModeChanged(newVal) {\n      var TextInput = this.TextInput;\n      var input = this.impl;\n      switch (newVal) {\n        case TextInput.Normal:\n          input.type = \"text\";\n          break;\n        case TextInput.Password:\n          input.type = \"password\";\n          break;\n        case TextInput.NoEcho:\n          // Not supported, use password, that's nearest\n          input.type = \"password\";\n          break;\n        case TextInput.PasswordEchoOnEdit:\n          // Not supported, use password, that's nearest\n          input.type = \"password\";\n          break;\n      }\n    }\n  }, {\n    key: \"$onMaximumLengthChanged\",\n    value: function $onMaximumLengthChanged(newVal) {\n      this.impl.maxLength = newVal < 0 ? null : newVal;\n    }\n  }, {\n    key: \"$onReadOnlyChanged\",\n    value: function $onReadOnlyChanged(newVal) {\n      this.impl.disabled = newVal;\n    }\n  }, {\n    key: \"Keys$onPressed\",\n    value: function Keys$onPressed(e) {\n      var Qt = QmlWeb.Qt;\n      var submit = e.key === Qt.Key_Return || e.key === Qt.Key_Enter;\n      if (submit && this.$testValidator()) {\n        this.accepted();\n        e.accepted = true;\n      }\n    }\n  }, {\n    key: \"$testValidator\",\n    value: function $testValidator() {\n      if (this.validator) {\n        return this.validator.validate(this.text);\n      }\n      return true;\n    }\n  }, {\n    key: \"$updateValue\",\n    value: function $updateValue() {\n      if (this.text !== this.impl.value) {\n        this.$canEditReadOnlyProperties = true;\n        this.text = this.impl.value;\n        this.$canEditReadOnlyProperties = false;\n      }\n    }\n  }]);\n\n  return _class16;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick.Window\",\n  name: \"Screen\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    name: \"string\",\n    orientation: \"enum\",\n    orientationUpdateMask: \"enum\",\n    primaryOrientation: \"enum\",\n    pixelDensity: \"real\",\n    devicePixelRatio: \"real\",\n    desktopAvailableHeight: \"int\",\n    desktopAvailableWidth: \"int\",\n    height: \"int\",\n    width: \"int\"\n  }\n}, function () {\n  function _class17(meta) {\n    _classCallCheck(this, _class17);\n\n    QmlWeb.callSuper(this, meta);\n\n    // TODO: rewrite as an attached object and forbid constructing\n    this.Component.completed.connect(this, this.Component$onCompleted);\n  }\n\n  _createClass(_class17, [{\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      var Qt = QmlWeb.Qt;\n      this.desktopAvailableHeight = window.outerHeight;\n      this.desktopAvailableWidth = window.outerWidth;\n      this.devicePixelRatio = window.devicePixelRatio;\n      this.height = window.innerHeight;\n      this.name = this.name;\n      this.orientation = Qt.PrimaryOrientation;\n      this.orientationUpdateMask = 0;\n      this.pixelDensity = 100.0; // TODO\n      this.primaryOrientation = Qt.PrimaryOrientation;\n      this.width = window.innerWidth;\n    }\n  }]);\n\n  return _class17;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"AnimatedImage\",\n  versions: /.*/,\n  baseClass: \"Image\"\n}, function () {\n  function _class18(meta) {\n    _classCallCheck(this, _class18);\n\n    QmlWeb.callSuper(this, meta);\n  }\n\n  return _class18;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Animation\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  enums: {\n    Animation: { Infinite: -1 },\n    Easing: QmlWeb.Easing\n  },\n  properties: {\n    alwaysRunToEnd: \"bool\",\n    loops: { type: \"int\", initialValue: 1 },\n    paused: \"bool\",\n    running: \"bool\"\n  }\n}, function () {\n  function _class19(meta) {\n    _classCallCheck(this, _class19);\n\n    QmlWeb.callSuper(this, meta);\n  }\n\n  _createClass(_class19, [{\n    key: \"restart\",\n    value: function restart() {\n      this.stop();\n      this.start();\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.running = true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.running = false;\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.paused = true;\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.paused = false;\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      // To be overridden\n      console.log(\"Unbound method for\", this);\n    }\n  }]);\n\n  return _class19;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Behavior\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    animation: \"Animation\",\n    enabled: { type: \"bool\", initialValue: true }\n  },\n  defaultProperty: \"animation\"\n}, function () {\n  function _class20(meta) {\n    _classCallCheck(this, _class20);\n\n    QmlWeb.callSuper(this, meta);\n    this.$on = meta.object.$on;\n\n    this.animationChanged.connect(this, this.$onAnimationChanged);\n    this.enabledChanged.connect(this, this.$onEnabledChanged);\n  }\n\n  _createClass(_class20, [{\n    key: \"$onAnimationChanged\",\n    value: function $onAnimationChanged(newVal) {\n      newVal.target = this.$parent;\n      newVal.property = this.$on;\n      this.$parent.$properties[this.$on].animation = newVal;\n    }\n  }, {\n    key: \"$onEnabledChanged\",\n    value: function $onEnabledChanged(newVal) {\n      this.$parent.$properties[this.$on].animation = newVal ? this.animation : null;\n    }\n  }]);\n\n  return _class20;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"BorderImage\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  enums: {\n    BorderImage: {\n      Stretch: \"stretch\", Repeat: \"repeat\", Round: \"round\",\n      Null: 1, Ready: 2, Loading: 3, Error: 4\n    }\n  },\n  properties: {\n    source: \"url\",\n    smooth: { type: \"bool\", initialValue: true },\n    // BorderImage.Stretch\n    horizontalTileMode: { type: \"enum\", initialValue: \"stretch\" },\n    // BorderImage.Stretch\n    verticalTileMode: { type: \"enum\", initialValue: \"stretch\" },\n    progress: \"real\",\n    status: { type: \"enum\", initialValue: 1 } // BorderImage.Null\n  }\n}, function () {\n  function _class21(meta) {\n    var _this20 = this;\n\n    _classCallCheck(this, _class21);\n\n    QmlWeb.callSuper(this, meta);\n\n    var createProperty = QmlWeb.createProperty;\n    this.border = new QmlWeb.QObject(this);\n    createProperty(\"int\", this.border, \"left\");\n    createProperty(\"int\", this.border, \"right\");\n    createProperty(\"int\", this.border, \"top\");\n    createProperty(\"int\", this.border, \"bottom\");\n\n    var bg = this.impl = document.createElement(\"div\");\n    bg.style.pointerEvents = \"none\";\n    bg.style.height = \"100%\";\n    bg.style.boxSizing = \"border-box\";\n    this.dom.appendChild(bg);\n\n    this.$img = new Image();\n    this.$img.addEventListener(\"load\", function () {\n      _this20.progress = 1;\n      _this20.status = _this20.BorderImage.Ready;\n    });\n    this.$img.addEventListener(\"error\", function () {\n      _this20.status = _this20.BorderImage.Error;\n    });\n\n    this.sourceChanged.connect(this, this.$onSourceChanged);\n    this.border.leftChanged.connect(this, this.$updateBorder);\n    this.border.rightChanged.connect(this, this.$updateBorder);\n    this.border.topChanged.connect(this, this.$updateBorder);\n    this.border.bottomChanged.connect(this, this.$updateBorder);\n    this.horizontalTileModeChanged.connect(this, this.$updateBorder);\n    this.verticalTileModeChanged.connect(this, this.$updateBorder);\n    this.smoothChanged.connect(this, this.$onSmoothChanged);\n  }\n\n  _createClass(_class21, [{\n    key: \"$onSourceChanged\",\n    value: function $onSourceChanged(source) {\n      this.progress = 0;\n      this.status = this.BorderImage.Loading;\n      var style = this.impl.style;\n      var imageURL = QmlWeb.engine.$resolveImageURL(source);\n      style.OBorderImageSource = \"url(\\\"\" + imageURL + \"\\\")\";\n      style.borderImageSource = \"url(\\\"\" + imageURL + \"\\\")\";\n      this.$img.src = imageURL;\n      if (this.$img.complete) {\n        this.progress = 1;\n        this.status = this.BorderImage.Ready;\n      }\n    }\n  }, {\n    key: \"$updateBorder\",\n    value: function $updateBorder() {\n      var style = this.impl.style;\n      var _border = this.border,\n          right = _border.right,\n          left = _border.left,\n          top = _border.top,\n          bottom = _border.bottom;\n\n      var slice = top + \" \" + right + \" \" + bottom + \" \" + left + \" fill\";\n      var width = top + \"px \" + right + \"px \" + bottom + \"px \" + left + \"px\";\n      var repeat = this.horizontalTileMode + \" \" + this.verticalTileMode;\n      style.OBorderImageSlice = slice;\n      style.OBorderImageRepeat = repeat;\n      style.OBorderImageWidth = width;\n      style.borderImageSlice = slice;\n      style.borderImageRepeat = repeat;\n      style.borderImageWidth = width;\n    }\n  }, {\n    key: \"$onSmoothChanged\",\n    value: function $onSmoothChanged(val) {\n      var style = this.impl.style;\n      if (val) {\n        style.imageRendering = \"auto\";\n      } else {\n        style.imageRendering = \"-webkit-optimize-contrast\";\n        style.imageRendering = \"-moz-crisp-edges\";\n        style.imageRendering = \"crisp-edges\";\n        style.imageRendering = \"pixelated\";\n      }\n    }\n  }]);\n\n  return _class21;\n}());\n\n// TODO\n// Currently only a skeleton implementation\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Canvas\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    available: { type: \"bool\", initialValue: true },\n    canvasSize: { type: \"var\", initialValue: [0, 0] },\n    canvasWindow: { type: \"var\", initialValue: [0, 0, 0, 0] },\n    context: { type: \"var\", initialValue: {} },\n    contextType: { type: \"string\", initialValue: \"contextType\" },\n    renderStrategy: \"enum\",\n    renderTarget: \"enum\",\n    tileSize: { type: \"var\", initialValue: [0, 0] }\n  },\n  signals: {\n    imageLoaded: [],\n    paint: [{ type: \"var\", name: \"region\" }],\n    painted: []\n  }\n}, function () {\n  function _class22(meta) {\n    _classCallCheck(this, _class22);\n\n    QmlWeb.callSuper(this, meta);\n  }\n\n  _createClass(_class22, [{\n    key: \"cancelRequestAnimationFrame\",\n    value: function cancelRequestAnimationFrame() /*handle*/{\n      return false;\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() /*context_id, ...args*/{\n      return {};\n    }\n  }, {\n    key: \"isImageError\",\n    value: function isImageError() /*image*/{\n      return true;\n    }\n  }, {\n    key: \"isImageLoaded\",\n    value: function isImageLoaded() /*image*/{\n      return false;\n    }\n  }, {\n    key: \"isImageLoading\",\n    value: function isImageLoading() /*image*/{\n      return false;\n    }\n  }, {\n    key: \"loadImage\",\n    value: function loadImage(image) {\n      //loadImageAsync(image);\n      if (this.isImageLoaded(image)) {\n        this.imageLoaded();\n      }\n    }\n  }, {\n    key: \"markDirty\",\n    value: function markDirty(area) {\n      // if dirty\n      this.paint(area);\n    }\n  }, {\n    key: \"requestAnimationFrame\",\n    value: function requestAnimationFrame() /*callback*/{\n      return 0;\n    }\n  }, {\n    key: \"requestPaint\",\n    value: function requestPaint() {}\n  }, {\n    key: \"save\",\n    value: function save() /*file_name*/{\n      return false;\n    }\n  }, {\n    key: \"toDataURL\",\n    value: function toDataURL() /*mime_type*/{\n      return \"\";\n    }\n  }, {\n    key: \"unloadImage\",\n    value: function unloadImage() /*image*/{}\n  }]);\n\n  return _class22;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Column\",\n  versions: /.*/,\n  baseClass: \"Positioner\"\n}, function () {\n  function _class23(meta) {\n    _classCallCheck(this, _class23);\n\n    QmlWeb.callSuper(this, meta);\n  }\n\n  _createClass(_class23, [{\n    key: \"layoutChildren\",\n    value: function layoutChildren() {\n      var curPos = 0;\n      var maxWidth = 0;\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        if (!child.visible || !child.width || !child.height) {\n          continue;\n        }\n        maxWidth = child.width > maxWidth ? child.width : maxWidth;\n        child.y = curPos;\n        curPos += child.height + this.spacing;\n      }\n      this.implicitWidth = maxWidth;\n      this.implicitHeight = curPos - this.spacing;\n      // We want no spacing at the bottom side\n    }\n  }]);\n\n  return _class23;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"DoubleValidator\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  enums: {\n    DoubleValidator: { StandardNotation: 1, ScientificNotation: 2 }\n  },\n  properties: {\n    bottom: { type: \"real\", initialValue: -Infinity },\n    top: { type: \"real\", initialValue: Infinity },\n    decimals: { type: \"int\", initialValue: 1000 },\n    // DoubleValidator.ScientificNotation\n    notation: { type: \"enum\", initialValue: 2 }\n  }\n}, function () {\n  function _class24(meta) {\n    _classCallCheck(this, _class24);\n\n    QmlWeb.callSuper(this, meta);\n    this.$standardRegExp = /^(-|\\+)?\\s*[0-9]+(\\.[0-9]+)?$/;\n    this.$scientificRegExp = /^(-|\\+)?\\s*[0-9]+(\\.[0-9]+)?(E(-|\\+)?[0-9]+)?$/;\n  }\n\n  _createClass(_class24, [{\n    key: \"getRegExpForNotation\",\n    value: function getRegExpForNotation(notation) {\n      switch (notation) {\n        case this.DoubleValidator.ScientificNotation:\n          return this.$scientificRegExp;\n        case this.DoubleValidator.StandardNotation:\n          return this.$standardRegExp;\n      }\n      return null;\n    }\n  }, {\n    key: \"$getDecimalsForNumber\",\n    value: function $getDecimalsForNumber(number) {\n      if (Math.round(number) === number) {\n        return 0;\n      }\n      var str = \"\" + number;\n      return (/\\d*$/.exec(str)[0].length\n      );\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(string) {\n      var regExp = this.getRegExpForNotation(this.notation);\n      if (!regExp.test(string.trim())) {\n        return false;\n      }\n      var value = parseFloat(string);\n      return this.bottom <= value && this.top >= value && this.$getDecimalsForNumber(value) <= this.decimals;\n    }\n  }]);\n\n  return _class24;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Flow\",\n  versions: /.*/,\n  baseClass: \"Positioner\",\n  enums: {\n    Flow: { LeftToRight: 0, TopToBottom: 1 }\n  },\n  properties: {\n    flow: \"enum\", // Flow.LeftToRight\n    layoutDirection: \"enum\" // Flow.LeftToRight\n  }\n}, function () {\n  function _class25(meta) {\n    _classCallCheck(this, _class25);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.flowChanged.connect(this, this.layoutChildren);\n    this.layoutDirectionChanged.connect(this, this.layoutChildren);\n    this.widthChanged.connect(this, this.layoutChildren);\n    this.heightChanged.connect(this, this.layoutChildren);\n    this.layoutChildren();\n  }\n\n  _createClass(_class25, [{\n    key: \"layoutChildren\",\n    value: function layoutChildren() {\n      if (this.flow === undefined) {\n        // Flow has not been fully initialized yet\n        return;\n      }\n\n      var curHPos = 0;\n      var curVPos = 0;\n      var rowSize = 0;\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        if (!child.visible || !child.width || !child.height) {\n          continue;\n        }\n\n        if (this.flow === this.Flow.LeftToRight) {\n          if (!this.$isUsingImplicitWidth && curHPos + child.width > this.width) {\n            curHPos = 0;\n            curVPos += rowSize + this.spacing;\n            rowSize = 0;\n          }\n          rowSize = child.height > rowSize ? child.height : rowSize;\n          child.x = this.layoutDirection === this.Flow.TopToBottom ? this.width - curHPos - child.width : curHPos;\n          child.y = curVPos;\n          curHPos += child.width + this.spacing;\n        } else {\n          // Flow.TopToBottom\n          if (!this.$isUsingImplicitHeight && curVPos + child.height > this.height) {\n            curVPos = 0;\n            curHPos += rowSize + this.spacing;\n            rowSize = 0;\n          }\n          rowSize = child.width > rowSize ? child.width : rowSize;\n          child.x = this.layoutDirection === this.Flow.TopToBottom ? this.width - curHPos - child.width : curHPos;\n          child.y = curVPos;\n          curVPos += child.height + this.spacing;\n        }\n      }\n\n      if (this.flow === this.Flow.LeftToRight) {\n        this.implicitWidth = curHPos - this.spacing;\n        this.implicitHeight = curVPos + rowSize;\n      } else {\n        // Flow.TopToBottom\n        this.implicitWidth = curHPos + rowSize;\n        this.implicitHeight = curVPos - this.spacing;\n      }\n    }\n  }]);\n\n  return _class25;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Font\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\"\n}, function (_QmlWeb$QObject3) {\n  _inherits(_class26, _QmlWeb$QObject3);\n\n  function _class26(parent) {\n    _classCallCheck(this, _class26);\n\n    // TODO: callSuper support?\n    var _this21 = _possibleConstructorReturn(this, (_class26.__proto__ || Object.getPrototypeOf(_class26)).call(this, parent));\n\n    _this21.Font = global.Font; // TODO: make a sane enum\n\n    var Font = _this21.Font;\n    var createProperty = QmlWeb.createProperty;\n\n    createProperty(\"bool\", _this21, \"bold\");\n    createProperty(\"enum\", _this21, \"capitalization\", { initialValue: Font.MixedCase });\n    createProperty(\"string\", _this21, \"family\", { initialValue: \"sans-serif\" });\n    createProperty(\"bool\", _this21, \"italic\");\n    createProperty(\"real\", _this21, \"letterSpacing\");\n    createProperty(\"int\", _this21, \"pixelSize\", { initialValue: 13 });\n    createProperty(\"real\", _this21, \"pointSize\", { initialValue: 10 });\n    createProperty(\"bool\", _this21, \"strikeout\");\n    createProperty(\"bool\", _this21, \"underline\");\n    createProperty(\"enum\", _this21, \"weight\", { initialValue: Font.Normal });\n    createProperty(\"real\", _this21, \"wordSpacing\");\n\n    _this21.$sizeLock = false;\n\n    _this21.boldChanged.connect(_this21, _this21.$onBoldChanged);\n    _this21.capitalizationChanged.connect(_this21, _this21.$onCapitalizationChanged);\n    _this21.familyChanged.connect(_this21, _this21.$onFamilyChanged);\n    _this21.italicChanged.connect(_this21, _this21.$onItalicChanged);\n    _this21.letterSpacingChanged.connect(_this21, _this21.$onLetterSpacingChanged);\n    _this21.pixelSizeChanged.connect(_this21, _this21.$onPixelSizeChanged);\n    _this21.pointSizeChanged.connect(_this21, _this21.$onPointSizeChanged);\n    _this21.strikeoutChanged.connect(_this21, _this21.$onStrikeoutChanged);\n    _this21.underlineChanged.connect(_this21, _this21.$onUnderlineChanged);\n    _this21.weightChanged.connect(_this21, _this21.$onWidthChanged);\n    _this21.wordSpacingChanged.connect(_this21, _this21.$onWordSpacingChanged);\n    return _this21;\n  }\n\n  _createClass(_class26, [{\n    key: \"$onBoldChanged\",\n    value: function $onBoldChanged(newVal) {\n      var Font = this.Font;\n      this.weight = newVal ? Font.Bold : Font.Normal;\n    }\n  }, {\n    key: \"$onCapitalizationChanged\",\n    value: function $onCapitalizationChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.fontVariant = newVal === this.Font.SmallCaps ? \"small-caps\" : \"none\";\n      style.textTransform = this.$capitalizationToTextTransform(newVal);\n    }\n  }, {\n    key: \"$onFamilyChanged\",\n    value: function $onFamilyChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.fontFamily = newVal;\n    }\n  }, {\n    key: \"$onItalicChanged\",\n    value: function $onItalicChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.fontStyle = newVal ? \"italic\" : \"normal\";\n    }\n  }, {\n    key: \"$onLetterSpacingChanged\",\n    value: function $onLetterSpacingChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.letterSpacing = newVal !== undefined ? newVal + \"px\" : \"\";\n    }\n  }, {\n    key: \"$onPixelSizeChanged\",\n    value: function $onPixelSizeChanged(newVal) {\n      if (!this.$sizeLock) {\n        this.pointSize = newVal * 0.75;\n      }\n      var val = newVal + \"px\";\n      this.$parent.dom.style.fontSize = val;\n      this.$parent.dom.firstChild.style.fontSize = val;\n    }\n  }, {\n    key: \"$onPointSizeChanged\",\n    value: function $onPointSizeChanged(newVal) {\n      this.$sizeLock = true;\n      this.pixelSize = Math.round(newVal / 0.75);\n      this.$sizeLock = false;\n    }\n  }, {\n    key: \"$onStrikeoutChanged\",\n    value: function $onStrikeoutChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.textDecoration = newVal ? \"line-through\" : this.$parent.font.underline ? \"underline\" : \"none\";\n    }\n  }, {\n    key: \"$onUnderlineChanged\",\n    value: function $onUnderlineChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.textDecoration = this.$parent.font.strikeout ? \"line-through\" : newVal ? \"underline\" : \"none\";\n    }\n  }, {\n    key: \"$onWidthChanged\",\n    value: function $onWidthChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.fontWeight = this.$weightToCss(newVal);\n    }\n  }, {\n    key: \"$onWordSpacingChanged\",\n    value: function $onWordSpacingChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.wordSpacing = newVal !== undefined ? newVal + \"px\" : \"\";\n    }\n  }, {\n    key: \"$weightToCss\",\n    value: function $weightToCss(weight) {\n      var Font = this.Font;\n      switch (weight) {\n        case Font.Thin:\n          return \"100\";\n        case Font.ExtraLight:\n          return \"200\";\n        case Font.Light:\n          return \"300\";\n        case Font.Normal:\n          return \"400\";\n        case Font.Medium:\n          return \"500\";\n        case Font.DemiBold:\n          return \"600\";\n        case Font.Bold:\n          return \"700\";\n        case Font.ExtraBold:\n          return \"800\";\n        case Font.Black:\n          return \"900\";\n      }\n      return \"normal\";\n    }\n  }, {\n    key: \"$capitalizationToTextTransform\",\n    value: function $capitalizationToTextTransform(capitalization) {\n      var Font = this.Font;\n      switch (capitalization) {\n        case Font.AllUppercase:\n          return \"uppercase\";\n        case Font.AllLowercase:\n          return \"lowercase\";\n        case Font.Capitalize:\n          return \"capitalize\";\n      }\n      return \"none\";\n    }\n  }]);\n\n  return _class26;\n}(QmlWeb.QObject));\n\nglobal.Font = {\n  // Capitalization\n  MixedCase: 0,\n  AllUppercase: 1,\n  AllLowercase: 2,\n  SmallCaps: 3,\n  Capitalize: 4,\n  // Weight\n  Thin: 0,\n  ExtraLight: 12,\n  Light: 25,\n  Normal: 50,\n  Medium: 57,\n  DemiBold: 63,\n  Bold: 75,\n  ExtraBold: 81,\n  Black: 87\n};\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"FontLoader\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  enums: {\n    FontLoader: { Null: 0, Ready: 1, Loading: 2, Error: 3 }\n  },\n  properties: {\n    name: \"string\",\n    source: \"url\",\n    status: \"enum\" // FontLoader.Null\n  }\n}, function () {\n  function _class27(meta) {\n    _classCallCheck(this, _class27);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$domStyle = document.createElement(\"style\");\n    this.$lastName = \"\";\n    this.$inTouchName = false;\n\n    /*\n      Maximum timeout is the maximum time for a font to load. If font isn't\n      loaded in this time, the status is set to Error.\n      For both cases (with and without FontLoader.js) if the font takes more\n      than the maximum timeout to load, dimensions recalculations for elements\n      that are using this font will not be triggered or will have no effect.\n       FontLoader.js uses only the last timeout. The state and name properties\n      are set immediately when the font loads. If the font could not be loaded,\n      the Error status will be set only when this timeout expires. If the font\n      loading takes more than the timeout, the name property is set, but the\n      status is set to Error.\n       Fallback sets the font name immediately and touches it several times to\n      trigger dimensions recalcuations. The status is set to Error and should\n      not be used.\n    */\n    // 15 seconds maximum\n    this.$timeouts = [20, 50, 100, 300, 500, 1000, 3000, 5000, 10000, 15000];\n\n    this.sourceChanged.connect(this, this.$onSourceChanged);\n    this.nameChanged.connect(this, this.$onNameChanged);\n  }\n\n  _createClass(_class27, [{\n    key: \"$loadFont\",\n    value: function $loadFont(fontName) {\n      var _this22 = this;\n\n      /* global FontLoader */\n      if (this.$lastName === fontName || this.$inTouchName) {\n        return;\n      }\n      this.$lastName = fontName;\n\n      if (!fontName) {\n        this.status = this.FontLoader.Null;\n        return;\n      }\n      this.status = this.FontLoader.Loading;\n      if (typeof FontLoader === \"function\") {\n        var fontLoader = new FontLoader([fontName], {\n          fontsLoaded: function fontsLoaded(error) {\n            if (error !== null) {\n              if (_this22.$lastName === fontName && error.notLoadedFontFamilies[0] === fontName) {\n                // Set the name for the case of font loading after the timeout.\n                _this22.name = fontName;\n                _this22.status = _this22.FontLoader.Error;\n              }\n            }\n          },\n          fontLoaded: function fontLoaded(fontFamily) {\n            if (_this22.$lastName === fontName && fontFamily === fontName) {\n              _this22.name = fontName;\n              _this22.status = _this22.FontLoader.Ready;\n            }\n          }\n        }, this.$timeouts[this.$timeouts.length - 1]);\n        // Else I get problems loading multiple fonts (FontLoader.js bug?)\n        FontLoader.testDiv = null;\n        fontLoader.loadFonts();\n      } else {\n        console.warn(\"FontLoader.js library is not loaded.\\nYou should load FontLoader.js if you want to use QtQuick FontLoader elements.\\nRefs: https://github.com/smnh/FontLoader.\");\n        // You should not rely on 'status' property without FontLoader.js.\n        this.status = this.FontLoader.Error;\n        this.name = fontName;\n        this.$cycleTouchName(fontName, 0);\n      }\n    }\n  }, {\n    key: \"$cycleTouchName\",\n    value: function $cycleTouchName(fontName, i) {\n      var _this23 = this;\n\n      if (this.$lastName !== fontName) {\n        return;\n      }\n      if (i > 0) {\n        var name = this.name;\n        this.$inTouchName = true;\n        // Calling this.nameChanged() is not enough, we have to actually change\n        // the value to flush the bindings.\n        this.name = \"sans-serif\";\n        this.name = name;\n        this.$inTouchName = false;\n      }\n      if (i < this.$timeouts.length) {\n        setTimeout(function () {\n          _this23.$cycleTouchName(fontName, i + 1);\n        }, this.$timeouts[i] - (i > 0 ? this.$timeouts[i - 1] : 0));\n      }\n    }\n  }, {\n    key: \"$onSourceChanged\",\n    value: function $onSourceChanged(font_src) {\n      var rand = Math.round(Math.random() * 1e15);\n      var fontName = \"font_\" + Date.now().toString(36) + \"_\" + rand.toString(36);\n      this.$domStyle.innerHTML = \"@font-face {\\n      font-family: \" + fontName + \";\\n      src: url('\" + font_src + \"');\\n    }\";\n      document.getElementsByTagName(\"head\")[0].appendChild(this.$domStyle);\n      this.$loadFont(fontName);\n    }\n  }, {\n    key: \"$onNameChanged\",\n    value: function $onNameChanged(fontName) {\n      this.$loadFont(fontName);\n    }\n  }]);\n\n  return _class27;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Grid\",\n  versions: /.*/,\n  baseClass: \"Positioner\",\n  enums: {\n    Grid: { LeftToRight: 0, TopToBottom: 1 }\n  },\n  properties: {\n    columns: \"int\",\n    rows: \"int\",\n    flow: \"enum\",\n    layoutDirection: \"enum\"\n  }\n}, function () {\n  function _class28(meta) {\n    _classCallCheck(this, _class28);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.columnsChanged.connect(this, this.layoutChildren);\n    this.rowsChanged.connect(this, this.layoutChildren);\n    this.flowChanged.connect(this, this.layoutChildren);\n    this.layoutDirectionChanged.connect(this, this.layoutChildren);\n    this.layoutChildren();\n  }\n\n  _createClass(_class28, [{\n    key: \"layoutChildren\",\n    value: function layoutChildren() {\n      // How many items are actually visible?\n      var visibleItems = this.$getVisibleItems();\n\n      // How many rows and columns do we need?\n\n      var _$calculateSize = this.$calculateSize(visibleItems.length),\n          _$calculateSize2 = _slicedToArray(_$calculateSize, 2),\n          c = _$calculateSize2[0],\n          r = _$calculateSize2[1];\n\n      // How big are the colums/rows?\n\n\n      var _$calculateGrid = this.$calculateGrid(visibleItems, c, r),\n          _$calculateGrid2 = _slicedToArray(_$calculateGrid, 2),\n          colWidth = _$calculateGrid2[0],\n          rowHeight = _$calculateGrid2[1];\n\n      // Do actual positioning\n      // When layoutDirection is RightToLeft we need oposite order of coumns\n\n\n      var step = this.layoutDirection === 1 ? -1 : 1;\n      var startingPoint = this.layoutDirection === 1 ? c - 1 : 0;\n      var endPoint = this.layoutDirection === 1 ? -1 : c;\n      var curHPos = 0;\n      var curVPos = 0;\n      if (this.flow === 0) {\n        for (var i = 0; i < r; i++) {\n          for (var j = startingPoint; j !== endPoint; j += step) {\n            var item = visibleItems[i * c + j];\n            if (!item) {\n              break;\n            }\n            item.x = curHPos;\n            item.y = curVPos;\n\n            curHPos += colWidth[j] + this.spacing;\n          }\n          curVPos += rowHeight[i] + this.spacing;\n          curHPos = 0;\n        }\n      } else {\n        for (var _i2 = startingPoint; _i2 !== endPoint; _i2 += step) {\n          for (var _j = 0; _j < r; _j++) {\n            var _item = visibleItems[_i2 * r + _j];\n            if (!_item) {\n              break;\n            }\n            _item.x = curHPos;\n            _item.y = curVPos;\n\n            curVPos += rowHeight[_j] + this.spacing;\n          }\n          curHPos += colWidth[_i2] + this.spacing;\n          curVPos = 0;\n        }\n      }\n\n      // Set implicit size\n      var gridWidth = -this.spacing;\n      var gridHeight = -this.spacing;\n      for (var _i3 in colWidth) {\n        gridWidth += colWidth[_i3] + this.spacing;\n      }\n      for (var _i4 in rowHeight) {\n        gridHeight += rowHeight[_i4] + this.spacing;\n      }\n      this.implicitWidth = gridWidth;\n      this.implicitHeight = gridHeight;\n    }\n  }, {\n    key: \"$getVisibleItems\",\n    value: function $getVisibleItems() {\n      return this.children.filter(function (child) {\n        return child.visible && child.width && child.height;\n      });\n    }\n  }, {\n    key: \"$calculateSize\",\n    value: function $calculateSize(length) {\n      var cols = void 0;\n      var rows = void 0;\n      if (!this.columns && !this.rows) {\n        cols = 4;\n        rows = Math.ceil(length / cols);\n      } else if (!this.columns) {\n        rows = this.rows;\n        cols = Math.ceil(length / rows);\n      } else {\n        cols = this.columns;\n        rows = Math.ceil(length / cols);\n      }\n      return [cols, rows];\n    }\n  }, {\n    key: \"$calculateGrid\",\n    value: function $calculateGrid(visibleItems, cols, rows) {\n      var colWidth = [];\n      var rowHeight = [];\n\n      if (this.flow === 0) {\n        for (var i = 0; i < rows; i++) {\n          for (var j = 0; j < cols; j++) {\n            var item = visibleItems[i * cols + j];\n            if (!item) {\n              break;\n            }\n            if (!colWidth[j] || item.width > colWidth[j]) {\n              colWidth[j] = item.width;\n            }\n            if (!rowHeight[i] || item.height > rowHeight[i]) {\n              rowHeight[i] = item.height;\n            }\n          }\n        }\n      } else {\n        for (var _i5 = 0; _i5 < cols; _i5++) {\n          for (var _j2 = 0; _j2 < rows; _j2++) {\n            var _item2 = visibleItems[_i5 * rows + _j2];\n            if (!_item2) {\n              break;\n            }\n            if (!rowHeight[_j2] || _item2.height > rowHeight[_j2]) {\n              rowHeight[_j2] = _item2.height;\n            }\n            if (!colWidth[_i5] || _item2.width > colWidth[_i5]) {\n              colWidth[_i5] = _item2.width;\n            }\n          }\n        }\n      }\n\n      return [colWidth, rowHeight];\n    }\n  }]);\n\n  return _class28;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Image\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  enums: {\n    Image: {\n      Stretch: 1, PreserveAspectFit: 2, PreserveAspectCrop: 3,\n      Tile: 4, TileVertically: 5, TileHorizontally: 6,\n\n      Null: 1, Ready: 2, Loading: 3, Error: 4\n    }\n  },\n  properties: {\n    asynchronous: { type: \"bool\", initialValue: true },\n    cache: { type: \"bool\", initialValue: true },\n    smooth: { type: \"bool\", initialValue: true },\n    fillMode: { type: \"enum\", initialValue: 1 }, // Image.Stretch\n    mirror: \"bool\",\n    progress: \"real\",\n    source: \"url\",\n    status: { type: \"enum\", initialValue: 1 } // Image.Null\n  }\n}, function () {\n  function _class29(meta) {\n    var _this24 = this;\n\n    _classCallCheck(this, _class29);\n\n    QmlWeb.callSuper(this, meta);\n\n    var createProperty = QmlWeb.createProperty;\n\n    this.sourceSize = new QmlWeb.QObject(this);\n    createProperty(\"int\", this.sourceSize, \"width\");\n    createProperty(\"int\", this.sourceSize, \"height\");\n\n    var bg = this.impl = document.createElement(\"div\");\n    bg.style.pointerEvents = \"none\";\n    bg.style.height = \"100%\";\n    this.dom.appendChild(bg);\n\n    this.$img = new Image();\n    this.$img.addEventListener(\"load\", function () {\n      var w = _this24.$img.naturalWidth;\n      var h = _this24.$img.naturalHeight;\n      _this24.sourceSize.width = w;\n      _this24.sourceSize.height = h;\n      _this24.implicitWidth = w;\n      _this24.implicitHeight = h;\n      _this24.progress = 1;\n      _this24.status = _this24.Image.Ready;\n    });\n    this.$img.addEventListener(\"error\", function () {\n      _this24.status = _this24.Image.Error;\n    });\n\n    this.sourceChanged.connect(this, this.$onSourceChanged);\n    this.mirrorChanged.connect(this, this.$onMirrorChanged);\n    this.fillModeChanged.connect(this, this.$onFillModeChanged);\n    this.smoothChanged.connect(this, this.$onSmoothChanged);\n  }\n\n  _createClass(_class29, [{\n    key: \"$updateFillMode\",\n    value: function $updateFillMode() {\n      var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.fillMode;\n\n      var style = this.impl.style;\n      switch (val) {\n        default:\n        case this.Image.Stretch:\n          style.backgroundRepeat = \"auto\";\n          style.backgroundSize = \"100% 100%\";\n          style.backgroundPosition = \"auto\";\n          break;\n        case this.Image.Tile:\n          style.backgroundRepeat = \"auto\";\n          style.backgroundSize = \"auto\";\n          style.backgroundPosition = \"center\";\n          break;\n        case this.Image.PreserveAspectFit:\n          style.backgroundRepeat = \"no-repeat\";\n          style.backgroundSize = \"contain\";\n          style.backgroundPosition = \"center\";\n          break;\n        case this.Image.PreserveAspectCrop:\n          style.backgroundRepeat = \"no-repeat\";\n          style.backgroundSize = \"cover\";\n          style.backgroundPosition = \"center\";\n          break;\n        case this.Image.TileVertically:\n          style.backgroundRepeat = \"repeat-y\";\n          style.backgroundSize = \"100% auto\";\n          style.backgroundPosition = \"auto\";\n          break;\n        case this.Image.TileHorizontally:\n          style.backgroundRepeat = \"repeat-x\";\n          style.backgroundSize = \"auto 100%\";\n          style.backgroundPosition = \"auto\";\n          break;\n      }\n    }\n  }, {\n    key: \"$onSourceChanged\",\n    value: function $onSourceChanged(source) {\n      this.progress = 0;\n      this.status = this.Image.Loading;\n      var imageURL = QmlWeb.engine.$resolveImageURL(source);\n      this.impl.style.backgroundImage = \"url(\\\"\" + imageURL + \"\\\")\";\n      this.$img.src = imageURL;\n      if (this.$img.complete) {\n        this.progress = 1;\n        this.status = this.Image.Ready;\n      }\n      this.$updateFillMode();\n    }\n  }, {\n    key: \"$onMirrorChanged\",\n    value: function $onMirrorChanged(val) {\n      var transformRule = \"scale(-1,1)\";\n      if (!val) {\n        var index = this.transform.indexOf(transformRule);\n        if (index >= 0) {\n          this.transform.splice(index, 1);\n        }\n      } else {\n        this.transform.push(transformRule);\n      }\n      this.$updateTransform();\n    }\n  }, {\n    key: \"$onFillModeChanged\",\n    value: function $onFillModeChanged(val) {\n      this.$updateFillMode(val);\n    }\n  }, {\n    key: \"$onSmoothChanged\",\n    value: function $onSmoothChanged(val) {\n      var style = this.impl.style;\n      if (val) {\n        style.imageRendering = \"auto\";\n      } else {\n        style.imageRendering = \"-webkit-optimize-contrast\";\n        style.imageRendering = \"-moz-crisp-edges\";\n        style.imageRendering = \"crisp-edges\";\n        style.imageRendering = \"pixelated\";\n      }\n    }\n  }]);\n\n  return _class29;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"IntValidator\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    bottom: { type: \"int\", initialValue: -2147483647 },\n    top: { type: \"int\", initialValue: 2147483647 }\n  }\n}, function () {\n  function _class30(meta) {\n    _classCallCheck(this, _class30);\n\n    QmlWeb.callSuper(this, meta);\n  }\n\n  _createClass(_class30, [{\n    key: \"validate\",\n    value: function validate(string) {\n      var regExp = /^(-|\\+)?\\s*[0-9]+$/;\n      var acceptable = regExp.test(string.trim());\n\n      if (acceptable) {\n        var value = parseInt(string, 10);\n        acceptable = this.bottom <= value && this.top >= value;\n      }\n      return acceptable;\n    }\n  }]);\n\n  return _class30;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Item\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    $opacity: { type: \"real\", initialValue: 1 },\n    parent: \"Item\",\n    state: \"string\",\n    states: \"list\",\n    transitions: \"list\",\n    data: \"list\",\n    children: \"list\",\n    resources: \"list\",\n    transform: \"list\",\n    x: \"real\",\n    y: \"real\",\n    z: \"real\",\n    width: \"real\",\n    height: \"real\",\n    implicitWidth: \"real\",\n    implicitHeight: \"real\",\n    left: \"real\",\n    right: \"real\",\n    top: \"real\",\n    bottom: \"real\",\n    horizontalCenter: \"real\",\n    verticalCenter: \"real\",\n    rotation: \"real\",\n    scale: { type: \"real\", initialValue: 1 },\n    opacity: { type: \"real\", initialValue: 1 },\n    visible: { type: \"bool\", initialValue: true },\n    clip: \"bool\",\n    focus: \"bool\"\n  },\n  defaultProperty: \"data\"\n}, function () {\n  function _class31(meta) {\n    var _this25 = this;\n\n    _classCallCheck(this, _class31);\n\n    QmlWeb.callSuper(this, meta);\n\n    if (this.$parent === null) {\n      // This is the root element. Initialize it.\n      this.dom = QmlWeb.engine.rootElement || document.body;\n      this.dom.innerHTML = \"\";\n      // Needed to make absolute positioning work\n      this.dom.style.position = \"relative\";\n      this.dom.style.top = \"0\";\n      this.dom.style.left = \"0\";\n      // No QML stuff should stand out the root element\n      this.dom.style.overflow = \"hidden\";\n    } else {\n      if (!this.dom) {\n        // Create a dom element for this item.\n        this.dom = document.createElement(\"div\");\n      }\n      this.dom.style.position = \"absolute\";\n    }\n    this.dom.style.pointerEvents = \"none\";\n    // In case the class is qualified, only use the last part for the css class\n    // name.\n    var classComponent = meta.object.$class.split(\".\").pop();\n    this.dom.className = \"\" + classComponent + (this.id ? \" \" + this.id : \"\");\n    this.css = this.dom.style;\n    this.impl = null; // Store the actually drawn element\n\n    this.css.boxSizing = \"border-box\";\n\n    var createProperty = QmlWeb.createProperty;\n\n    if (this.$isComponentRoot) {\n      createProperty(\"var\", this, \"activeFocus\");\n    }\n\n    this.parentChanged.connect(this, this.$onParentChanged_);\n    this.dataChanged.connect(this, this.$onDataChanged);\n    this.stateChanged.connect(this, this.$onStateChanged);\n    this.visibleChanged.connect(this, this.$onVisibleChanged_);\n    this.clipChanged.connect(this, this.$onClipChanged);\n    this.zChanged.connect(this, this.$onZChanged);\n    this.xChanged.connect(this, this.$onXChanged);\n    this.yChanged.connect(this, this.$onYChanged);\n    this.widthChanged.connect(this, this.$onWidthChanged_);\n    this.heightChanged.connect(this, this.$onHeightChanged_);\n    this.focusChanged.connect(this, this.$onFocusChanged_);\n\n    this.widthChanged.connect(this, this.$updateHGeometry);\n    this.heightChanged.connect(this, this.$updateVGeometry);\n    this.implicitWidthChanged.connect(this, this.$onImplicitWidthChanged);\n    this.implicitHeightChanged.connect(this, this.$onImplicitHeightChanged);\n\n    this.$isUsingImplicitWidth = true;\n    this.$isUsingImplicitHeight = true;\n\n    this.anchors = new QmlWeb.QObject(this);\n    createProperty(\"var\", this.anchors, \"left\");\n    createProperty(\"var\", this.anchors, \"right\");\n    createProperty(\"var\", this.anchors, \"top\");\n    createProperty(\"var\", this.anchors, \"bottom\");\n    createProperty(\"var\", this.anchors, \"horizontalCenter\");\n    createProperty(\"var\", this.anchors, \"verticalCenter\");\n    createProperty(\"Item\", this.anchors, \"fill\");\n    createProperty(\"Item\", this.anchors, \"centerIn\");\n    createProperty(\"real\", this.anchors, \"margins\");\n    createProperty(\"real\", this.anchors, \"leftMargin\");\n    createProperty(\"real\", this.anchors, \"rightMargin\");\n    createProperty(\"real\", this.anchors, \"topMargin\");\n    createProperty(\"real\", this.anchors, \"bottomMargin\");\n    this.anchors.leftChanged.connect(this, this.$updateHGeometry);\n    this.anchors.rightChanged.connect(this, this.$updateHGeometry);\n    this.anchors.topChanged.connect(this, this.$updateVGeometry);\n    this.anchors.bottomChanged.connect(this, this.$updateVGeometry);\n    this.anchors.horizontalCenterChanged.connect(this, this.$updateHGeometry);\n    this.anchors.verticalCenterChanged.connect(this, this.$updateVGeometry);\n    this.anchors.fillChanged.connect(this, this.$updateHGeometry);\n    this.anchors.fillChanged.connect(this, this.$updateVGeometry);\n    this.anchors.centerInChanged.connect(this, this.$updateHGeometry);\n    this.anchors.centerInChanged.connect(this, this.$updateVGeometry);\n    this.anchors.leftMarginChanged.connect(this, this.$updateHGeometry);\n    this.anchors.rightMarginChanged.connect(this, this.$updateHGeometry);\n    this.anchors.topMarginChanged.connect(this, this.$updateVGeometry);\n    this.anchors.bottomMarginChanged.connect(this, this.$updateVGeometry);\n    this.anchors.marginsChanged.connect(this, this.$updateHGeometry);\n    this.anchors.marginsChanged.connect(this, this.$updateVGeometry);\n\n    // childrenRect property\n    this.childrenRect = new QmlWeb.QObject(this);\n    createProperty(\"real\", this.childrenRect, \"x\"); // TODO ro\n    createProperty(\"real\", this.childrenRect, \"y\"); // TODO ro\n    createProperty(\"real\", this.childrenRect, \"width\"); // TODO ro\n    createProperty(\"real\", this.childrenRect, \"height\"); // TODO ro\n\n    this.rotationChanged.connect(this, this.$updateTransform);\n    this.scaleChanged.connect(this, this.$updateTransform);\n    this.transformChanged.connect(this, this.$updateTransform);\n\n    this.Component.completed.connect(this, this.Component$onCompleted_);\n    this.opacityChanged.connect(this, this.$calculateOpacity);\n    if (this.$parent) {\n      this.$parent.$opacityChanged.connect(this, this.$calculateOpacity);\n    }\n\n    this.spacing = 0;\n    this.$revertActions = [];\n    this.css.left = this.x + \"px\";\n    this.css.top = this.y + \"px\";\n\n    // Init size of root element\n    if (this.$parent === null) {\n      if (!QmlWeb.engine.rootElement) {\n        // Case 1: Qml scene is placed in body tag\n\n        // event handling by addEventListener is probably better than setting\n        // window.onresize\n        var updateQmlGeometry = function updateQmlGeometry() {\n          _this25.implicitHeight = window.innerHeight;\n          _this25.implicitWidth = window.innerWidth;\n        };\n        window.addEventListener(\"resize\", updateQmlGeometry);\n        updateQmlGeometry();\n      } else {\n        // Case 2: Qml scene is placed in some element tag\n\n        // we have to call `this.implicitHeight =` and `this.implicitWidth =`\n        // each time the rootElement changes it's geometry\n        // to reposition child elements of qml scene\n\n        // it is good to have this as named method of dom element, so we can\n        // call it from outside too, whenever element changes it's geometry\n        // (not only on window resize)\n        this.dom.updateQmlGeometry = function () {\n          _this25.implicitHeight = _this25.dom.offsetHeight;\n          _this25.implicitWidth = _this25.dom.offsetWidth;\n        };\n        window.addEventListener(\"resize\", this.dom.updateQmlGeometry);\n        this.dom.updateQmlGeometry();\n      }\n    }\n  }\n\n  _createClass(_class31, [{\n    key: \"$onParentChanged_\",\n    value: function $onParentChanged_(newParent, oldParent, propName) {\n      if (oldParent) {\n        oldParent.children.splice(oldParent.children.indexOf(this), 1);\n        oldParent.childrenChanged();\n        oldParent.dom.removeChild(this.dom);\n      }\n      if (newParent && newParent.children.indexOf(this) === -1) {\n        newParent.children.push(this);\n        newParent.childrenChanged();\n      }\n      if (newParent) {\n        newParent.dom.appendChild(this.dom);\n      }\n      this.$updateHGeometry(newParent, oldParent, propName);\n      this.$updateVGeometry(newParent, oldParent, propName);\n    }\n  }, {\n    key: \"$onDataChanged\",\n    value: function $onDataChanged(newData) {\n      var QMLItem = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Item\");\n      for (var i in newData) {\n        var child = newData[i];\n        if (child instanceof QMLItem) {\n          child.parent = this; // This will also add it to children.\n        } else {\n          this.resources.push(child);\n        }\n      }\n    }\n  }, {\n    key: \"$onStateChanged\",\n    value: function $onStateChanged(newVal, oldVal) {\n      // let oldState; // TODO: do we need oldState?\n      var newState = void 0;\n      for (var i = 0; i < this.states.length; i++) {\n        if (this.states[i].name === newVal) {\n          newState = this.states[i];\n        }\n        /*\n        else if (this.states[i].name === oldVal) {\n          oldState = this.states[i];\n        }\n        */\n      }\n\n      var actions = this.$revertActions.slice();\n\n      // Get current values for revert actions\n      for (var _i6 in actions) {\n        var action = actions[_i6];\n        action.from = action.target[action.property];\n      }\n      if (newState) {\n        var changes = newState.$getAllChanges();\n\n        // Get all actions we need to do and create actions to revert them\n        for (var _i7 = 0; _i7 < changes.length; _i7++) {\n          this.$applyChange(actions, changes[_i7]);\n        }\n      }\n\n      // Set all property changes and fetch the actual values afterwards\n      // The latter is needed for transitions. We need to set all properties\n      // before we fetch the values because properties can be interdependent.\n      for (var _i8 in actions) {\n        var _action = actions[_i8];\n        _action.target.$properties[_action.property].set(_action.value, QmlWeb.QMLProperty.ReasonUser, _action.target, newState ? newState.$context : _action.target.$context);\n      }\n      for (var _i9 in actions) {\n        var _action2 = actions[_i9];\n        _action2.to = _action2.target[_action2.property];\n        if (_action2.explicit) {\n          // Remove binding\n          _action2.target[_action2.property] = _action2.target[_action2.property];\n          _action2.value = _action2.target[_action2.property];\n        }\n      }\n\n      // Find the best transition to use\n      var transition = void 0;\n      var rating = 0;\n      for (var _i10 = 0; _i10 < this.transitions.length; _i10++) {\n        // We need to stop running transitions, so let's do\n        // it while iterating through the transitions anyway\n        this.transitions[_i10].$stop();\n        var curTransition = this.transitions[_i10];\n        var curRating = 0;\n        if (curTransition.from === oldVal || curTransition.reversible && curTransition.from === newVal) {\n          curRating += 2;\n        } else if (curTransition.from === \"*\") {\n          curRating++;\n        } else {\n          continue;\n        }\n        if (curTransition.to === newVal || curTransition.reversible && curTransition.to === oldVal) {\n          curRating += 2;\n        } else if (curTransition.to === \"*\") {\n          curRating++;\n        } else {\n          continue;\n        }\n        if (curRating > rating) {\n          rating = curRating;\n          transition = curTransition;\n        }\n      }\n      if (transition) {\n        transition.$start(actions);\n      }\n    }\n  }, {\n    key: \"$applyChange\",\n    value: function $applyChange(actions, change) {\n      var _this26 = this;\n\n      var arrayFindIndex = QmlWeb.helpers.arrayFindIndex;\n\n      var _loop = function _loop(j) {\n        var item = change.$actions[j];\n\n        var action = {\n          target: change.target,\n          property: item.property,\n          origValue: change.target.$properties[item.property].binding || change.target.$properties[item.property].val,\n          value: item.value,\n          from: change.target[item.property],\n          to: undefined,\n          explicit: change.explicit\n        };\n\n        var actionIndex = arrayFindIndex(actions, function (element) {\n          return element.target === action.target && element.property === action.property;\n        });\n        if (actionIndex !== -1) {\n          actions[actionIndex] = action;\n        } else {\n          actions.push(action);\n        }\n\n        // Look for existing revert action, else create it\n        var revertIndex = arrayFindIndex(_this26.$revertActions, function (element) {\n          return element.target === change.target && element.property === item.property;\n        });\n        if (revertIndex !== -1 && !change.restoreEntryValues) {\n          // We don't want to revert, so remove it\n          _this26.$revertActions.splice(revertIndex, 1);\n        } else if (revertIndex === -1 && change.restoreEntryValues) {\n          _this26.$revertActions.push({\n            target: change.target,\n            property: item.property,\n            value: change.target.$properties[item.property].binding || change.target.$properties[item.property].val,\n            from: undefined,\n            to: change.target[item.property]\n          });\n        }\n      };\n\n      for (var j = 0; j < change.$actions.length; j++) {\n        _loop(j);\n      }\n    }\n  }, {\n    key: \"$onVisibleChanged_\",\n    value: function $onVisibleChanged_(newVal) {\n      this.css.visibility = newVal ? \"inherit\" : \"hidden\";\n    }\n  }, {\n    key: \"$onClipChanged\",\n    value: function $onClipChanged(newVal) {\n      this.css.overflow = newVal ? \"hidden\" : \"visible\";\n    }\n  }, {\n    key: \"$onZChanged\",\n    value: function $onZChanged() {\n      this.$updateTransform();\n    }\n  }, {\n    key: \"$onXChanged\",\n    value: function $onXChanged(newVal) {\n      this.css.left = newVal + \"px\";\n      this.$updateHGeometry();\n    }\n  }, {\n    key: \"$onYChanged\",\n    value: function $onYChanged(newVal) {\n      this.css.top = newVal + \"px\";\n      this.$updateVGeometry();\n    }\n  }, {\n    key: \"$onWidthChanged_\",\n    value: function $onWidthChanged_(newVal) {\n      this.css.width = newVal ? newVal + \"px\" : \"auto\";\n    }\n  }, {\n    key: \"$onHeightChanged_\",\n    value: function $onHeightChanged_(newVal) {\n      this.css.height = newVal ? newVal + \"px\" : \"auto\";\n    }\n  }, {\n    key: \"$onFocusChanged\",\n    value: function $onFocusChanged(newVal) {\n      if (newVal) {\n        if (this.dom.firstChild) {\n          this.dom.firstChild.focus();\n        }\n        document.qmlFocus = this;\n        this.$context.activeFocus = this;\n      } else if (document.qmlFocus === this) {\n        document.getElementsByTagName(\"BODY\")[0].focus();\n        document.qmlFocus = QmlWeb.engine.rootContext().base;\n        this.$context.activeFocus = null;\n      }\n    }\n  }, {\n    key: \"setupFocusOnDom\",\n    value: function setupFocusOnDom(element) {\n      var _this27 = this;\n\n      var updateFocus = function updateFocus() {\n        var hasFocus = document.activeElement === _this27.dom || document.activeElement === _this27.dom.firstChild;\n        if (_this27.focus !== hasFocus) {\n          _this27.focus = hasFocus;\n        }\n      };\n      element.addEventListener(\"focus\", updateFocus);\n      element.addEventListener(\"blur\", updateFocus);\n    }\n  }, {\n    key: \"$updateTransform\",\n    value: function $updateTransform() {\n      var QMLTranslate = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Translate\");\n      var QMLRotation = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Rotation\");\n      var QMLScale = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Scale\");\n      var transform = \"rotate(\" + this.rotation + \"deg) scale(\" + this.scale + \")\";\n      var filter = \"\";\n      var transformStyle = \"preserve-3d\";\n\n      for (var i = 0; i < this.transform.length; i++) {\n        var t = this.transform[i];\n        if (t instanceof QMLRotation) {\n          var ax = t.axis;\n          transform += \" rotate3d(\" + ax.x + \", \" + ax.y + \", \" + ax.z + \", \" + ax.angle + \"deg)\";\n        } else if (t instanceof QMLScale) {\n          transform += \" scale(\" + t.xScale + \", \" + t.yScale + \")\";\n        } else if (t instanceof QMLTranslate) {\n          transform += \" translate(\" + t.x + \"px, \" + t.y + \"px)\";\n        } else if (typeof t.transformType !== \"undefined\") {\n          if (t.transformType === \"filter\") {\n            filter += t.operation + \"(\" + t.parameters + \") \";\n          }\n        } else if (typeof t === \"string\") {\n          transform += t;\n        }\n      }\n      if (typeof this.z === \"number\") {\n        transform += \" translate3d(0, 0, \" + this.z + \"px)\";\n      }\n      this.dom.style.transform = transform;\n      this.dom.style.transformStyle = transformStyle;\n      this.dom.style.webkitTransform = transform; // Chrome, Safari and Opera\n      this.dom.style.webkitTransformStyle = transformStyle;\n      this.dom.style.msTransform = transform; // IE\n      this.dom.style.filter = filter;\n      this.dom.style.webkitFilter = filter; // Chrome, Safari and Opera\n    }\n  }, {\n    key: \"Component$onCompleted_\",\n    value: function Component$onCompleted_() {\n      this.$calculateOpacity();\n    }\n  }, {\n    key: \"$calculateOpacity\",\n    value: function $calculateOpacity() {\n      // TODO: reset all opacity on layer.enabled changed\n      /*\n      if (false) { // TODO: check layer.enabled\n        this.css.opacity = this.opacity;\n      }\n      */\n      var parentOpacity = this.$parent && this.$parent.$opacity || 1;\n      this.$opacity = this.opacity * parentOpacity;\n      if (this.impl) {\n        this.impl.style.opacity = this.$opacity;\n      }\n    }\n  }, {\n    key: \"$onImplicitWidthChanged\",\n    value: function $onImplicitWidthChanged() {\n      if (this.$isUsingImplicitWidth) {\n        this.width = this.implicitWidth;\n        this.$isUsingImplicitWidth = true;\n      }\n    }\n  }, {\n    key: \"$onImplicitHeightChanged\",\n    value: function $onImplicitHeightChanged() {\n      if (this.$isUsingImplicitHeight) {\n        this.height = this.implicitHeight;\n        this.$isUsingImplicitHeight = true;\n      }\n    }\n  }, {\n    key: \"$updateHGeometry\",\n    value: function $updateHGeometry(newVal, oldVal, propName) {\n      var anchors = this.anchors || this;\n      if (this.$updatingHGeometry) {\n        return;\n      }\n      this.$updatingHGeometry = true;\n\n      var flags = QmlWeb.Signal.UniqueConnection;\n      var lM = anchors.leftMargin || anchors.margins;\n      var rM = anchors.rightMargin || anchors.margins;\n      var w = this.width;\n      var left = this.parent ? this.parent.left : 0;\n\n      // Width\n      if (propName === \"width\") {\n        this.$isUsingImplicitWidth = false;\n      }\n\n      // Position TODO: Layouts\n\n      var u = {}; // our update object\n\n      if (anchors.fill !== undefined) {\n        var fill = anchors.fill;\n        var props = fill.$properties;\n        props.left.changed.connect(this, this.$updateHGeometry, flags);\n        props.right.changed.connect(this, this.$updateHGeometry, flags);\n        props.width.changed.connect(this, this.$updateHGeometry, flags);\n\n        this.$isUsingImplicitWidth = false;\n        u.width = fill.width - lM - rM;\n        u.x = fill.left - left + lM;\n        u.left = fill.left + lM;\n        u.right = fill.right - rM;\n        u.horizontalCenter = (u.left + u.right) / 2;\n      } else if (anchors.centerIn !== undefined) {\n        var horizontalCenter = anchors.centerIn.$properties.horizontalCenter;\n        horizontalCenter.changed.connect(this, this.$updateHGeometry, flags);\n\n        u.horizontalCenter = anchors.centerIn.horizontalCenter;\n        u.x = u.horizontalCenter - w / 2 - left;\n        u.left = u.horizontalCenter - w / 2;\n        u.right = u.horizontalCenter + w / 2;\n      } else if (anchors.left !== undefined) {\n        u.left = anchors.left + lM;\n        if (anchors.right !== undefined) {\n          u.right = anchors.right - rM;\n          this.$isUsingImplicitWidth = false;\n          u.width = u.right - u.left;\n          u.x = u.left - left;\n          u.horizontalCenter = (u.right + u.left) / 2;\n        } else if (anchors.horizontalCenter !== undefined) {\n          u.horizontalCenter = anchors.horizontalCenter;\n          this.$isUsingImplicitWidth = false;\n          u.width = (u.horizontalCenter - u.left) * 2;\n          u.x = u.left - left;\n          u.right = 2 * u.horizontalCenter - u.left;\n        } else {\n          u.x = u.left - left;\n          u.right = u.left + w;\n          u.horizontalCenter = u.left + w / 2;\n        }\n      } else if (anchors.right !== undefined) {\n        u.right = anchors.right - rM;\n        if (anchors.horizontalCenter !== undefined) {\n          u.horizontalCenter = anchors.horizontalCenter;\n          this.$isUsingImplicitWidth = false;\n          u.width = (u.right - u.horizontalCenter) * 2;\n          u.x = 2 * u.horizontalCenter - u.right - left;\n          u.left = 2 * u.horizontalCenter - u.right;\n        } else {\n          u.x = u.right - w - left;\n          u.left = u.right - w;\n          u.horizontalCenter = u.right - w / 2;\n        }\n      } else if (anchors.horizontalCenter !== undefined) {\n        u.horizontalCenter = anchors.horizontalCenter;\n        u.x = u.horizontalCenter - w / 2 - left;\n        u.left = u.horizontalCenter - w / 2;\n        u.right = u.horizontalCenter + w / 2;\n      } else {\n        if (this.parent) {\n          var leftProp = this.parent.$properties.left;\n          leftProp.changed.connect(this, this.$updateHGeometry, flags);\n        }\n\n        u.left = this.x + left;\n        u.right = u.left + w;\n        u.horizontalCenter = u.left + w / 2;\n      }\n\n      for (var key in u) {\n        this[key] = u[key];\n      }\n\n      this.$updatingHGeometry = false;\n\n      if (this.parent) this.$updateChildrenRect(this.parent);\n    }\n  }, {\n    key: \"$updateVGeometry\",\n    value: function $updateVGeometry(newVal, oldVal, propName) {\n      var anchors = this.anchors || this;\n      if (this.$updatingVGeometry) {\n        return;\n      }\n      this.$updatingVGeometry = true;\n\n      var flags = QmlWeb.Signal.UniqueConnection;\n      var tM = anchors.topMargin || anchors.margins;\n      var bM = anchors.bottomMargin || anchors.margins;\n      var h = this.height;\n      var top = this.parent ? this.parent.top : 0;\n\n      // HeighttopProp\n      if (propName === \"height\") {\n        this.$isUsingImplicitHeight = false;\n      }\n\n      // Position TODO: Layouts\n\n      var u = {}; // our update object\n\n      if (anchors.fill !== undefined) {\n        var fill = anchors.fill;\n        var props = fill.$properties;\n        props.top.changed.connect(this, this.$updateVGeometry, flags);\n        props.bottom.changed.connect(this, this.$updateVGeometry, flags);\n        props.height.changed.connect(this, this.$updateVGeometry, flags);\n\n        this.$isUsingImplicitHeight = false;\n        u.height = fill.height - tM - bM;\n        u.y = fill.top - top + tM;\n        u.top = fill.top + tM;\n        u.bottom = fill.bottom - bM;\n        u.verticalCenter = (u.top + u.bottom) / 2;\n      } else if (anchors.centerIn !== undefined) {\n        var verticalCenter = anchors.centerIn.$properties.verticalCenter;\n        verticalCenter.changed.connect(this, this.$updateVGeometry, flags);\n\n        u.verticalCenter = anchors.centerIn.verticalCenter;\n        u.y = u.verticalCenter - h / 2 - top;\n        u.top = u.verticalCenter - h / 2;\n        u.bottom = u.verticalCenter + h / 2;\n      } else if (anchors.top !== undefined) {\n        u.top = anchors.top + tM;\n        if (anchors.bottom !== undefined) {\n          u.bottom = anchors.bottom - bM;\n          this.$isUsingImplicitHeight = false;\n          u.height = u.bottom - u.top;\n          u.y = u.top - top;\n          u.verticalCenter = (u.bottom + u.top) / 2;\n        } else if ((u.verticalCenter = anchors.verticalCenter) !== undefined) {\n          this.$isUsingImplicitHeight = false;\n          u.height = (u.verticalCenter - u.top) * 2;\n          u.y = u.top - top;\n          u.bottom = 2 * u.verticalCenter - u.top;\n        } else {\n          u.y = u.top - top;\n          u.bottom = u.top + h;\n          u.verticalCenter = u.top + h / 2;\n        }\n      } else if (anchors.bottom !== undefined) {\n        u.bottom = anchors.bottom - bM;\n        if ((u.verticalCenter = anchors.verticalCenter) !== undefined) {\n          this.$isUsingImplicitHeight = false;\n          u.height = (u.bottom - u.verticalCenter) * 2;\n          u.y = 2 * u.verticalCenter - u.bottom - top;\n          u.top = 2 * u.verticalCenter - u.bottom;\n        } else {\n          u.y = u.bottom - h - top;\n          u.top = u.bottom - h;\n          u.verticalCenter = u.bottom - h / 2;\n        }\n      } else if (anchors.verticalCenter !== undefined) {\n        u.verticalCenter = anchors.verticalCenter;\n        u.y = u.verticalCenter - h / 2 - top;\n        u.top = u.verticalCenter - h / 2;\n        u.bottom = u.verticalCenter + h / 2;\n      } else {\n        if (this.parent) {\n          var topProp = this.parent.$properties.top;\n          topProp.changed.connect(this, this.$updateVGeometry, flags);\n        }\n\n        u.top = this.y + top;\n        u.bottom = u.top + h;\n        u.verticalCenter = u.top + h / 2;\n      }\n\n      for (var key in u) {\n        this[key] = u[key];\n      }\n\n      this.$updatingVGeometry = false;\n\n      if (this.parent) this.$updateChildrenRect(this.parent);\n    }\n  }, {\n    key: \"$updateChildrenRect\",\n    value: function $updateChildrenRect(component) {\n      if (!component || !component.children || component.children.length === 0) {\n        return;\n      }\n      var children = component.children;\n\n      var maxWidth = 0;\n      var maxHeight = 0;\n      var minX = children.length > 0 ? children[0].x : 0;\n      var minY = children.length > 0 ? children[0].y : 0;\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        maxWidth = Math.max(maxWidth, child.x + child.width);\n        maxHeight = Math.max(maxHeight, child.y + child.heighth);\n        minX = Math.min(minX, child.x);\n        minY = Math.min(minX, child.y);\n      }\n\n      component.childrenRect.x = minX;\n      component.childrenRect.y = minY;\n      component.childrenRect.width = maxWidth;\n      component.childrenRect.height = maxHeight;\n    }\n  }]);\n\n  return _class31;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"ListElement\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\"\n}, function () {\n  function _class32(meta) {\n    _classCallCheck(this, _class32);\n\n    QmlWeb.callSuper(this, meta);\n\n    var createProperty = QmlWeb.createProperty;\n    for (var i in meta.object) {\n      if (i[0] !== \"$\") {\n        createProperty(\"variant\", this, i);\n      }\n    }\n    QmlWeb.applyProperties(meta.object, this, this, this.$context);\n  }\n\n  return _class32;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"ListModel\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    count: \"int\",\n    $items: \"list\"\n  },\n  defaultProperty: \"$items\"\n}, function () {\n  function _class33(meta) {\n    var _this28 = this;\n\n    _classCallCheck(this, _class33);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$firstItem = true;\n    this.$itemsChanged.connect(this, this.$on$itemsChanged);\n    this.$model = new QmlWeb.JSItemModel();\n    this.$model.data = function (index, role) {\n      return _this28.$items[index][role];\n    };\n    this.$model.rowCount = function () {\n      return _this28.$items.length;\n    };\n  }\n\n  _createClass(_class33, [{\n    key: \"$on$itemsChanged\",\n    value: function $on$itemsChanged(newVal) {\n      this.count = this.$items.length;\n      if (this.$firstItem && newVal.length > 0) {\n        var QMLListElement = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"ListElement\");\n        this.$firstItem = false;\n        var roleNames = [];\n        var dict = newVal[0];\n        if (dict instanceof QMLListElement) {\n          dict = dict.$properties;\n        }\n        for (var i in dict) {\n          if (i !== \"index\") {\n            roleNames.push(i);\n          }\n        }\n        this.$model.setRoleNames(roleNames);\n      }\n    }\n  }, {\n    key: \"append\",\n    value: function append(dict) {\n      var index = this.$items.length;\n      var c = 0;\n\n      if (dict instanceof Array) {\n        for (var key in dict) {\n          this.$items.push(dict[key]);\n          c++;\n        }\n      } else {\n        this.$items.push(dict);\n        c = 1;\n      }\n\n      this.$itemsChanged(this.$items);\n      this.$model.rowsInserted(index, index + c);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.$items.length = 0;\n      this.count = 0;\n      this.$model.modelReset();\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this.$items[index];\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(index, dict) {\n      this.$items.splice(index, 0, dict);\n      this.$itemsChanged(this.$items);\n      this.$model.rowsInserted(index, index + 1);\n    }\n  }, {\n    key: \"move\",\n    value: function move(from, to, n) {\n      var vals = this.$items.splice(from, n);\n      for (var i = 0; i < vals.length; i++) {\n        this.$items.splice(to + i, 0, vals[i]);\n      }\n      this.$model.rowsMoved(from, from + n, to);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(index) {\n      this.$items.splice(index, 1);\n      this.$model.rowsRemoved(index, index + 1);\n      this.count = this.$items.length;\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, dict) {\n      this.$items[index] = dict;\n      this.$model.dataChanged(index, index);\n    }\n  }, {\n    key: \"setProperty\",\n    value: function setProperty(index, property, value) {\n      this.$items[index][property] = value;\n      this.$model.dataChanged(index, index);\n    }\n  }]);\n\n  return _class33;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"ListView\",\n  versions: /.*/,\n  baseClass: \"Repeater\",\n  properties: {\n    orientation: \"enum\",\n    spacing: \"real\"\n  }\n}, function () {\n  function _class34(meta) {\n    _classCallCheck(this, _class34);\n\n    QmlWeb.callSuper(this, meta);\n    this.modelChanged.connect(this, this.$styleChanged);\n    this.delegateChanged.connect(this, this.$styleChanged);\n    this.orientationChanged.connect(this, this.$styleChanged);\n    this.spacingChanged.connect(this, this.$styleChanged);\n    this._childrenInserted.connect(this, this.$applyStyleOnItem);\n  }\n\n  _createClass(_class34, [{\n    key: \"container\",\n    value: function container() {\n      return this;\n    }\n  }, {\n    key: \"$applyStyleOnItem\",\n    value: function $applyStyleOnItem($item) {\n      var Qt = QmlWeb.Qt;\n      $item.dom.style.position = \"initial\";\n      if (this.orientation === Qt.Horizontal) {\n        $item.dom.style.display = \"inline-block\";\n        if ($item !== this.$items[0]) {\n          $item.dom.style[\"margin-left\"] = this.spacing + \"px\";\n        }\n      } else {\n        $item.dom.style.display = \"block\";\n        if ($item !== this.$items[0]) {\n          $item.dom.style[\"margin-top\"] = this.spacing + \"px\";\n        }\n      }\n    }\n  }, {\n    key: \"$styleChanged\",\n    value: function $styleChanged() {\n      for (var i = 0; i < this.$items.length; ++i) {\n        this.$applyStyleOnItem(this.$items[i]);\n      }\n    }\n  }]);\n\n  return _class34;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Loader\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    active: { type: \"bool\", initialValue: true },\n    asynchronous: \"bool\",\n    item: \"var\",\n    progress: \"real\",\n    source: \"url\",\n    sourceComponent: \"Component\",\n    status: { type: \"enum\", initialValue: 1 }\n  },\n  signals: {\n    loaded: []\n  }\n}, function () {\n  function _class35(meta) {\n    _classCallCheck(this, _class35);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$sourceUrl = \"\";\n\n    this.activeChanged.connect(this, this.$onActiveChanged);\n    this.sourceChanged.connect(this, this.$onSourceChanged);\n    this.sourceComponentChanged.connect(this, this.$onSourceComponentChanged);\n    this.widthChanged.connect(this, this.$updateGeometry);\n    this.heightChanged.connect(this, this.$updateGeometry);\n  }\n\n  _createClass(_class35, [{\n    key: \"$onActiveChanged\",\n    value: function $onActiveChanged() {\n      if (!this.active) {\n        this.$unload();\n        return;\n      }\n      if (this.source) {\n        this.$onSourceChanged(this.source);\n      } else if (this.sourceComponent) {\n        this.$onSourceComponentChanged(this.sourceComponent);\n      }\n    }\n  }, {\n    key: \"$onSourceChanged\",\n    value: function $onSourceChanged(fileName) {\n      // TODO\n      // if (fileName == this.$sourceUrl && this.item !== undefined) return;\n      if (!this.active) return;\n      this.$unload();\n\n      if (!fileName) {\n        this.sourceComponent = null;\n        this.$sourceUrl = fileName;\n        return;\n      }\n\n      var tree = QmlWeb.engine.loadComponent(fileName);\n      var QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n      var meta = { object: tree, context: this, parent: this };\n      var qmlComponent = new QMLComponent(meta);\n      qmlComponent.$basePath = QmlWeb.engine.extractBasePath(tree.$file);\n      qmlComponent.$imports = tree.$imports;\n      qmlComponent.$file = tree.$file;\n      QmlWeb.engine.loadImports(tree.$imports, qmlComponent.$basePath, qmlComponent.importContextId);\n      var loadedComponent = this.$createComponentObject(qmlComponent, this);\n      this.sourceComponent = loadedComponent;\n      this.$sourceUrl = fileName;\n    }\n  }, {\n    key: \"$onSourceComponentChanged\",\n    value: function $onSourceComponentChanged(newItem) {\n      if (!this.active) return;\n      this.$unload();\n\n      if (!newItem) {\n        this.item = null;\n        return;\n      }\n\n      var QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n      var qmlComponent = newItem;\n      if (newItem instanceof QMLComponent) {\n        qmlComponent = newItem.$createObject(this, {}, this);\n      }\n      qmlComponent.parent = this;\n      this.item = qmlComponent;\n      this.$updateGeometry();\n      if (this.item) {\n        this.loaded();\n      }\n    }\n  }, {\n    key: \"setSource\",\n    value: function setSource(url, options) {\n      this.$sourceUrl = url;\n      this.props = options;\n      this.source = url;\n    }\n  }, {\n    key: \"$unload\",\n    value: function $unload() {\n      if (!this.item) return;\n      this.item.$delete();\n      this.item.parent = undefined;\n      this.item = undefined;\n    }\n  }, {\n    key: \"$callOnCompleted\",\n    value: function $callOnCompleted(child) {\n      child.Component.completed();\n      var QMLBaseObject = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"QtObject\");\n      for (var i = 0; i < child.$tidyupList.length; i++) {\n        if (child.$tidyupList[i] instanceof QMLBaseObject) {\n          this.$callOnCompleted(child.$tidyupList[i]);\n        }\n      }\n    }\n  }, {\n    key: \"$createComponentObject\",\n    value: function $createComponentObject(qmlComponent, parent) {\n      var newComponent = qmlComponent.createObject(parent);\n      qmlComponent.finalizeImports();\n      if (QmlWeb.engine.operationState !== QmlWeb.QMLOperationState.Init) {\n        // We don't call those on first creation, as they will be called\n        // by the regular creation-procedures at the right time.\n        QmlWeb.engine.$initializePropertyBindings();\n        this.$callOnCompleted(newComponent);\n      }\n      return newComponent;\n    }\n  }, {\n    key: \"$updateGeometry\",\n    value: function $updateGeometry() {\n      // Loader size doesn't exist\n      if (!this.width) {\n        this.width = this.item ? this.item.width : 0;\n      } else if (this.item) {\n        // Loader size exists\n        this.item.width = this.width;\n      }\n\n      if (!this.height) {\n        this.height = this.item ? this.item.height : 0;\n      } else if (this.item) {\n        // Loader size exists\n        this.item.height = this.height;\n      }\n    }\n  }]);\n\n  return _class35;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"MouseArea\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    acceptedButtons: { type: \"variant\", initialValue: 1 }, // Qt.LeftButton\n    enabled: { type: \"bool\", initialValue: true },\n    hoverEnabled: \"bool\",\n    mouseX: \"real\",\n    mouseY: \"real\",\n    pressed: \"bool\",\n    containsMouse: \"bool\",\n    pressedButtons: { type: \"variant\", initialValue: 0 },\n    cursorShape: \"enum\" // Qt.ArrowCursor\n  },\n  signals: {\n    clicked: [{ type: \"variant\", name: \"mouse\" }],\n    entered: [],\n    exited: [],\n    positionChanged: [{ type: \"variant\", name: \"mouse\" }]\n  }\n}, function () {\n  function _class36(meta) {\n    var _this29 = this;\n\n    _classCallCheck(this, _class36);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.dom.style.pointerEvents = \"all\";\n\n    // IE does not handle mouse clicks to transparent divs, so we have\n    // to set a background color and make it invisible using opacity\n    // as that doesn't affect the mouse handling.\n    this.dom.style.backgroundColor = \"white\";\n    this.dom.style.opacity = 0;\n\n    this.cursorShapeChanged.connect(this, this.$onCursorShapeChanged);\n\n    this.dom.addEventListener(\"click\", function (e) {\n      return _this29.$handleClick(e);\n    });\n    this.dom.addEventListener(\"contextmenu\", function (e) {\n      return _this29.$handleClick(e);\n    });\n    var handleMouseUp = function handleMouseUp() {\n      _this29.pressed = false;\n      _this29.pressedButtons = 0;\n      document.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n    this.dom.addEventListener(\"mousedown\", function (e) {\n      if (!_this29.enabled) return;\n      var mouse = _this29.$eventToMouse(e);\n      _this29.mouseX = mouse.x;\n      _this29.mouseY = mouse.y;\n      _this29.pressed = true;\n      _this29.pressedButtons = mouse.button;\n      document.addEventListener(\"mouseup\", handleMouseUp);\n    });\n    this.dom.addEventListener(\"mouseover\", function () {\n      _this29.containsMouse = true;\n      _this29.entered();\n    });\n    this.dom.addEventListener(\"mouseout\", function () {\n      _this29.containsMouse = false;\n      _this29.exited();\n    });\n    this.dom.addEventListener(\"mousemove\", function (e) {\n      if (!_this29.enabled || !_this29.hoverEnabled && !_this29.pressed) return;\n      var mouse = _this29.$eventToMouse(e);\n      _this29.mouseX = mouse.x;\n      _this29.mouseY = mouse.y;\n      _this29.positionChanged(mouse);\n    });\n  }\n\n  _createClass(_class36, [{\n    key: \"$onCursorShapeChanged\",\n    value: function $onCursorShapeChanged() {\n      this.dom.style.cursor = this.$cursorShapeToCSS();\n    }\n  }, {\n    key: \"$handleClick\",\n    value: function $handleClick(e) {\n      var mouse = this.$eventToMouse(e);\n      if (this.enabled && this.acceptedButtons & mouse.button) {\n        this.clicked(mouse);\n      }\n      // This decides whether to show the browser's context menu on right click or\n      // not\n      return !(this.acceptedButtons & QmlWeb.Qt.RightButton);\n    }\n  }, {\n    key: \"$eventToMouse\",\n    value: function $eventToMouse(e) {\n      var Qt = QmlWeb.Qt;\n      return {\n        accepted: true,\n        button: e.button === 0 ? Qt.LeftButton : e.button === 1 ? Qt.MiddleButton : e.button === 2 ? Qt.RightButton : 0,\n        modifiers: e.ctrlKey * Qt.CtrlModifier | e.altKey * Qt.AltModifier | e.shiftKey * Qt.ShiftModifier | e.metaKey * Qt.MetaModifier,\n        x: e.offsetX || e.layerX,\n        y: e.offsetY || e.layerY\n      };\n    }\n\n    // eslint-disable-next-line complexity\n\n  }, {\n    key: \"$cursorShapeToCSS\",\n    value: function $cursorShapeToCSS() {\n      var Qt = QmlWeb.Qt;\n      switch (this.cursorShape) {\n        case Qt.ArrowCursor:\n          return \"default\";\n        case Qt.UpArrowCursor:\n          return \"n-resize\";\n        case Qt.CrossCursor:\n          return \"crosshair\";\n        case Qt.WaitCursor:\n          return \"wait\";\n        case Qt.IBeamCursor:\n          return \"text\";\n        case Qt.SizeVerCursor:\n          return \"ew-resize\";\n        case Qt.SizeHorCursor:\n          return \"ns-resize\";\n        case Qt.SizeBDiagCursor:\n          return \"nesw-resize\";\n        case Qt.SizeFDiagCursor:\n          return \"nwse-resize\";\n        case Qt.SizeAllCursor:\n          return \"all-scroll\";\n        case Qt.BlankCursor:\n          return \"none\";\n        case Qt.SplitVCursor:\n          return \"row-resize\";\n        case Qt.SplitHCursor:\n          return \"col-resize\";\n        case Qt.PointingHandCursor:\n          return \"pointer\";\n        case Qt.ForbiddenCursor:\n          return \"not-allowed\";\n        case Qt.WhatsThisCursor:\n          return \"help\";\n        case Qt.BusyCursor:\n          return \"progress\";\n        case Qt.OpenHandCursor:\n          return \"grab\";\n        case Qt.ClosedHandCursor:\n          return \"grabbing\";\n        case Qt.DragCopyCursor:\n          return \"copy\";\n        case Qt.DragMoveCursor:\n          return \"move\";\n        case Qt.DragLinkCursor:\n          return \"alias\";\n        //case Qt.BitmapCursor: return \"auto\";\n        //case Qt.CustomCursor: return \"auto\";\n      }\n      return \"auto\";\n    }\n  }]);\n\n  return _class36;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"NumberAnimation\",\n  versions: /.*/,\n  baseClass: \"PropertyAnimation\"\n}, function () {\n  function _class37(meta) {\n    var _this30 = this;\n\n    _classCallCheck(this, _class37);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$at = 0;\n    this.$loop = 0;\n\n    QmlWeb.engine.$addTicker(function () {\n      return _this30.$ticker.apply(_this30, arguments);\n    });\n    this.runningChanged.connect(this, this.$onRunningChanged);\n  }\n\n  _createClass(_class37, [{\n    key: \"$startLoop\",\n    value: function $startLoop() {\n      for (var i in this.$actions) {\n        var _action3 = this.$actions[i];\n        _action3.from = _action3.from !== undefined ? _action3.from : _action3.target[_action3.property];\n      }\n      this.$at = 0;\n    }\n  }, {\n    key: \"$ticker\",\n    value: function $ticker(now, elapsed) {\n      if (!this.running && this.$loop !== -1 || this.paused) {\n        // $loop === -1 is a marker to just finish this run\n        return;\n      }\n      if (this.$at === 0 && this.$loop === 0 && !this.$actions.length) {\n        this.$redoActions();\n      }\n      this.$at += elapsed / this.duration;\n      if (this.$at >= 1) {\n        this.complete();\n        return;\n      }\n      for (var i in this.$actions) {\n        var _action4 = this.$actions[i];\n        var value = _action4.from + (_action4.to - _action4.from) * this.easing.$valueForProgress(this.$at);\n        var property = _action4.target.$properties[_action4.property];\n        property.set(value, QmlWeb.QMLProperty.ReasonAnimation);\n      }\n    }\n  }, {\n    key: \"$onRunningChanged\",\n    value: function $onRunningChanged(newVal) {\n      if (newVal) {\n        this.$startLoop();\n        this.paused = false;\n      } else if (this.alwaysRunToEnd && this.$at < 1) {\n        this.$loop = -1; // -1 is used as a marker to stop\n      } else {\n        this.$loop = 0;\n        this.$actions = [];\n      }\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      for (var i in this.$actions) {\n        var _action5 = this.$actions[i];\n        var property = _action5.target.$properties[_action5.property];\n        property.set(_action5.to, QmlWeb.QMLProperty.ReasonAnimation);\n      }\n      this.$loop++;\n      if (this.$loop === this.loops) {\n        this.running = false;\n      } else if (!this.running) {\n        this.$actions = [];\n      } else {\n        this.$startLoop(this);\n      }\n    }\n  }]);\n\n  return _class37;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"ParallelAnimation\",\n  versions: /.*/,\n  baseClass: \"Animation\",\n  enums: {\n    Animation: { Infinite: Math.Infinite }\n  },\n  properties: {\n    animations: \"list\"\n  },\n  defaultProperty: \"animations\"\n}, function () {\n  function _class38(meta) {\n    var _this31 = this;\n\n    _classCallCheck(this, _class38);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$runningAnimations = 0;\n\n    this.animationsChanged.connect(this, this.$onAnimationsChanged);\n\n    QmlWeb.engine.$registerStart(function () {\n      if (!_this31.running) return;\n      self.running = false; // toggled back by start();\n      self.start();\n    });\n    QmlWeb.engine.$registerStop(function () {\n      return _this31.stop();\n    });\n  }\n\n  _createClass(_class38, [{\n    key: \"$onAnimationsChanged\",\n    value: function $onAnimationsChanged() {\n      var flags = QmlWeb.Signal.UniqueConnection;\n      for (var i = 0; i < this.animations.length; i++) {\n        var animation = this.animations[i];\n        animation.runningChanged.connect(this, this.$animationFinished, flags);\n      }\n    }\n  }, {\n    key: \"$animationFinished\",\n    value: function $animationFinished(newVal) {\n      this.$runningAnimations += newVal ? 1 : -1;\n      if (this.$runningAnimations === 0) {\n        this.running = false;\n      }\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (this.running) return;\n      this.running = true;\n      for (var i = 0; i < this.animations.length; i++) {\n        this.animations[i].start();\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this.running) return;\n      for (var i = 0; i < this.animations.length; i++) {\n        this.animations[i].stop();\n      }\n      this.running = false;\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this.stop();\n    }\n  }]);\n\n  return _class38;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Positioner\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    spacing: \"int\"\n  }\n}, function () {\n  function _class39(meta) {\n    _classCallCheck(this, _class39);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.childrenChanged.connect(this, this.$onChildrenChanged);\n    this.spacingChanged.connect(this, this.layoutChildren);\n    this.childrenChanged.connect(this, this.layoutChildren);\n    this.layoutChildren();\n  }\n\n  _createClass(_class39, [{\n    key: \"$onChildrenChanged\",\n    value: function $onChildrenChanged() {\n      var flags = QmlWeb.Signal.UniqueConnection;\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        child.widthChanged.connect(this, this.layoutChildren, flags);\n        child.heightChanged.connect(this, this.layoutChildren, flags);\n        child.visibleChanged.connect(this, this.layoutChildren, flags);\n      }\n    }\n  }]);\n\n  return _class39;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"PropertyAnimation\",\n  versions: /.*/,\n  baseClass: \"Animation\",\n  properties: {\n    duration: { type: \"int\", initialValue: 250 },\n    from: \"real\",\n    to: \"real\",\n    properties: \"string\",\n    property: \"string\",\n    target: \"QtObject\",\n    targets: \"list\"\n  }\n}, function () {\n  function _class40(meta) {\n    _classCallCheck(this, _class40);\n\n    QmlWeb.callSuper(this, meta);\n\n    var createProperty = QmlWeb.createProperty;\n    this.easing = new QmlWeb.QObject(this);\n    createProperty(\"enum\", this.easing, \"type\", { initialValue: this.Easing.Linear });\n    createProperty(\"real\", this.easing, \"amplitude\", { initialValue: 1 });\n    createProperty(\"real\", this.easing, \"overshoot\", { initialValue: 1.70158 });\n    createProperty(\"real\", this.easing, \"period\", { initialValue: 0.3 });\n\n    this.easing.$valueForProgress = function (t) {\n      return QmlWeb.$ease(this.type, this.period, this.amplitude, this.overshoot, t);\n    };\n\n    this.$props = [];\n    this.$targets = [];\n    this.$actions = [];\n\n    this.targetChanged.connect(this, this.$redoTargets);\n    this.targetsChanged.connect(this, this.$redoTargets);\n    this.propertyChanged.connect(this, this.$redoProperties);\n    this.propertiesChanged.connect(this, this.$redoProperties);\n\n    if (meta.object.$on !== undefined) {\n      this.property = meta.object.$on;\n      this.target = this.$parent;\n    }\n  }\n\n  _createClass(_class40, [{\n    key: \"$redoActions\",\n    value: function $redoActions() {\n      this.$actions = [];\n      for (var i = 0; i < this.$targets.length; i++) {\n        for (var j in this.$props) {\n          this.$actions.push({\n            target: this.$targets[i],\n            property: this.$props[j],\n            from: this.from,\n            to: this.to\n          });\n        }\n      }\n    }\n  }, {\n    key: \"$redoProperties\",\n    value: function $redoProperties() {\n      this.$props = this.properties.split(\",\");\n\n      // Remove whitespaces\n      for (var i = 0; i < this.$props.length; i++) {\n        var matches = this.$props[i].match(/\\w+/);\n        if (matches) {\n          this.$props[i] = matches[0];\n        } else {\n          this.$props.splice(i, 1);\n          i--;\n        }\n      }\n      // Merge properties and property\n      if (this.property && this.$props.indexOf(this.property) === -1) {\n        this.$props.push(this.property);\n      }\n    }\n  }, {\n    key: \"$redoTargets\",\n    value: function $redoTargets() {\n      this.$targets = this.targets.slice();\n      if (this.target && this.$targets.indexOf(this.target) === -1) {\n        this.$targets.push(this.target);\n      }\n    }\n  }]);\n\n  return _class40;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"PropertyChanges\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    target: \"QtObject\",\n    explicit: \"bool\",\n    restoreEntryValues: { type: \"bool\", initialValue: true }\n  }\n}, function () {\n  function _class41(meta) {\n    _classCallCheck(this, _class41);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$actions = [];\n  }\n\n  _createClass(_class41, [{\n    key: \"$setCustomData\",\n    value: function $setCustomData(property, value) {\n      this.$actions.push({ property: property, value: value });\n    }\n  }]);\n\n  return _class41;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Rectangle\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    color: { type: \"color\", initialValue: \"white\" },\n    radius: \"real\"\n  }\n}, function () {\n  function _class42(meta) {\n    _classCallCheck(this, _class42);\n\n    QmlWeb.callSuper(this, meta);\n\n    var createProperty = QmlWeb.createProperty;\n    this.border = new QmlWeb.QObject(this);\n    createProperty(\"color\", this.border, \"color\", { initialValue: \"black\" });\n    createProperty(\"int\", this.border, \"width\", { initialValue: 1 });\n    this.$borderActive = false;\n\n    var bg = this.impl = document.createElement(\"div\");\n    bg.style.pointerEvents = \"none\";\n    bg.style.position = \"absolute\";\n    bg.style.left = bg.style.right = bg.style.top = bg.style.bottom = \"0px\";\n    bg.style.borderWidth = \"0px\";\n    bg.style.borderStyle = \"solid\";\n    bg.style.borderColor = \"black\";\n    bg.style.backgroundColor = \"white\";\n    this.dom.appendChild(bg);\n\n    this.colorChanged.connect(this, this.$onColorChanged);\n    this.radiusChanged.connect(this, this.$onRadiusChanged);\n    this.border.colorChanged.connect(this, this.border$onColorChanged);\n    this.border.widthChanged.connect(this, this.border$onWidthChanged);\n    this.widthChanged.connect(this, this.$updateBorder);\n    this.heightChanged.connect(this, this.$updateBorder);\n  }\n\n  _createClass(_class42, [{\n    key: \"$onColorChanged\",\n    value: function $onColorChanged(newVal) {\n      this.impl.style.backgroundColor = new QmlWeb.QColor(newVal);\n    }\n  }, {\n    key: \"border$onColorChanged\",\n    value: function border$onColorChanged(newVal) {\n      this.$borderActive = true;\n      this.impl.style.borderColor = new QmlWeb.QColor(newVal);\n      this.$updateBorder();\n    }\n  }, {\n    key: \"border$onWidthChanged\",\n    value: function border$onWidthChanged() {\n      this.$borderActive = true;\n      this.$updateBorder();\n    }\n  }, {\n    key: \"$onRadiusChanged\",\n    value: function $onRadiusChanged(newVal) {\n      this.impl.style.borderRadius = newVal + \"px\";\n    }\n  }, {\n    key: \"$updateBorder\",\n    value: function $updateBorder() {\n      var border = this.$borderActive ? Math.max(0, this.border.width) : 0;\n      var style = this.impl.style;\n      if (border * 2 > this.width || border * 2 > this.height) {\n        // Border is covering the whole background\n        style.borderWidth = \"0px\";\n        style.borderTopWidth = this.height + \"px\";\n      } else {\n        style.borderWidth = border + \"px\";\n      }\n    }\n  }]);\n\n  return _class42;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"RegExpValidator\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    regExp: \"var\"\n  }\n}, function () {\n  function _class43(meta) {\n    _classCallCheck(this, _class43);\n\n    QmlWeb.callSuper(this, meta);\n  }\n\n  _createClass(_class43, [{\n    key: \"validate\",\n    value: function validate(string) {\n      if (!this.regExp) return true;\n      return this.regExp.test(string);\n    }\n  }]);\n\n  return _class43;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Repeater\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    delegate: \"Component\",\n    model: { type: \"variant\", initialValue: 0 },\n    count: \"int\"\n  },\n  signals: {\n    _childrenInserted: []\n  },\n  defaultProperty: \"delegate\"\n}, function () {\n  function _class44(meta) {\n    _classCallCheck(this, _class44);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.parent = meta.parent;\n    // TODO: some (all ?) of the components including Repeater needs to know own\n    // parent at creation time. Please consider this major change.\n\n    this.$completed = false;\n    this.$items = []; // List of created items\n\n    this.modelChanged.connect(this, this.$onModelChanged);\n    this.delegateChanged.connect(this, this.$onDelegateChanged);\n    this.parentChanged.connect(this, this.$onParentChanged);\n  }\n\n  _createClass(_class44, [{\n    key: \"container\",\n    value: function container() {\n      return this.parent;\n    }\n  }, {\n    key: \"itemAt\",\n    value: function itemAt(index) {\n      return this.$items[index];\n    }\n  }, {\n    key: \"$onModelChanged\",\n    value: function $onModelChanged() {\n      this.$applyModel();\n    }\n  }, {\n    key: \"$onDelegateChanged\",\n    value: function $onDelegateChanged() {\n      this.$applyModel();\n    }\n  }, {\n    key: \"$onParentChanged\",\n    value: function $onParentChanged() {\n      this.$applyModel();\n    }\n  }, {\n    key: \"$getModel\",\n    value: function $getModel() {\n      var QMLListModel = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"ListModel\");\n      return this.model instanceof QMLListModel ? this.model.$model : this.model;\n    }\n  }, {\n    key: \"$applyModel\",\n    value: function $applyModel() {\n      if (!this.delegate || !this.parent) {\n        return;\n      }\n      var model = this.$getModel();\n      if (model instanceof QmlWeb.JSItemModel) {\n        var flags = QmlWeb.Signal.UniqueConnection;\n        model.dataChanged.connect(this, this.$_onModelDataChanged, flags);\n        model.rowsInserted.connect(this, this.$_onRowsInserted, flags);\n        model.rowsMoved.connect(this, this.$_onRowsMoved, flags);\n        model.rowsRemoved.connect(this, this.$_onRowsRemoved, flags);\n        model.modelReset.connect(this, this.$_onModelReset, flags);\n\n        this.$removeChildren(0, this.$items.length);\n        this.$insertChildren(0, model.rowCount());\n      } else if (typeof model === \"number\") {\n        if (this.$items.length > model) {\n          // have more than we need\n          this.$removeChildren(model, this.$items.length);\n        } else {\n          // need more\n          this.$insertChildren(this.$items.length, model);\n        }\n      } else if (model instanceof Array) {\n        this.$removeChildren(0, this.$items.length);\n        this.$insertChildren(0, model.length);\n      }\n      this.count = this.$items.length;\n    }\n  }, {\n    key: \"$callOnCompleted\",\n    value: function $callOnCompleted(child) {\n      child.Component.completed();\n      var QMLBaseObject = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"QtObject\");\n      for (var i = 0; i < child.$tidyupList.length; i++) {\n        if (child.$tidyupList[i] instanceof QMLBaseObject) {\n          this.$callOnCompleted(child.$tidyupList[i]);\n        }\n      }\n    }\n  }, {\n    key: \"$_onModelDataChanged\",\n    value: function $_onModelDataChanged(startIndex, endIndex, roles) {\n      var model = this.$getModel();\n      var roleNames = roles || model.roleNames;\n      for (var index = startIndex; index <= endIndex; index++) {\n        var _item3 = this.$items[index];\n        for (var i in roleNames) {\n          _item3.$properties[roleNames[i]].set(model.data(index, roleNames[i]), QmlWeb.QMLProperty.ReasonInit, _item3, this.model.$context);\n        }\n      }\n    }\n  }, {\n    key: \"$_onRowsInserted\",\n    value: function $_onRowsInserted(startIndex, endIndex) {\n      this.$insertChildren(startIndex, endIndex);\n      this.count = this.$items.length;\n    }\n  }, {\n    key: \"$_onRowsMoved\",\n    value: function $_onRowsMoved(sourceStartIndex, sourceEndIndex, destinationIndex) {\n      var vals = this.$items.splice(sourceStartIndex, sourceEndIndex - sourceStartIndex);\n      for (var i = 0; i < vals.length; i++) {\n        this.$items.splice(destinationIndex + i, 0, vals[i]);\n      }\n      var smallestChangedIndex = sourceStartIndex < destinationIndex ? sourceStartIndex : destinationIndex;\n      for (var _i11 = smallestChangedIndex; _i11 < this.$items.length; _i11++) {\n        this.$items[_i11].index = _i11;\n      }\n    }\n  }, {\n    key: \"$_onRowsRemoved\",\n    value: function $_onRowsRemoved(startIndex, endIndex) {\n      this.$removeChildren(startIndex, endIndex);\n      for (var i = startIndex; i < this.$items.length; i++) {\n        this.$items[i].index = i;\n      }\n      this.count = this.$items.length;\n    }\n  }, {\n    key: \"$_onModelReset\",\n    value: function $_onModelReset() {\n      this.$applyModel();\n    }\n  }, {\n    key: \"$insertChildren\",\n    value: function $insertChildren(startIndex, endIndex) {\n      if (endIndex <= 0) {\n        this.count = 0;\n        return;\n      }\n\n      var QMLOperationState = QmlWeb.QMLOperationState;\n      var createProperty = QmlWeb.createProperty;\n      var model = this.$getModel();\n      var index = void 0;\n      for (index = startIndex; index < endIndex; index++) {\n        var newItem = this.delegate.$createObject(this.parent);\n        createProperty(\"int\", newItem, \"index\", { initialValue: index });\n\n        // To properly import JavaScript in the context of a component\n        this.delegate.finalizeImports();\n\n        if (typeof model === \"number\" || model instanceof Array) {\n          if (typeof newItem.$properties.modelData === \"undefined\") {\n            createProperty(\"variant\", newItem, \"modelData\");\n          }\n          var value = model instanceof Array ? model[index] : typeof model === \"number\" ? index : \"undefined\";\n          newItem.$properties.modelData.set(value, QmlWeb.QMLProperty.ReasonInit, newItem, model.$context);\n        } else {\n          for (var i = 0; i < model.roleNames.length; i++) {\n            var roleName = model.roleNames[i];\n            if (typeof newItem.$properties[roleName] === \"undefined\") {\n              createProperty(\"variant\", newItem, roleName);\n            }\n            newItem.$properties[roleName].set(model.data(index, roleName), QmlWeb.QMLProperty.ReasonInit, newItem, this.model.$context);\n          }\n        }\n\n        this.$items.splice(index, 0, newItem);\n\n        // parent must be set after the roles have been added to newItem scope in\n        // case we are outside of QMLOperationState.Init and parentChanged has\n        // any side effects that result in those roleNames being referenced.\n        newItem.parent = this.parent;\n\n        // TODO debug this. Without check to Init, Completed sometimes called\n        // twice.. But is this check correct?\n        if (QmlWeb.engine.operationState !== QMLOperationState.Init && QmlWeb.engine.operationState !== QMLOperationState.Idle) {\n          // We don't call those on first creation, as they will be called\n          // by the regular creation-procedures at the right time.\n          this.$callOnCompleted(newItem);\n        }\n      }\n      if (QmlWeb.engine.operationState !== QMLOperationState.Init) {\n        // We don't call those on first creation, as they will be called\n        // by the regular creation-procedures at the right time.\n        QmlWeb.engine.$initializePropertyBindings();\n      }\n\n      if (index > 0) {\n        this.container().childrenChanged();\n      }\n\n      for (var _i12 = endIndex; _i12 < this.$items.length; _i12++) {\n        this.$items[_i12].index = _i12;\n      }\n    }\n  }, {\n    key: \"$removeChildren\",\n    value: function $removeChildren(startIndex, endIndex) {\n      var removed = this.$items.splice(startIndex, endIndex - startIndex);\n      for (var index in removed) {\n        removed[index].$delete();\n        this.$removeChildProperties(removed[index]);\n      }\n    }\n  }, {\n    key: \"$removeChildProperties\",\n    value: function $removeChildProperties(child) {\n      var signals = QmlWeb.engine.completedSignals;\n      signals.splice(signals.indexOf(child.Component.completed), 1);\n      for (var i = 0; i < child.children.length; i++) {\n        this.$removeChildProperties(child.children[i]);\n      }\n    }\n  }]);\n\n  return _class44;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Rotation\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    angle: \"real\"\n  }\n}, function () {\n  function _class45(meta) {\n    _classCallCheck(this, _class45);\n\n    QmlWeb.callSuper(this, meta);\n\n    var createProperty = QmlWeb.createProperty;\n\n    this.axis = new QmlWeb.QObject(this);\n    createProperty(\"real\", this.axis, \"x\");\n    createProperty(\"real\", this.axis, \"y\");\n    createProperty(\"real\", this.axis, \"z\", { initialValue: 1 });\n\n    this.origin = new QmlWeb.QObject(this);\n    createProperty(\"real\", this.origin, \"x\");\n    createProperty(\"real\", this.origin, \"y\");\n\n    this.angleChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.axis.xChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.axis.yChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.axis.zChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.origin.xChanged.connect(this, this.$updateOrigin);\n    this.origin.yChanged.connect(this, this.$updateOrigin);\n    this.$parent.$updateTransform();\n  }\n\n  _createClass(_class45, [{\n    key: \"$updateOrigin\",\n    value: function $updateOrigin() {\n      var style = this.$parent.dom.style;\n      style.transformOrigin = this.origin.x + \"px \" + this.origin.y + \"px\";\n      style.webkitTransformOrigin = this.origin.x + \"px \" + this.origin.y + \"px\";\n    }\n  }]);\n\n  return _class45;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Row\",\n  versions: /.*/,\n  baseClass: \"Positioner\",\n  properties: {\n    layoutDirection: \"enum\"\n  }\n}, function () {\n  function _class46(meta) {\n    _classCallCheck(this, _class46);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.layoutDirectionChanged.connect(this, this.layoutChildren);\n    this.layoutChildren();\n  }\n\n  _createClass(_class46, [{\n    key: \"layoutChildren\",\n    value: function layoutChildren() {\n      var curPos = 0;\n      var maxHeight = 0;\n      // When layoutDirection is RightToLeft we need oposite order\n      var i = this.layoutDirection === 1 ? this.children.length - 1 : 0;\n      var endPoint = this.layoutDirection === 1 ? -1 : this.children.length;\n      var step = this.layoutDirection === 1 ? -1 : 1;\n      for (; i !== endPoint; i += step) {\n        var child = this.children[i];\n        if (!(child.visible && child.width && child.height)) {\n          continue;\n        }\n        maxHeight = child.height > maxHeight ? child.height : maxHeight;\n\n        child.x = curPos;\n        curPos += child.width + this.spacing;\n      }\n      this.implicitHeight = maxHeight;\n      // We want no spacing at the right side\n      this.implicitWidth = curPos - this.spacing;\n    }\n  }]);\n\n  return _class46;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Scale\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    xScale: \"real\",\n    yScale: \"real\"\n  }\n}, function () {\n  function _class47(meta) {\n    _classCallCheck(this, _class47);\n\n    QmlWeb.callSuper(this, meta);\n\n    var createProperty = QmlWeb.createProperty;\n    this.origin = new QmlWeb.QObject(this);\n    createProperty(\"real\", this.origin, \"x\");\n    createProperty(\"real\", this.origin, \"y\");\n\n    this.xScaleChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.yScaleChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.origin.xChanged.connect(this, this.$updateOrigin);\n    this.origin.yChanged.connect(this, this.$updateOrigin);\n\n    /* QML default origin is top-left, while CSS default origin is centre, so\n     * $updateOrigin must be called to set the initial transformOrigin. */\n    this.$updateOrigin();\n  }\n\n  _createClass(_class47, [{\n    key: \"$updateOrigin\",\n    value: function $updateOrigin() {\n      var style = this.$parent.dom.style;\n      style.transformOrigin = this.origin.x + \"px \" + this.origin.y + \"px\";\n      style.webkitTransformOrigin = this.origin.x + \"px \" + this.origin.y + \"px\";\n    }\n  }]);\n\n  return _class47;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"SequentialAnimation\",\n  versions: /.*/,\n  baseClass: \"Animation\",\n  properties: {\n    animations: \"list\"\n  },\n  defaultProperty: \"animations\"\n}, function () {\n  function _class48(meta) {\n    var _this32 = this;\n\n    _classCallCheck(this, _class48);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.animationsChanged.connect(this, this.$onAnimatonsChanged);\n\n    QmlWeb.engine.$registerStart(function () {\n      if (!_this32.running) return;\n      _this32.running = false; // toggled back by start();\n      _this32.start();\n    });\n    QmlWeb.engine.$registerStop(function () {\n      return self.stop();\n    });\n  }\n\n  _createClass(_class48, [{\n    key: \"$onAnimatonsChanged\",\n    value: function $onAnimatonsChanged() {\n      var flags = QmlWeb.Signal.UniqueConnection;\n      for (var i = 0; i < this.animations.length; i++) {\n        var animation = this.animations[i];\n        animation.runningChanged.connect(this, this.$nextAnimation, flags);\n      }\n    }\n  }, {\n    key: \"$nextAnimation\",\n    value: function $nextAnimation(proceed) {\n      if (this.running && !proceed) {\n        this.$curIndex++;\n        if (this.$curIndex < this.animations.length) {\n          var anim = this.animations[this.$curIndex];\n          console.log(\"nextAnimation\", this, this.$curIndex, anim);\n          anim.start();\n        } else {\n          this.$passedLoops++;\n          if (this.$passedLoops >= this.loops) {\n            this.complete();\n          } else {\n            this.$curIndex = -1;\n            this.$nextAnimation();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (this.running) return;\n      this.running = true;\n      this.$curIndex = -1;\n      this.$passedLoops = 0;\n      this.$nextAnimation();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this.running) return;\n      this.running = false;\n      if (this.$curIndex < this.animations.length) {\n        this.animations[this.$curIndex].stop();\n      }\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      if (!this.running) return;\n      if (this.$curIndex < this.animations.length) {\n        // Stop current animation\n        this.animations[this.$curIndex].stop();\n      }\n      this.running = false;\n    }\n  }]);\n\n  return _class48;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"State\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    name: \"string\",\n    changes: \"list\",\n    extend: \"string\",\n    when: \"bool\"\n  },\n  defaultProperty: \"changes\"\n}, function () {\n  function _class49(meta) {\n    _classCallCheck(this, _class49);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$item = this.$parent;\n\n    this.whenChanged.connect(this, this.$onWhenChanged);\n  }\n\n  _createClass(_class49, [{\n    key: \"$getAllChanges\",\n    value: function $getAllChanges() {\n      var _this33 = this;\n\n      if (this.extend) {\n        /* ECMAScript 2015. TODO: polyfill Array?\n        const base = this.$item.states.find(state => state.name === this.extend);\n        */\n        var states = this.$item.states;\n        var base = states.filter(function (state) {\n          return state.name === _this33.extend;\n        })[0];\n        if (base) {\n          return base.$getAllChanges().concat(this.changes);\n        }\n        console.error(\"Can't find the state to extend!\");\n      }\n      return this.changes;\n    }\n  }, {\n    key: \"$onWhenChanged\",\n    value: function $onWhenChanged(newVal) {\n      if (newVal) {\n        this.$item.state = this.name;\n      } else if (this.$item.state === this.name) {\n        this.$item.state = \"\";\n      }\n    }\n  }]);\n\n  return _class49;\n}());\n\nvar platformsDetectors = [\n//{ name: \"W8\", regexp: /Windows NT 6\\.2/ },\n//{ name: \"W7\", regexp: /Windows NT 6\\.1/ },\n//{ name: \"Windows\", regexp: /Windows NT/ },\n{ name: \"OSX\", regexp: /Macintosh/ }];\n\nvar systemPalettes = {};\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"SystemPalette\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  enums: {\n    SystemPalette: {\n      Active: \"active\", Inactive: \"inactive\", Disabled: \"disabled\"\n    }\n  },\n  properties: {\n    alternateBase: { type: \"color\", readOnly: true },\n    base: { type: \"color\", readOnly: true },\n    button: { type: \"color\", readOnly: true },\n    buttonText: { type: \"color\", readOnly: true },\n    dark: { type: \"color\", readOnly: true },\n    highlight: { type: \"color\", readOnly: true },\n    highlightedText: { type: \"color\", readOnly: true },\n    light: { type: \"color\", readOnly: true },\n    mid: { type: \"color\", readOnly: true },\n    midlight: { type: \"color\", readOnly: true },\n    shadow: { type: \"color\", readOnly: true },\n    text: { type: \"color\", readOnly: true },\n    window: { type: \"color\", readOnly: true },\n    windowText: { type: \"color\", readOnly: true },\n\n    colorGroup: \"enum\"\n  }\n}, function () {\n  function _class50(meta) {\n    _classCallCheck(this, _class50);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.colorGroupChanged.connect(this, this.$onColorGroupChanged);\n\n    this.$platform = \"OSX\";\n    // Detect OS\n    for (var i = 0; i < platformsDetectors.length; ++i) {\n      if (platformsDetectors[i].regexp.test(navigator.userAgent)) {\n        this.$platform = platformsDetectors[i].name;\n        break;\n      }\n    }\n  }\n\n  _createClass(_class50, [{\n    key: \"$onColorGroupChanged\",\n    value: function $onColorGroupChanged(newVal) {\n      var _this34 = this;\n\n      var pallete = systemPalettes[this.$platform][newVal];\n      this.$canEditReadOnlyProperties = true;\n      Object.keys(pallete).forEach(function (key) {\n        _this34[key] = pallete[key];\n      });\n      delete this.$canEditReadOnlyProperties;\n    }\n  }]);\n\n  return _class50;\n}());\n\nsystemPalettes.OSX = {\n  active: {\n    alternateBase: \"#f6f6f6\",\n    base: \"#ffffff\",\n    button: \"#ededed\",\n    buttonText: \"#000000\",\n    dark: \"#bfbfbf\",\n    highlight: \"#fbed73\",\n    highlightText: \"#000000\",\n    light: \"#ffffff\",\n    mid: \"#a9a9a9\",\n    midlight: \"#f6f6f6\",\n    shadow: \"#8b8b8b\",\n    text: \"#000000\",\n    window: \"#ededed\",\n    windowText: \"#000000\"\n  },\n  inactive: {\n    alternateBase: \"#f6f6f6\",\n    base: \"#ffffff\",\n    button: \"#ededed\",\n    buttonText: \"#000000\",\n    dark: \"#bfbfbf\",\n    highlight: \"#d0d0d0\",\n    highlightText: \"#000000\",\n    light: \"#ffffff\",\n    mid: \"#a9a9a9\",\n    midlight: \"#f6f6f6\",\n    shadow: \"#8b8b8b\",\n    text: \"#000000\",\n    window: \"#ededed\",\n    windowText: \"#000000\"\n  },\n  disabled: {\n    alternateBase: \"#f6f6f6\",\n    base: \"#ededed\",\n    button: \"#ededed\",\n    buttonText: \"#949494\",\n    dark: \"#bfbfbf\",\n    highlight: \"#d0d0d0\",\n    highlightText: \"#7f7f7f\",\n    light: \"#ffffff\",\n    mid: \"#a9a9a9\",\n    midlight: \"#f6f6f6\",\n    shadow: \"#8b8b8b\",\n    text: \"#7f7f7f\",\n    window: \"#ededed\",\n    windowText: \"#7f7f7f\"\n  }\n};\n\nQmlWeb.systemPalettes = systemPalettes;\nQmlWeb.platformsDetectors = platformsDetectors;\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Text\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  enums: {\n    Text: {\n      NoWrap: 0, WordWrap: 1, WrapAnywhere: 2, Wrap: 3,\n      WrapAtWordBoundaryOrAnywhere: 4,\n      AlignLeft: 1, AlignRight: 2, AlignHCenter: 4, AlignJustify: 8,\n      AlignTop: 32, AlignBottom: 64, AlignVCenter: 128,\n      Normal: 0, Outline: 1, Raised: 2, Sunken: 3\n    }\n  },\n  properties: {\n    color: { type: \"color\", initialValue: \"black\" },\n    text: \"string\",\n    lineHeight: \"real\",\n    wrapMode: { type: \"enum\", initialValue: 0 }, // Text.NoWrap\n    horizontalAlignment: { type: \"enum\", initialValue: 1 }, // Text.AlignLeft\n    style: \"enum\",\n    styleColor: \"color\"\n  }\n}, function () {\n  function _class51(meta) {\n    _classCallCheck(this, _class51);\n\n    QmlWeb.callSuper(this, meta);\n\n    var fc = this.impl = document.createElement(\"span\");\n    fc.style.pointerEvents = \"none\";\n    fc.style.width = \"100%\";\n    fc.style.height = \"100%\";\n    fc.style.whiteSpace = \"pre\";\n    this.dom.style.textAlign = \"left\";\n    this.dom.appendChild(fc);\n\n    var QMLFont = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Font\");\n    this.font = new QMLFont(this);\n\n    this.colorChanged.connect(this, this.$onColorChanged);\n    this.textChanged.connect(this, this.$onTextChanged);\n    this.lineHeightChanged.connect(this, this.$onLineHeightChanged);\n    this.wrapModeChanged.connect(this, this.$onWrapModeChanged);\n    this.horizontalAlignmentChanged.connect(this, this.$onHorizontalAlignmentChanged);\n    this.styleChanged.connect(this, this.$onStyleChanged);\n    this.styleColorChanged.connect(this, this.$onStyleColorChanged);\n\n    this.font.family = \"sans-serif\";\n    this.font.pointSize = 10;\n\n    this.widthChanged.connect(this, this.$onWidthChanged);\n\n    this.font.boldChanged.connect(this, this.$onFontChanged);\n    this.font.weightChanged.connect(this, this.$onFontChanged);\n    this.font.pixelSizeChanged.connect(this, this.$onFontChanged);\n    this.font.pointSizeChanged.connect(this, this.$onFontChanged);\n    this.font.familyChanged.connect(this, this.$onFontChanged);\n    this.font.letterSpacingChanged.connect(this, this.$onFontChanged);\n    this.font.wordSpacingChanged.connect(this, this.$onFontChanged);\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n  }\n\n  _createClass(_class51, [{\n    key: \"$onColorChanged\",\n    value: function $onColorChanged(newVal) {\n      this.impl.style.color = new QmlWeb.QColor(newVal);\n    }\n  }, {\n    key: \"$onTextChanged\",\n    value: function $onTextChanged(newVal) {\n      this.impl.innerHTML = newVal;\n      this.$updateImplicit();\n    }\n  }, {\n    key: \"$onWidthChanged\",\n    value: function $onWidthChanged() {\n      this.$updateImplicit();\n    }\n  }, {\n    key: \"$onLineHeightChanged\",\n    value: function $onLineHeightChanged(newVal) {\n      this.impl.style.lineHeight = newVal + \"px\";\n      this.$updateImplicit();\n    }\n  }, {\n    key: \"$onStyleChanged\",\n    value: function $onStyleChanged(newVal) {\n      this.$updateShadow(newVal, this.styleColor);\n    }\n  }, {\n    key: \"$onStyleColorChanged\",\n    value: function $onStyleColorChanged(newVal) {\n      this.$updateShadow(this.style, new QmlWeb.QColor(newVal));\n    }\n  }, {\n    key: \"$onWrapModeChanged\",\n    value: function $onWrapModeChanged(newVal) {\n      var style = this.impl.style;\n      switch (newVal) {\n        case this.Text.NoWrap:\n          style.whiteSpace = \"pre\";\n          break;\n        case this.Text.WordWrap:\n          style.whiteSpace = \"pre-wrap\";\n          style.wordWrap = \"normal\";\n          break;\n        case this.Text.WrapAnywhere:\n          style.whiteSpace = \"pre-wrap\";\n          style.wordBreak = \"break-all\";\n          break;\n        case this.Text.Wrap:\n        case this.Text.WrapAtWordBoundaryOrAnywhere:\n          style.whiteSpace = \"pre-wrap\";\n          style.wordWrap = \"break-word\";\n      }\n      this.$updateJustifyWhiteSpace();\n    }\n  }, {\n    key: \"$onHorizontalAlignmentChanged\",\n    value: function $onHorizontalAlignmentChanged(newVal) {\n      var textAlign = null;\n      switch (newVal) {\n        case this.Text.AlignLeft:\n          textAlign = \"left\";\n          break;\n        case this.Text.AlignRight:\n          textAlign = \"right\";\n          break;\n        case this.Text.AlignHCenter:\n          textAlign = \"center\";\n          break;\n        case this.Text.AlignJustify:\n          textAlign = \"justify\";\n          break;\n      }\n      this.dom.style.textAlign = textAlign;\n      this.$updateJustifyWhiteSpace();\n    }\n  }, {\n    key: \"$onFontChanged\",\n    value: function $onFontChanged() {\n      this.$updateImplicit();\n    }\n  }, {\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.$updateImplicit();\n    }\n  }, {\n    key: \"$updateImplicit\",\n    value: function $updateImplicit() {\n      if (!this.text || !this.dom) {\n        this.implicitHeight = this.implicitWidth = 0;\n        return;\n      }\n      var fc = this.impl;\n      // Need to move the child out of it's parent so that it can properly\n      // recalculate it's \"natural\" offsetWidth/offsetHeight\n      if (this.$isUsingImplicitWidth) {\n        document.body.appendChild(fc);\n      }\n      var height = fc.offsetHeight;\n      var width = fc.offsetWidth;\n      if (this.$isUsingImplicitWidth) {\n        this.dom.appendChild(fc);\n      }\n\n      this.implicitHeight = height;\n      this.implicitWidth = width;\n    }\n  }, {\n    key: \"$updateShadow\",\n    value: function $updateShadow(textStyle, styleColor) {\n      var style = this.impl.style;\n      switch (textStyle) {\n        case 0:\n          style.textShadow = \"none\";\n          break;\n        case 1:\n          style.textShadow = [\"1px 0 0 \" + styleColor, \"-1px 0 0 \" + styleColor, \"0 1px 0 \" + styleColor, \"0 -1px 0 \" + styleColor].join(\",\");\n          break;\n        case 2:\n          style.textShadow = \"1px 1px 0 \" + styleColor;\n          break;\n        case 3:\n          style.textShadow = \"-1px -1px 0 \" + styleColor;\n          break;\n      }\n    }\n  }, {\n    key: \"$updateJustifyWhiteSpace\",\n    value: function $updateJustifyWhiteSpace() {\n      var style = this.impl.style;\n      // AlignJustify doesn't work with pre/pre-wrap, so we decide the lesser of\n      // the two evils to be ignoring \"\\n\"s inside the text.\n      if (this.horizontalAlignment === this.Text.AlignJustify) {\n        style.whiteSpace = \"normal\";\n      }\n      this.$updateImplicit();\n    }\n  }]);\n\n  return _class51;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"TextEdit\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    activeFocusOnPress: { type: \"bool\", initialValue: true },\n    baseUrl: \"url\",\n    canPaste: \"bool\",\n    canRedo: \"bool\",\n    canUndo: \"bool\",\n    color: { type: \"color\", initialValue: \"white\" },\n    contentHeight: \"real\",\n    contentWidth: \"real\",\n    cursorDelegate: \"Component\",\n    cursorPosition: \"int\",\n    cursorRectangle: \"rectangle\",\n    cursorVisible: { type: \"bool\", initialValue: true },\n    effectiveHorizontalAlignment: \"enum\",\n    horizontalAlignment: \"enum\",\n    hoveredLink: \"string\",\n    inputMethodComposing: \"bool\",\n    inputMethodHints: \"enum\",\n    length: \"int\",\n    lineCount: \"int\",\n    mouseSelectionMode: \"enum\",\n    persistentSelection: \"bool\",\n    readOnly: \"bool\",\n    renderType: \"enum\",\n    selectByKeyboard: { type: \"bool\", initialValue: true },\n    selectByMouse: \"bool\",\n    selectedText: \"string\",\n    selectedTextColor: { type: \"color\", initialValue: \"yellow\" },\n    selectionColor: { type: \"color\", initialValue: \"pink\" },\n    selectionEnd: \"int\",\n    selectionStart: \"int\",\n    text: \"string\",\n    textDocument: \"TextDocument\",\n    textFormat: \"enum\",\n    textMargin: \"real\",\n    verticalAlignment: \"enum\",\n    wrapMode: \"enum\"\n  },\n  signals: {\n    linkActivated: [{ type: \"string\", name: \"link\" }],\n    linkHovered: [{ type: \"string\", name: \"link\" }]\n  }\n}, function () {\n  function _class52(meta) {\n    var _this35 = this;\n\n    _classCallCheck(this, _class52);\n\n    QmlWeb.callSuper(this, meta);\n\n    var QMLFont = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Font\");\n    this.font = new QMLFont(this);\n\n    // Undo / Redo stacks;\n    this.undoStack = [];\n    this.undoStackPosition = -1;\n    this.redoStack = [];\n    this.redoStackPosition = -1;\n\n    var textarea = this.impl = document.createElement(\"textarea\");\n    textarea.style.pointerEvents = \"auto\";\n    textarea.style.width = \"100%\";\n    textarea.style.height = \"100%\";\n    textarea.style.boxSizing = \"border-box\";\n    textarea.style.borderWidth = \"0\";\n    textarea.style.background = \"none\";\n    textarea.style.outline = \"none\";\n    textarea.style.resize = \"none\";\n    textarea.style.padding = \"0\"; // TODO: padding/*Padding props from Qt 5.6\n    // In some browsers text-areas have a margin by default, which distorts\n    // the positioning, so we need to manually set it to 0.\n    textarea.style.margin = \"0\";\n    textarea.disabled = false;\n    this.dom.appendChild(textarea);\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n    this.textChanged.connect(this, this.$onTextChanged);\n    this.colorChanged.connect(this, this.$onColorChanged);\n\n    this.impl.addEventListener(\"input\", function () {\n      return _this35.$updateValue();\n    });\n  }\n\n  _createClass(_class52, [{\n    key: \"append\",\n    value: function append(text) {\n      this.text += text;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      // TODO\n    }\n  }, {\n    key: \"cut\",\n    value: function cut() {\n      this.text = this.text(0, this.selectionStart) + this.text(this.selectionEnd, this.text.length);\n      // TODO\n    }\n  }, {\n    key: \"deselect\",\n    value: function deselect() {\n      //this.selectionStart = -1;\n      //this.selectionEnd = -1;\n      //this.selectedText = null;\n      // TODO\n    }\n  }, {\n    key: \"getFormattedText\",\n    value: function getFormattedText(start, end) {\n      var text = this.text.slice(start, end);\n      // TODO\n      // process text\n      return text;\n    }\n  }, {\n    key: \"getText\",\n    value: function getText(start, end) {\n      return this.text.slice(start, end);\n    }\n  }, {\n    key: \"insert\",\n    value: function insert() /*position, text*/{\n      // TODO\n    }\n  }, {\n    key: \"isRightToLeft\",\n    value: function isRightToLeft() /*start, end*/{\n      // TODO\n    }\n  }, {\n    key: \"linkAt\",\n    value: function linkAt() /*x, y*/{\n      // TODO\n    }\n  }, {\n    key: \"moveCursorSelection\",\n    value: function moveCursorSelection() /*x, y*/{\n      // TODO\n    }\n  }, {\n    key: \"paste\",\n    value: function paste() {\n      // TODO\n    }\n  }, {\n    key: \"positionAt\",\n    value: function positionAt() /*x, y*/{\n      // TODO\n    }\n  }, {\n    key: \"positionToRectangle\",\n    value: function positionToRectangle() /*position*/{\n      // TODO\n    }\n  }, {\n    key: \"redo\",\n    value: function redo() {\n      // TODO\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() /*start, end*/{\n      // TODO\n    }\n  }, {\n    key: \"select\",\n    value: function select() /*start, end*/{\n      // TODO\n    }\n  }, {\n    key: \"selectAll\",\n    value: function selectAll() {\n      // TODO\n    }\n  }, {\n    key: \"selectWord\",\n    value: function selectWord() {\n      // TODO\n    }\n  }, {\n    key: \"undo\",\n    value: function undo() {\n      // TODO\n    }\n  }, {\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.selectByKeyboard = !this.readOnly;\n      this.$updateValue();\n      this.implicitWidth = this.offsetWidth;\n      this.implicitHeight = this.offsetHeight;\n    }\n  }, {\n    key: \"$onTextChanged\",\n    value: function $onTextChanged(newVal) {\n      this.impl.value = newVal;\n    }\n  }, {\n    key: \"$onColorChanged\",\n    value: function $onColorChanged(newVal) {\n      this.impl.style.color = newVal;\n    }\n  }, {\n    key: \"$updateValue\",\n    value: function $updateValue() {\n      if (this.text !== this.impl.value) {\n        this.text = this.impl.value;\n      }\n      this.length = this.text.length;\n      this.lineCount = this.$getLineCount();\n      this.$updateCss();\n    }\n    // Transfer dom style to firstChild,\n    // then clear corresponding dom style\n\n  }, {\n    key: \"$updateCss\",\n    value: function $updateCss() {\n      var supported = [\"border\", \"borderRadius\", \"borderWidth\", \"borderColor\", \"backgroundColor\"];\n      var style = this.impl.style;\n      for (var n = 0; n < supported.length; n++) {\n        var o = supported[n];\n        var v = this.css[o];\n        if (v) {\n          style[o] = v;\n          this.css[o] = null;\n        }\n      }\n    }\n  }, {\n    key: \"$getLineCount\",\n    value: function $getLineCount() {\n      return this.text.split(/\\n/).length;\n    }\n  }]);\n\n  return _class52;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"TextInput\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  enums: {\n    TextInput: { Normal: 0, Password: 1, NoEcho: 2, PasswordEchoOnEdit: 3 }\n  },\n  properties: {\n    text: \"string\",\n    maximumLength: { type: \"int\", initialValue: -1 },\n    readOnly: \"bool\",\n    validator: \"var\",\n    echoMode: \"enum\" // TextInput.Normal\n  },\n  signals: {\n    accepted: []\n  }\n}, function () {\n  function _class53(meta) {\n    var _this36 = this;\n\n    _classCallCheck(this, _class53);\n\n    QmlWeb.callSuper(this, meta);\n\n    var QMLFont = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Font\");\n    this.font = new QMLFont(this);\n\n    var input = this.impl = document.createElement(\"input\");\n    input.type = \"text\";\n    input.disabled = true;\n    input.style.pointerEvents = \"auto\";\n    // In some browsers text-inputs have a margin by default, which distorts\n    // the positioning, so we need to manually set it to 0.\n    input.style.margin = \"0\";\n    input.style.padding = \"0\";\n    input.style.width = \"100%\";\n    input.style.height = \"100%\";\n    this.dom.appendChild(input);\n    this.setupFocusOnDom(input);\n    input.disabled = false;\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n    this.textChanged.connect(this, this.$onTextChanged);\n    this.echoModeChanged.connect(this, this.$onEchoModeChanged);\n    this.maximumLengthChanged.connect(this, this.$onMaximumLengthChanged);\n    this.readOnlyChanged.connect(this, this.$onReadOnlyChanged);\n    this.Keys.pressed.connect(this, this.Keys$onPressed);\n\n    this.impl.addEventListener(\"input\", function () {\n      return _this36.$updateValue();\n    });\n  }\n\n  _createClass(_class53, [{\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.implicitWidth = this.impl.offsetWidth;\n      this.implicitHeight = this.impl.offsetHeight;\n    }\n  }, {\n    key: \"$onTextChanged\",\n    value: function $onTextChanged(newVal) {\n      // We have to check if value actually changes.\n      // If we do not have this check, then after user updates text input\n      // following occurs: user updates gui text -> updateValue gets called ->\n      // textChanged gets called -> gui value updates again -> caret position\n      // moves to the right!\n      if (this.impl.value !== newVal) {\n        this.impl.value = newVal;\n      }\n    }\n  }, {\n    key: \"$onEchoModeChanged\",\n    value: function $onEchoModeChanged(newVal) {\n      var TextInput = this.TextInput;\n      var input = this.impl;\n      switch (newVal) {\n        case TextInput.Normal:\n          input.type = \"text\";\n          break;\n        case TextInput.Password:\n          input.type = \"password\";\n          break;\n        case TextInput.NoEcho:\n          // Not supported, use password, that's nearest\n          input.type = \"password\";\n          break;\n        case TextInput.PasswordEchoOnEdit:\n          // Not supported, use password, that's nearest\n          input.type = \"password\";\n          break;\n      }\n    }\n  }, {\n    key: \"$onMaximumLengthChanged\",\n    value: function $onMaximumLengthChanged(newVal) {\n      this.impl.maxLength = newVal < 0 ? null : newVal;\n    }\n  }, {\n    key: \"$onReadOnlyChanged\",\n    value: function $onReadOnlyChanged(newVal) {\n      this.impl.disabled = newVal;\n    }\n  }, {\n    key: \"Keys$onPressed\",\n    value: function Keys$onPressed(e) {\n      var Qt = QmlWeb.Qt;\n      var submit = e.key === Qt.Key_Return || e.key === Qt.Key_Enter;\n      if (submit && this.$testValidator()) {\n        this.accepted();\n        e.accepted = true;\n      }\n    }\n  }, {\n    key: \"$testValidator\",\n    value: function $testValidator() {\n      if (this.validator) {\n        return this.validator.validate(this.text);\n      }\n      return true;\n    }\n  }, {\n    key: \"$updateValue\",\n    value: function $updateValue() {\n      if (this.text !== this.impl.value) {\n        this.$canEditReadOnlyProperties = true;\n        this.text = this.impl.value;\n        this.$canEditReadOnlyProperties = false;\n      }\n    }\n  }]);\n\n  return _class53;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Transition\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    animations: \"list\",\n    from: { type: \"string\", initialValue: \"*\" },\n    to: { type: \"string\", initialValue: \"*\" },\n    reversible: \"bool\"\n  },\n  defaultProperty: \"animations\"\n}, function () {\n  function _class54(meta) {\n    _classCallCheck(this, _class54);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$item = this.$parent;\n  }\n\n  _createClass(_class54, [{\n    key: \"$start\",\n    value: function $start(actions) {\n      for (var i = 0; i < this.animations.length; i++) {\n        var animation = this.animations[i];\n        animation.$actions = [];\n        var $targets = animation.$targets,\n            $props = animation.$props,\n            $actions = animation.$actions;\n\n        for (var j in actions) {\n          var _action6 = actions[j];\n          if (($targets.length === 0 || $targets.indexOf(_action6.target) !== -1) && ($props.length === 0 || $props.indexOf(_action6.property) !== -1)) {\n            $actions.push(_action6);\n          }\n        }\n        animation.start();\n      }\n    }\n  }, {\n    key: \"$stop\",\n    value: function $stop() {\n      for (var i = 0; i < this.animations.length; i++) {\n        this.animations[i].stop();\n      }\n    }\n  }]);\n\n  return _class54;\n}());\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Translate\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    x: \"real\",\n    y: \"real\"\n  }\n}, function () {\n  function _class55(meta) {\n    _classCallCheck(this, _class55);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.xChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.yChanged.connect(this.$parent, this.$parent.$updateTransform);\n  }\n\n  return _class55;\n}());\n\n// WARNING: Can have wrong behavior if url is changed while the socket is in\n// Connecting state.\n// TODO: Recheck everything.\n\nQmlWeb.registerQmlType({\n  module: \"QtWebSockets\",\n  name: \"WebSocket\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  enums: {\n    WebSocket: { Connecting: 0, Open: 1, Closing: 2, Closed: 3, Error: 4 }\n  },\n  properties: {\n    active: \"bool\",\n    status: { type: \"enum\", initialValue: 3 }, // WebSocket.Closed\n    errorString: \"string\",\n    url: \"url\"\n  },\n  signals: {\n    textMessageReceived: [{ type: \"string\", name: \"message\" }]\n  }\n}, function () {\n  function _class56(meta) {\n    _classCallCheck(this, _class56);\n\n    QmlWeb.callSuper(this, meta);\n\n    this.$socket = undefined;\n    this.$reconnect = false;\n\n    this.statusChanged.connect(this, this.$onStatusChanged);\n    this.activeChanged.connect(this, this.$reconnectSocket);\n    this.urlChanged.connect(this, this.$reconnectSocket);\n  }\n\n  _createClass(_class56, [{\n    key: \"$onStatusChanged\",\n    value: function $onStatusChanged(status) {\n      if (status !== this.WebSocket.Error) {\n        this.errorString = \"\";\n      }\n    }\n  }, {\n    key: \"$connectSocket\",\n    value: function $connectSocket() {\n      var _this37 = this;\n\n      this.$reconnect = false;\n\n      if (!this.url || !this.active) {\n        return;\n      }\n\n      this.status = this.WebSocket.Connecting;\n      this.$socket = new WebSocket(this.url);\n      this.$socket.onopen = function () {\n        _this37.status = _this37.WebSocket.Open;\n      };\n      this.$socket.onclose = function () {\n        _this37.status = _this37.WebSocket.Closed;\n        if (_this37.$reconnect) {\n          _this37.$connectSocket();\n        }\n      };\n      this.$socket.onerror = function (error) {\n        _this37.errorString = error.message;\n        _this37.status = _this37.WebSocket.Error;\n      };\n      this.$socket.onmessage = function (message) {\n        _this37.textMessageReceived(message.data);\n      };\n    }\n  }, {\n    key: \"$reconnectSocket\",\n    value: function $reconnectSocket() {\n      this.$reconnect = true;\n      if (this.status === this.WebSocket.Open) {\n        this.status = this.WebSocket.Closing;\n        this.$socket.close();\n      } else if (this.status !== this.WebSocket.Closing) {\n        this.$connectSocket();\n      }\n    }\n  }, {\n    key: \"sendTextMessage\",\n    value: function sendTextMessage(message) {\n      if (this.status === this.WebSocket.Open) {\n        this.$socket.send(message);\n      }\n    }\n  }]);\n\n  return _class56;\n}());\n}(typeof global != \"undefined\" ? global : window));\n\n//# sourceMappingURL=qt.js.map\n","function QMLBoolean(val) {\n  return !!val;\n}\nQMLBoolean.plainType = true;\nQmlWeb.qmlBoolean = QMLBoolean;\n","function QMLInteger(val) {\n  return val | 0;\n}\nQMLInteger.plainType = true;\nQmlWeb.qmlInteger = QMLInteger;\n","function QMLList(meta) {\n  const list = [];\n  if (meta.object instanceof Array) {\n    for (const i in meta.object) {\n      list.push(QmlWeb.construct({\n        object: meta.object[i],\n        parent: meta.parent,\n        context: meta.context\n      }));\n    }\n  } else if (meta.object instanceof QmlWeb.QMLMetaElement) {\n    list.push(QmlWeb.construct({\n      object: meta.object,\n      parent: meta.parent,\n      context: meta.context\n    }));\n  }\n\n  return list;\n}\nQMLList.plainType = true;\nQmlWeb.qmlList = QMLList;\n","function QMLNumber(val) {\n  return +val;\n}\nQMLNumber.plainType = true;\nQmlWeb.qmlNumber = QMLNumber;\n","function QMLString(val) {\n  return `${val}`;\n}\nQMLString.plainType = true;\nQmlWeb.qmlString = QMLString;\n","function QMLUrl(val) {\n  return QmlWeb.engine.$resolvePath(`${val}`);\n}\nQMLUrl.plainType = true;\nQmlWeb.qmlUrl = QMLUrl;\n","function QMLVariant(val) {\n  return val;\n}\nQMLVariant.plainType = true;\nQmlWeb.qmlVariant = QMLVariant;\n","/* eslint accessor-pairs: 0 */\n\nfunction setupGetter(obj, propName, func) {\n  Object.defineProperty(obj, propName, {\n    get: func,\n    configurable: true,\n    enumerable: true\n  });\n}\n\nfunction setupSetter(obj, propName, func) {\n  Object.defineProperty(obj, propName, {\n    set: func,\n    configurable: true,\n    enumerable: false\n  });\n}\n\nfunction setupGetterSetter(obj, propName, getter, setter) {\n  Object.defineProperty(obj, propName, {\n    get: getter,\n    set: setter,\n    configurable: true,\n    enumerable: false\n  });\n}\n\nQmlWeb.setupGetter = setupGetter;\nQmlWeb.setupSetter = setupSetter;\nQmlWeb.setupGetterSetter = setupGetterSetter;\n","/* @license\n\nMIT License\n\nCopyright (c) 2011 Lauri Paimen <lauri@paimen.info>\nCopyright (c) 2015 Pavel Vasev <pavel.vasev@gmail.com> - initial and working\n                                                         import implementation.\nCopyright (c) 2016 QmlWeb contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\n/**\n * Get URL contents.\n * @param url {String} Url to fetch.\n * @param skipExceptions {bool} when turned on, ignore exeptions and return\n *        false. This feature is used by readQmlDir.\n * @private\n * @return {mixed} String of contents or false in errors.\n */\nfunction getUrlContents(url, skipExceptions) {\n  if (typeof QmlWeb.urlContentCache[url] === \"undefined\") {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url, false);\n\n    if (skipExceptions) {\n      try {\n        xhr.send(null);\n      } catch (e) {\n        return false;\n      }\n      // it is OK to not have logging here, because DeveloperTools already will\n      // have red log record\n    } else {\n      xhr.send(null);\n    }\n\n    if (xhr.status !== 200 && xhr.status !== 0) { // 0 if accessing with file://\n      console.log(`Retrieving ${url} failed: ${xhr.responseText}`, xhr);\n      return false;\n    }\n    QmlWeb.urlContentCache[url] = xhr.responseText;\n  }\n  return QmlWeb.urlContentCache[url];\n}\nif (typeof QmlWeb.urlContentCache === \"undefined\") {\n  QmlWeb.urlContentCache = {};\n}\n\n/**\n * Read qmldir spec file at directory.\n * @param url Url of the directory\n * @return {Object} Object, where .internals lists qmldir internal references\n *                          and .externals lists qmldir external references.\n */\n\n/*  Note on how importing works.\n\nparseQML gives us `tree.$imports` variable, which contains information from\n`import` statements.\n\nAfter each call to parseQML, we call engine.loadImports(tree.$imports).\nIt in turn invokes readQmlDir() calls for each import, with respect to current\ncomponent base path and engine.importPathList().\n\nWe keep all component names from all qmldir files in global variable\n`engine.qmldir`.\n\nIn construct() function, we use `engine.qmldir` for component url lookup.\n\nReference import info: http://doc.qt.io/qt-5/qtqml-syntax-imports.html\nAlso please look at notes and TODO's in qtcore.js::loadImports() and\nqtcore.js::construct() methods.\n*/\n\nfunction readQmlDir(url) {\n  // in case 'url' is empty, do not attach \"/\"\n  // Q1: when this happen?\n  const qmldirFileUrl = url.length > 0 ? `${url}/qmldir` : \"qmldir\";\n\n  const parsedUrl = QmlWeb.engine.$parseURI(qmldirFileUrl);\n\n  let qmldir;\n  if (parsedUrl.scheme === \"qrc://\") {\n    qmldir = QmlWeb.qrc[parsedUrl.path];\n  } else {\n    qmldir = getUrlContents(qmldirFileUrl, true) || undefined;\n  }\n\n  const internals = {};\n  const externals = {};\n\n  if (qmldir === undefined) {\n    return false;\n  }\n\n  // we have to check for \"://\"\n  // In that case, item path is meant to be absolute, and we have no need to\n  // prefix it with base url\n  function makeurl(path) {\n    if (path.indexOf(\"://\") > 0) {\n      return path;\n    }\n    return `${url}/${path}`;\n  }\n\n  const lines = qmldir.split(/\\r?\\n/);\n  for (let i = 0; i < lines.length; i++) {\n    // trim\n    const line = lines[i].replace(/^\\s+|\\s+$/g, \"\");\n    if (!line.length || line[0] === \"#\") {\n      // Empty line or comment\n      continue;\n    }\n    const match = line.split(/\\s+/);\n    if (match.length === 2 || match.length === 3) {\n      if (match[0] === \"plugin\") {\n        console.log(`${url}: qmldir plugins are not supported!`);\n      } else if (match[0] === \"internal\") {\n        internals[match[1]] = { url: makeurl(match[2]) };\n      } else if (match.length === 2) {\n        externals[match[0]] = { url: makeurl(match[1]) };\n      } else {\n        externals[match[0]] = { url: makeurl(match[2]), version: match[1] };\n      }\n    } else {\n      console.log(`${url}: unmatched: ${line}`);\n    }\n  }\n  return { internals, externals };\n}\n\nQmlWeb.getUrlContents = getUrlContents;\nQmlWeb.readQmlDir = readQmlDir;\n","function importJavascriptInContext(jsData, $context) {\n  /* Remove any \".pragma\" statements, as they are not valid JavaScript */\n  const source = jsData.source.replace(/\\.pragma.*(?:\\r\\n|\\r|\\n)/, \"\\n\");\n  // TODO: pass more objects to the scope?\n  new Function(\"jsData\", \"$context\", `\n    with(QmlWeb) with ($context) {\n      ${source}\n    }\n    ${jsData.exports.map(sym => `$context.${sym} = ${sym};`).join(\"\")}\n  `)(jsData, $context);\n}\n\nQmlWeb.importJavascriptInContext = importJavascriptInContext;\n","QmlWeb.executionContext = null;\n\nconst modules = {\n  Main: {\n    int: QmlWeb.qmlInteger,\n    real: QmlWeb.qmlNumber,\n    double: QmlWeb.qmlNumber,\n    string: QmlWeb.qmlString,\n    bool: QmlWeb.qmlBoolean,\n    list: QmlWeb.qmlList,\n    color: QmlWeb.QColor,\n    enum: QmlWeb.qmlNumber,\n    url: QmlWeb.qmlUrl,\n    variant: QmlWeb.qmlVariant,\n    var: QmlWeb.qmlVariant\n  }\n};\n\n// All object constructors\nQmlWeb.constructors = modules.Main;\n\nconst dependants = {};\n\nconst perImportContextConstructors = {};\nlet importContextIds = 0;\n\n// Helper. Adds a type to the constructor list\nfunction registerGlobalQmlType(name, type) {\n  QmlWeb[type.name] = type;\n  QmlWeb.constructors[name] = type;\n  modules.Main[name] = type;\n}\n\n// Helper. Register a type to a module\nfunction registerQmlType(options, constructor) {\n  if (constructor !== undefined) {\n    options.constructor = constructor;\n  }\n\n  if (typeof options.baseClass === \"string\") {\n    // TODO: Does not support version specification (yet?)\n    let baseModule;\n    let baseName;\n    const dot = options.baseClass.lastIndexOf(\".\");\n    if (dot === -1) {\n      baseModule = options.module;\n      baseName = options.baseClass;\n    } else {\n      baseModule = options.baseClass.substring(0, dot);\n      baseName = options.baseClass.substring(dot + 1);\n    }\n    const found = (modules[baseModule] || [])\n                    .filter(descr => descr.name === baseName);\n    if (found.length > 0) {\n      // Ok, we found our base class\n      options.baseClass = found[0].constructor;\n    } else {\n      // Base class not found, delay the loading\n      const baseId = [baseModule, baseName].join(\".\");\n      if (!dependants.hasOwnProperty(baseId)) {\n        dependants[baseId] = [];\n      }\n      dependants[baseId].push(options);\n      return;\n    }\n  }\n\n  const descriptor = typeof options === \"function\" ? {\n    module: options.module,\n    name: options.element,\n    versions: options.versions,\n    baseClass: options.baseClass,\n    enums: options.enums,\n    signals: options.signals,\n    defaultProperty: options.defaultProperty,\n    properties: options.properties,\n    constructor: options\n  } : options;\n\n  descriptor.constructor.$qmlTypeInfo = {\n    enums: descriptor.enums,\n    signals: descriptor.signals,\n    defaultProperty: descriptor.defaultProperty,\n    properties: descriptor.properties\n  };\n\n  if (descriptor.global) {\n    registerGlobalQmlType(descriptor.name, descriptor.constructor);\n  }\n\n  const moduleDescriptor = {\n    name: descriptor.name,\n    versions: descriptor.versions,\n    constructor: descriptor.constructor\n  };\n\n  if (typeof modules[descriptor.module] === \"undefined\") {\n    modules[descriptor.module] = [];\n  }\n  modules[descriptor.module].push(moduleDescriptor);\n\n\n  if (typeof descriptor.baseClass !== \"undefined\") {\n    inherit(descriptor.constructor, descriptor.baseClass);\n  }\n\n  const id = [descriptor.module, descriptor.name].join(\".\");\n  if (dependants.hasOwnProperty(id)) {\n    dependants[id].forEach(opt => registerQmlType(opt));\n    dependants[id].length = 0;\n  }\n}\n\nfunction getConstructor(moduleName, version, name) {\n  if (typeof modules[moduleName] !== \"undefined\") {\n    for (let i = 0; i < modules[moduleName].length; ++i) {\n      const type = modules[moduleName][i];\n      if (type.name === name && type.versions.test(version)) {\n        return type.constructor;\n      }\n    }\n  }\n  return null;\n}\n\nfunction getModuleConstructors(moduleName, version) {\n  const constructors = {};\n  if (typeof modules[moduleName] === \"undefined\") {\n    console.warn(`module \"${moduleName}\" not found`);\n    return constructors;\n  }\n  for (let i = 0; i < modules[moduleName].length; ++i) {\n    const module = modules[moduleName][i];\n    if (module.versions.test(version)) {\n      constructors[module.name] = module.constructor;\n    }\n  }\n  return constructors;\n}\n\nfunction loadImports(self, imports) {\n  const mergeObjects = QmlWeb.helpers.mergeObjects;\n  let constructors = mergeObjects(modules.Main);\n  if (imports.filter(row => row[1] === \"QtQml\").length === 0 &&\n      imports.filter(row => row[1] === \"QtQuick\").length === 1) {\n    imports.push([\"qmlimport\", \"QtQml\", 2, \"\", true]);\n  }\n  for (let i = 0; i < imports.length; ++i) {\n    const [, moduleName, moduleVersion, moduleAlias] = imports[i];\n    const moduleConstructors = getModuleConstructors(moduleName, moduleVersion);\n\n    if (moduleAlias !== \"\") {\n      constructors[moduleAlias] = mergeObjects(\n        constructors[moduleAlias],\n        moduleConstructors\n      );\n    } else {\n      constructors = mergeObjects(constructors, moduleConstructors);\n    }\n  }\n  self.importContextId = importContextIds++;\n  perImportContextConstructors[self.importContextId] = constructors;\n  QmlWeb.constructors = constructors; // TODO: why do we need this?\n}\n\nfunction inherit(constructor, baseClass) {\n  const oldProto = constructor.prototype;\n  constructor.prototype = Object.create(baseClass.prototype);\n  Object.getOwnPropertyNames(oldProto).forEach(prop => {\n    constructor.prototype[prop] = oldProto[prop];\n  });\n  constructor.prototype.constructor = baseClass;\n}\n\nfunction callSuper(self, meta) {\n  const info = meta.super.$qmlTypeInfo || {};\n  meta.super = meta.super.prototype.constructor;\n  meta.super.call(self, meta);\n\n  if (info.enums) {\n    // TODO: not exported to the whole file scope yet\n    Object.keys(info.enums).forEach(name => {\n      self[name] = info.enums[name];\n\n      if (!global[name]) {\n        global[name] = self[name]; // HACK\n      }\n    });\n  }\n  if (info.properties) {\n    Object.keys(info.properties).forEach(name => {\n      let desc = info.properties[name];\n      if (typeof desc === \"string\") {\n        desc = { type: desc };\n      }\n      QmlWeb.createProperty(desc.type, self, name, desc);\n    });\n  }\n  if (info.signals) {\n    Object.keys(info.signals).forEach(name => {\n      const params = info.signals[name];\n      self[name] = QmlWeb.Signal.signal(params);\n    });\n  }\n  if (info.defaultProperty) {\n    self.$defaultProperty = info.defaultProperty;\n  }\n}\n\n/**\n * QML Object constructor.\n * @param {Object} meta Meta information about the object and the creation\n *                      context\n * @return {Object} New qml object\n */\nfunction construct(meta) {\n  let item;\n\n  let constructors = perImportContextConstructors[meta.context.importContextId];\n\n  const classComponents = meta.object.$class.split(\".\");\n  for (let ci = 0; ci < classComponents.length; ++ci) {\n    const c = classComponents[ci];\n    constructors = constructors[c];\n    if (constructors === undefined) {\n      break;\n    }\n  }\n\n  if (constructors !== undefined) {\n    const constructor = constructors;\n    meta.super = constructor;\n    item = new constructor(meta);\n    meta.super = undefined;\n  } else {\n    // Load component from file. Please look at import.js for main notes.\n    // Actually, we have to use that order:\n    // 1) try to load component from current basePath\n    // 2) from importPathList\n    // 3) from directories in imports statements and then\n    // 4) from qmldir files\n    // Currently we support only 1,2 and 4 and use order: 4,1,2\n    // TODO: engine.qmldirs is global for all loaded components.\n    //       That's not qml's original behaviour.\n    const qdirInfo = QmlWeb.engine.qmldirs[meta.object.$class];\n    // Are we have info on that component in some imported qmldir files?\n\n    /* This will also be set in applyProperties, but needs to be set here\n     * for Qt.createComponent to have the correct context. */\n    QmlWeb.executionContext = meta.context;\n\n    let filePath;\n    if (qdirInfo) {\n      filePath = qdirInfo.url;\n    } else if (classComponents.length === 2) {\n      const qualified = QmlWeb.engine.qualifiedImportPath(\n        meta.context.importContextId, classComponents[0]\n      );\n      filePath = `${qualified}${classComponents[1]}.qml`;\n    } else {\n      filePath = `${classComponents[0]}.qml`;\n    }\n\n    const component = QmlWeb.Qt.createComponent(filePath);\n\n    if (!component) {\n      throw new Error(`No constructor found for ${meta.object.$class}`);\n    }\n\n    item = component.$createObject(meta.parent);\n    if (typeof item.dom !== \"undefined\") {\n      item.dom.className += ` ${classComponents[classComponents.length - 1]}`;\n      if (meta.object.id) {\n        item.dom.className += `  ${meta.object.id}`;\n      }\n    }\n    // Handle default properties\n  }\n\n  // id\n  if (meta.object.id) {\n    QmlWeb.setupGetterSetter(\n      meta.context, meta.object.id,\n      () => item,\n      () => {}\n    );\n  }\n\n  // keep path in item for probale use it later in Qt.resolvedUrl\n  item.$context.$basePath = QmlWeb.engine.$basePath; //gut\n\n  // We want to use the item's scope, but this Component's imports\n  item.$context.importContextId = meta.context.importContextId;\n\n  // Apply properties (Bindings won't get evaluated, yet)\n  QmlWeb.applyProperties(meta.object, item, item, item.$context);\n\n  return item;\n}\n\nQmlWeb.modules = modules;\nQmlWeb.registerGlobalQmlType = registerGlobalQmlType;\nQmlWeb.registerQmlType = registerQmlType;\nQmlWeb.getConstructor = getConstructor;\nQmlWeb.loadImports = loadImports;\nQmlWeb.callSuper = callSuper;\nQmlWeb.construct = construct;\n","/**\n * Create property getters and setters for object.\n * @param {Object} obj Object for which gsetters will be set\n * @param {String} propName Property name\n * @param {Object} [options] Options that allow finetuning of the property\n */\nfunction createProperty(type, obj, propName, options = {}) {\n  const QMLProperty = QmlWeb.QMLProperty;\n  const prop = new QMLProperty(type, obj, propName);\n  obj[`${propName}Changed`] = prop.changed;\n  obj.$properties[propName] = prop;\n  obj.$properties[propName].set(options.initialValue, QMLProperty.ReasonInit);\n\n  const getter = () => obj.$properties[propName].get();\n  let setter;\n  if (options.readOnly) {\n    setter = function(newVal) {\n      if (!obj.$canEditReadOnlyProperties) {\n        throw new Error(`property '${propName}' has read only access`);\n      }\n      obj.$properties[propName].set(newVal, QMLProperty.ReasonUser);\n    };\n  } else {\n    setter = function(newVal) {\n      obj.$properties[propName].set(newVal, QMLProperty.ReasonUser);\n    };\n  }\n  QmlWeb.setupGetterSetter(obj, propName, getter, setter);\n  if (obj.$isComponentRoot) {\n    QmlWeb.setupGetterSetter(obj.$context, propName, getter, setter);\n  }\n}\n\n/**\n * Apply properties from metaObject to item.\n * @param {Object} metaObject Source of properties\n * @param {Object} item Target of property apply\n * @param {Object} objectScope Scope in which properties should be evaluated\n * @param {Object} componentScope Component scope in which properties should be\n *                 evaluated\n */\nfunction applyProperties(metaObject, item, objectScopeIn, componentScope) {\n  const QMLProperty = QmlWeb.QMLProperty;\n  const objectScope = objectScopeIn || item;\n  QmlWeb.executionContext = componentScope;\n\n  if (metaObject.$children && metaObject.$children.length !== 0) {\n    if (item.$defaultProperty) {\n      item.$properties[item.$defaultProperty].set(\n        metaObject.$children, QMLProperty.ReasonInit,\n        objectScope, componentScope\n      );\n    } else {\n      throw new Error(\"Cannot assign to unexistant default property\");\n    }\n  }\n  // We purposefully set the default property AFTER using it, in order to only\n  // have it applied for instanciations of this component, but not for its\n  // internal children\n  if (metaObject.$defaultProperty) {\n    item.$defaultProperty = metaObject.$defaultProperty;\n  }\n\n  for (const i in metaObject) {\n    const value = metaObject[i];\n    if (i === \"id\" || i === \"$class\") { // keep them\n      item[i] = value;\n      continue;\n    }\n\n    // skip global id's and internal values\n    if (i === \"id\" || i[0] === \"$\") { // TODO: what? See above.\n      continue;\n    }\n\n    // slots\n    if (i.indexOf(\"on\") === 0 && i.length > 2 && /[A-Z]/.test(i[2])) {\n      const signalName = i[2].toLowerCase() + i.slice(3);\n      if (connectSignal(item, signalName, value, objectScope, componentScope)) {\n        continue;\n      }\n      if (item.$setCustomSlot) {\n        item.$setCustomSlot(signalName, value, objectScope, componentScope);\n        continue;\n      }\n    }\n\n    if (value instanceof Object) {\n      if (applyProperty(item, i, value, objectScope, componentScope)) {\n        continue;\n      }\n    }\n\n    if (item.$properties && i in item.$properties) {\n      item.$properties[i].set(value, QMLProperty.ReasonInit, objectScope,\n                                                             componentScope);\n    } else if (i in item) {\n      item[i] = value;\n    } else if (item.$setCustomData) {\n      item.$setCustomData(i, value);\n    } else {\n      console.warn(\n        `Cannot assign to non-existent property \"${i}\". Ignoring assignment.`\n      );\n    }\n  }\n}\n\nfunction applyProperty(item, i, value, objectScope, componentScope) {\n  const QMLProperty = QmlWeb.QMLProperty;\n\n  if (value instanceof QmlWeb.QMLSignalDefinition) {\n    item[i] = QmlWeb.Signal.signal(value.parameters);\n    if (item.$isComponentRoot) {\n      componentScope[i] = item[i];\n    }\n    return true;\n  }\n\n  if (value instanceof QmlWeb.QMLMethod) {\n    value.compile();\n    item[i] = value.eval(objectScope, componentScope,\n      componentScope.$basePath);\n    if (item.$isComponentRoot) {\n      componentScope[i] = item[i];\n    }\n    return true;\n  }\n\n  if (value instanceof QmlWeb.QMLAliasDefinition) {\n    // TODO\n    // 1. Alias must be able to point to prop or id of local object,\n    //    eg: property alias q: t\n    // 2. Alias may have same name as id it points to: property alias\n    //    someid: someid\n    // 3. Alias proxy (or property proxy) to proxy prop access to selected\n    //    incapsulated object. (think twice).\n    createProperty(\"alias\", item, i);\n    item.$properties[i].componentScope = componentScope;\n    item.$properties[i].componentScopeBasePath = componentScope.$basePath;\n    item.$properties[i].val = value;\n    item.$properties[i].get = function() {\n      const obj = this.componentScope[this.val.objectName];\n      const propertyName = this.val.propertyName;\n      return propertyName ? obj.$properties[propertyName].get() : obj;\n    };\n    item.$properties[i].set = function(newVal, reason, _objectScope,\n                                       _componentScope) {\n      if (!this.val.propertyName) {\n        throw new Error(\"Cannot set alias property pointing to an QML object.\");\n      }\n      const obj = this.componentScope[this.val.objectName];\n      const prop = obj.$properties[this.val.propertyName];\n      prop.set(newVal, reason, _objectScope, _componentScope);\n    };\n\n    if (value.propertyName) {\n      const con = function(prop) {\n        const obj = prop.componentScope[prop.val.objectName];\n        if (!obj) {\n          console.error(\"qtcore: target object \", prop.val.objectName,\n                        \" not found for alias \", prop);\n        } else {\n          const targetProp = obj.$properties[prop.val.propertyName];\n          if (!targetProp) {\n            console.error(\n              \"qtcore: target property [\", prop.val.objectName, \"].\",\n              prop.val.propertyName, \" not found for alias \", prop.name\n            );\n          } else {\n            // targetProp.changed.connect( prop.changed );\n            // it is not sufficient to connect to `changed` of source property\n            // we have to propagate own changed to it too\n            // seems the best way to do this is to make them identical?..\n            // prop.changed = targetProp.changed;\n            // obj[`${i}Changed`] = prop.changed;\n            // no. because those object might be destroyed later.\n            let loopWatchdog = false;\n            targetProp.changed.connect(item, (...args) => {\n              if (loopWatchdog) return;\n              loopWatchdog = true;\n              prop.changed.apply(item, args);\n              loopWatchdog = false;\n            });\n            prop.changed.connect(obj, (...args) => {\n              if (loopWatchdog) return;\n              loopWatchdog = true;\n              targetProp.changed.apply(obj, args);\n              loopWatchdog = false;\n            });\n          }\n        }\n      };\n      QmlWeb.engine.pendingOperations.push([con, item.$properties[i]]);\n    }\n    return true;\n  }\n\n  if (value instanceof QmlWeb.QMLPropertyDefinition) {\n    createProperty(value.type, item, i);\n    item.$properties[i].set(value.value, QMLProperty.ReasonInit,\n                            objectScope, componentScope);\n    return true;\n  }\n\n  if (item[i] && value instanceof QmlWeb.QMLMetaPropertyGroup) {\n    // Apply properties one by one, otherwise apply at once\n    applyProperties(value, item[i], objectScope, componentScope);\n    return true;\n  }\n\n  return false;\n}\n\nfunction connectSignal(item, signalName, value, objectScope, componentScope) {\n  if (!item[signalName]) {\n    console.warn(`No signal called ${signalName} found!`);\n    return undefined;\n  } else if (typeof item[signalName].connect !== \"function\") {\n    console.warn(`${signalName} is not a signal!`);\n    return undefined;\n  }\n\n  if (!value.compiled) {\n    const params = [];\n    for (const j in item[signalName].parameters) {\n      params.push(item[signalName].parameters[j].name);\n    }\n    // Wrap value.src in IIFE in case it includes a \"return\"\n    value.src = `(\n      function(${params.join(\", \")}) {\n        QmlWeb.executionContext = __executionContext;\n        QmlWeb.engine.$oldBasePath = QmlWeb.engine.$basePath;\n        QmlWeb.engine.$basePath = \"${componentScope.$basePath}\";\n        try {\n          (function() {\n            ${value.src}\n          })();\n        } finally {\n          QmlWeb.engine.$basePath = QmlWeb.engine.$oldBasePath;\n        }\n      }\n    )`;\n    value.isFunction = false;\n    value.compile();\n  }\n  // Don't pass in __basePath argument, as QMLEngine.$basePath is set in the\n  // value.src, as we need it set at the time the slot is called.\n  const slot = value.eval(objectScope, componentScope);\n  item[signalName].connect(item, slot);\n  return slot;\n}\n\nQmlWeb.createProperty = createProperty;\nQmlWeb.applyProperties = applyProperties;\nQmlWeb.connectSignal = connectSignal;\n","/* @license\n\nMIT License\n\nCopyright (c) 2011 Lauri Paimen <lauri@paimen.info>\nCopyright (c) 2013 Anton Kreuzkamp <akreuzkamp@web.de>\nCopyright (c) 2016 QmlWeb contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nclass QMLMethod extends QmlWeb.QMLBinding {\n}\n\n/**\n * Create an object representing a QML property definition.\n * @param {String} type The type of the property\n * @param {Array} value The default value of the property\n * @return {Object} Object representing the defintion\n */\nclass QMLPropertyDefinition {\n  constructor(type, value) {\n    this.type = type;\n    this.value = value;\n  }\n}\n\nclass QMLAliasDefinition {\n  constructor(objName, propName) {\n    this.objectName = objName;\n    this.propertyName = propName;\n  }\n}\n\n/**\n * Create an object representing a QML signal definition.\n * @param {Array} params The parameters the signal ships\n * @return {Object} Object representing the defintion\n */\nclass QMLSignalDefinition {\n  constructor(params) {\n    this.parameters = params;\n  }\n}\n\n/**\n * Create an object representing a group of QML properties (like anchors).\n * @return {Object} Object representing the group\n */\nclass QMLMetaPropertyGroup {\n}\n\n/**\n * Create an object representing a QML element.\n * @param {String} type Type of the element\n * @param {String} onProp Name of the property specified with the \"on\" keyword\n */\nclass QMLMetaElement {\n  constructor(type, onProp) {\n    this.$class = type;\n    this.$children = [];\n    this.$on = onProp;\n  }\n}\n\n// Convert parser tree to the format understood by engine\nfunction convertToEngine(tree) {\n  return convertToEngine.walk(tree);\n}\n\nfunction stringifyDots(elem) {\n  let sub = elem;\n  const path = [];\n  while (sub[0] === \"dot\") {\n    path.push(sub[1]);\n    sub = sub[2];\n  }\n  path.push(sub);\n  return path.join(\".\");\n}\n\nfunction applyProp(item, name, val) {\n  let curr = item; // output structure\n  let sub = name; // input structure\n  while (sub[0] === \"dot\") {\n    if (!curr[sub[1]]) {\n      curr[sub[1]] = new QMLMetaPropertyGroup();\n    }\n    curr = curr[sub[1]];\n    sub = sub[2];\n  }\n  curr[sub] = val;\n}\n\nconvertToEngine.walkers = {\n  toplevel: (imports, statement) => {\n    const item = { $class: \"Component\" };\n    item.$imports = imports;\n    item.$children = [convertToEngine.walk(statement)];\n    return item;\n  },\n  qmlelem: (elem, onProp, statements) => {\n    const item = new QMLMetaElement(stringifyDots(elem), onProp);\n\n    for (const i in statements) {\n      const statement = statements[i];\n      const name = statement[1];\n      const val = convertToEngine.walk(statement);\n      switch (statement[0]) {\n        case \"qmldefaultprop\":\n          item.$defaultProperty = name;\n          item[name] = val;\n          break;\n        case \"qmlprop\":\n        case \"qmlpropdef\":\n        case \"qmlaliasdef\":\n        case \"qmlmethod\":\n        case \"qmlsignaldef\":\n          applyProp(item, name, val);\n          break;\n        case \"qmlelem\":\n          item.$children.push(val);\n          break;\n        case \"qmlobjdef\":\n          throw new Error(\n            \"qmlobjdef support was removed, update qmlweb-parser to ^0.3.0.\"\n          );\n        case \"qmlobj\":\n          // Create object to item\n          item[name] = item[name] || new QMLMetaPropertyGroup();\n          for (const j in val) {\n            item[name][j] = val[j];\n          }\n          break;\n        default:\n          console.log(\"Unknown statement\", statement);\n      }\n    }\n    // Make $children be either a single item or an array, if it's more than one\n    if (item.$children.length === 1) {\n      item.$children = item.$children[0];\n    }\n\n    return item;\n  },\n  qmlprop: (name, tree, src) => {\n    if (name === \"id\") {\n      // id property\n      return tree[1][1];\n    }\n    return convertToEngine.bindout(tree, src);\n  },\n  qmlobjdef: (name, property, tree, src) =>\n    convertToEngine.bindout(tree, src),\n  qmlobj: (elem, statements) => {\n    const item = {};\n    for (const i in statements) {\n      const statement = statements[i];\n      const name = statement[1];\n      const val = convertToEngine.walk(statement);\n      if (statement[0] === \"qmlprop\") {\n        applyProp(item, name, val);\n      }\n    }\n    return item;\n  },\n  qmlmethod: (name, tree, src) =>\n    new QMLMethod(src),\n  qmlpropdef: (name, type, tree, src) =>\n    new QMLPropertyDefinition(\n        type,\n        tree ? convertToEngine.bindout(tree, src) : undefined\n    ),\n  qmlaliasdef: (name, objName, propName) =>\n    new QMLAliasDefinition(objName, propName),\n  qmlsignaldef: (name, params) =>\n    new QMLSignalDefinition(params),\n  qmldefaultprop: tree => convertToEngine.walk(tree),\n  name: src => {\n    if (src === \"true\" || src === \"false\") {\n      return src === \"true\";\n    } else if (typeof src === \"boolean\") {\n      // TODO: is this needed? kept for compat with ==\n      return src;\n    }\n    return new QmlWeb.QMLBinding(src, [\"name\", src]);\n  },\n  num: src => +src,\n  string: src => String(src),\n  array: (tree, src) => {\n    const a = [];\n    let isList = false;\n    let hasBinding = false;\n    for (const i in tree) {\n      const val = convertToEngine.bindout(tree[i]);\n      a.push(val);\n\n      if (val instanceof QMLMetaElement) {\n        isList = true;\n      } else if (val instanceof QmlWeb.QMLBinding) {\n        hasBinding = true;\n      }\n    }\n\n    if (hasBinding) {\n      if (isList) {\n        throw new TypeError(\n          \"An array may either contain bindings or Element definitions.\"\n        );\n      }\n      return new QmlWeb.QMLBinding(src, tree);\n    }\n\n    return a;\n  }\n};\n\nconvertToEngine.walk = function(tree) {\n  const type = tree[0];\n  const walker = convertToEngine.walkers[type];\n  if (!walker) {\n    console.log(`No walker for ${type}`);\n    return undefined;\n  }\n  return walker.apply(type, tree.slice(1));\n};\n\n// Try to bind out tree and return static variable instead of binding\nconvertToEngine.bindout = function(statement, binding) {\n  // We want to process the content of the statement\n  // (but still handle the case, we get the content directly)\n  const tree = statement[0] === \"stat\" ? statement[1] : statement;\n\n  const type = tree[0];\n  const walker = convertToEngine.walkers[type];\n  if (walker) {\n    return walker.apply(type, tree.slice(1));\n  }\n  return new QmlWeb.QMLBinding(binding, tree);\n};\n\n// Help logger\nconvertToEngine.amIn = function(str, tree) {\n  console.log(str);\n  if (tree) console.log(JSON.stringify(tree, null, \"  \"));\n};\n\nfunction loadParser() {\n  if (typeof QmlWeb.parse !== \"undefined\") {\n    return;\n  }\n\n  console.log(\"Loading parser...\");\n  const tags = document.getElementsByTagName(\"script\");\n  for (const i in tags) {\n    if (tags[i].src && tags[i].src.indexOf(\"/qt.\") !== -1) {\n      const src = tags[i].src.replace(\"/qt.\", \"/qmlweb.parser.\");\n      // TODO: rewrite to async loading\n      const xhr = new XMLHttpRequest();\n      xhr.open(\"GET\", src, false);\n      xhr.send(null);\n      if (xhr.status !== 200 && xhr.status !== 0) {\n        // xhr.status === 0 if accessing with file://\n        throw new Error(\"Could not load QmlWeb parser!\");\n      }\n      new Function(xhr.responseText)();\n      QmlWeb.parse = QmlWeb.parse;\n      QmlWeb.jsparse = QmlWeb.jsparse;\n      return;\n    }\n  }\n}\n\n// Function to parse qml and output tree expected by engine\nfunction parseQML(src, file) {\n  loadParser();\n  QmlWeb.parse.nowParsingFile = file;\n  const parsetree = QmlWeb.parse(src, QmlWeb.parse.QmlDocument);\n  return convertToEngine(parsetree);\n}\n\nQmlWeb.QMLMethod = QMLMethod;\nQmlWeb.QMLPropertyDefinition = QMLPropertyDefinition;\nQmlWeb.QMLAliasDefinition = QMLAliasDefinition;\nQmlWeb.QMLSignalDefinition = QMLSignalDefinition;\nQmlWeb.QMLMetaPropertyGroup = QMLMetaPropertyGroup;\nQmlWeb.QMLMetaElement = QMLMetaElement;\nQmlWeb.convertToEngine = convertToEngine;\nQmlWeb.loadParser = loadParser;\nQmlWeb.parseQML = parseQML;\n","const QmlWeb = {};\n\nglobal.QmlWeb = QmlWeb;\n","let objectIds = 0;\n\nclass QObject {\n  constructor(parent) {\n    this.$parent = parent;\n    if (parent && parent.$tidyupList) {\n      parent.$tidyupList.push(this);\n    }\n\n    // List of things to tidy up when deleting this object.\n    this.$tidyupList = [];\n    this.$properties = {};\n    this.$signals = [];\n\n    this.objectId = objectIds++;\n  }\n\n  $delete() {\n    if (this.$Component) {\n      this.$Component.destruction();\n    }\n\n    while (this.$tidyupList.length > 0) {\n      const item = this.$tidyupList[0];\n      if (item.$delete) {\n        // It's a QObject\n        item.$delete();\n      } else {\n        // It must be a signal\n        item.disconnect(this);\n      }\n    }\n\n    for (const i in this.$properties) {\n      const prop = this.$properties[i];\n      while (prop.$tidyupList.length > 0) {\n        prop.$tidyupList[0].disconnect(prop);\n      }\n    }\n\n    if (this.$parent && this.$parent.$tidyupList) {\n      const index = this.$parent.$tidyupList.indexOf(this);\n      this.$parent.$tidyupList.splice(index, 1);\n    }\n\n    // must do this:\n    // 1) parent will be notified and erase object from it's children.\n    // 2) DOM node will be removed.\n    this.parent = undefined;\n\n    // Disconnect any slots connected to any of our signals. Do this after\n    // clearing the parent, as that relies on parentChanged being handled.\n    for (const i in this.$signals) {\n      this.$signals[i].disconnect();\n    }\n  }\n\n  // must have a `destroy` method\n  // http://doc.qt.io/qt-5/qtqml-javascript-dynamicobjectcreation.html\n  destroy() {\n    this.$delete();\n  }\n}\n\nQmlWeb.QObject = QObject;\n","class JSItemModel {\n  constructor() {\n    this.roleNames = [];\n\n    const Signal = QmlWeb.Signal;\n    this.dataChanged = Signal.signal([\n      { type: \"int\", name: \"startIndex\" },\n      { type: \"int\", name: \"endIndex\" }\n    ]);\n    this.rowsInserted = Signal.signal([\n      { type: \"int\", name: \"startIndex\" },\n      { type: \"int\", name: \"endIndex\" }\n    ]);\n    this.rowsMoved = Signal.signal([\n      { type: \"int\", name: \"sourceStartIndex\" },\n      { type: \"int\", name: \"sourceEndIndex\" },\n      { type: \"int\", name: \"destinationIndex\" }\n    ]);\n    this.rowsRemoved = Signal.signal([\n      { type: \"int\", name: \"startIndex\" },\n      { type: \"int\", name: \"endIndex\" }\n    ]);\n    this.modelReset = Signal.signal();\n  }\n\n  setRoleNames(names) {\n    this.roleNames = names;\n  }\n}\n\nQmlWeb.JSItemModel = JSItemModel;\n","// TODO complete implementation (with attributes `r`,`g` and `b`).\n\nclass QColor {\n  constructor(val) {\n    this.$value = \"black\";\n    if (val instanceof QColor) {\n      // Copy constructor\n      this.$value = val.$value;\n    } else if (typeof val === \"string\") {\n      this.$value = val.toLowerCase();\n    } else if (typeof val === \"number\") {\n      // we assume it is int value and must be converted to css hex with padding\n      const rgb = (Math.round(val) + 0x1000000).toString(16).substr(-6);\n      this.$value = `#${rgb}`;\n    }\n  }\n  toString() {\n    return this.$value;\n  }\n  $get() {\n    // Returns the same instance for all equivalent colors.\n    // NOTE: the returned value should not be changed using method calls, if\n    // those would be added in the future, the returned value should be wrapped.\n    if (!QColor.$colors[this.$value]) {\n      if (QColor.$colorsCount >= QColor.comparableColorsLimit) {\n        // Too many colors created, bail out to avoid memory hit\n        return this;\n      }\n      QColor.$colors[this.$value] = this;\n      QColor.$colorsCount++;\n      if (QColor.$colorsCount === QColor.comparableColorsLimit) {\n        console.warn(\n          \"QmlWeb: the number of QColor instances reached the limit set in\",\n          \"QmlWeb.QColor.comparableColorsLimit. Further created colors would\",\n          \"not be comparable to avoid memory hit.\"\n        );\n      }\n    }\n    return QColor.$colors[this.$value];\n  }\n}\nQColor.$colors = {};\nQColor.$colorsCount = 0;\nQColor.comparableColorsLimit = 10000;\nQmlWeb.QColor = QColor;\n","class QSizeF extends QmlWeb.QObject {\n  constructor(width, height) {\n    super();\n    const createProperty = QmlWeb.createProperty;\n    createProperty(\"real\", this, \"width\", { initialValue: width });\n    createProperty(\"real\", this, \"height\", { initialValue: height });\n  }\n}\n\nQmlWeb.QSizeF = QSizeF;\n","class Signal {\n  constructor(params = [], options = {}) {\n    this.connectedSlots = [];\n    this.obj = options.obj;\n    this.options = options;\n\n    this.signal = (...args) => this.execute(...args);\n    this.signal.parameters = params;\n    this.signal.connect = this.connect.bind(this);\n    this.signal.disconnect = this.disconnect.bind(this);\n    this.signal.isConnected = this.isConnected.bind(this);\n\n    // TODO Fix Keys that don't have an obj for the signal\n    if (this.obj && this.obj.$signals !== undefined) {\n      this.obj.$signals.push(this.signal);\n    }\n  }\n  execute(...args) {\n    QmlWeb.QMLProperty.pushEvalStack();\n    for (const i in this.connectedSlots) {\n      const desc = this.connectedSlots[i];\n      if (desc.type & Signal.QueuedConnection) {\n        Signal.$addQueued(desc, args);\n      } else {\n        Signal.$execute(desc, args);\n      }\n    }\n    QmlWeb.QMLProperty.popEvalStack();\n  }\n  connect(...args) {\n    let type = Signal.AutoConnection;\n    if (typeof args[args.length - 1] === \"number\") {\n      type = args.pop();\n    }\n    if (type & Signal.UniqueConnection) {\n      if (this.isConnected(...args)) {\n        return;\n      }\n    }\n    if (args.length === 1) {\n      this.connectedSlots.push({ thisObj: global, slot: args[0], type });\n    } else if (typeof args[1] === \"string\" || args[1] instanceof String) {\n      if (args[0].$tidyupList && args[0] !== this.obj) {\n        args[0].$tidyupList.push(this.signal);\n      }\n      const slot = args[0][args[1]];\n      this.connectedSlots.push({ thisObj: args[0], slot, type });\n    } else {\n      if (args[0].$tidyupList &&\n        (!this.obj || args[0] !== this.obj && args[0] !== this.obj.$parent)\n      ) {\n        args[0].$tidyupList.push(this.signal);\n      }\n      this.connectedSlots.push({ thisObj: args[0], slot: args[1], type });\n    }\n\n    // Notify object of connect\n    if (this.options.obj && this.options.obj.$connectNotify) {\n      this.options.obj.$connectNotify(this.options);\n    }\n  }\n  disconnect(...args) {\n    // type meaning:\n    //  1 = function, 2 = string\n    //  3 = object with string method,  4 = object with function\n    // No args means disconnect everything connected to this signal\n    const callType = args.length === 1\n      ? args[0] instanceof Function ? 1 : 2\n      : typeof args[1] === \"string\" || args[1] instanceof String ? 3 : 4;\n    for (let i = 0; i < this.connectedSlots.length; i++) {\n      const { slot, thisObj } = this.connectedSlots[i];\n      if (\n        args.length === 0 ||\n        callType === 1 && slot === args[0] ||\n        callType === 2 && thisObj === args[0] ||\n        callType === 3 && thisObj === args[0] && slot === args[0][args[1]] ||\n        thisObj === args[0] && slot === args[1]\n      ) {\n        if (thisObj) {\n          const index = thisObj.$tidyupList.indexOf(this.signal);\n          if (index >= 0) {\n            thisObj.$tidyupList.splice(index, 1);\n          }\n        }\n        this.connectedSlots.splice(i, 1);\n        // We have removed an item from the list so the indexes shifted one\n        // backwards\n        i--;\n      }\n    }\n\n    // Notify object of disconnect\n    if (this.options.obj && this.options.obj.$disconnectNotify) {\n      this.options.obj.$disconnectNotify(this.options);\n    }\n  }\n  isConnected(...args) {\n    const callType = args.length === 1 ? 1\n      : typeof args[1] === \"string\" || args[1] instanceof String ? 2 : 3;\n    for (const i in this.connectedSlots) {\n      const { slot, thisObj } = this.connectedSlots[i];\n      if (callType === 1 && slot === args[0] ||\n          callType === 2 && thisObj === args[0] && slot === args[0][args[1]] ||\n          thisObj === args[0] && slot === args[1]\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static signal(...args) {\n    return (new Signal(...args)).signal;\n  }\n\n  static $execute(desc, args) {\n    try {\n      desc.slot.apply(desc.thisObj, args);\n    } catch (err) {\n      console.error(\"Signal slot error:\", err.message, err,\n        Function.prototype.toString.call(desc.slot)\n      );\n    }\n  }\n\n  static $addQueued(desc, args) {\n    if (Signal.$queued.length === 0) {\n      if (global.setImmediate) {\n        global.setImmediate(Signal.$executeQueued);\n      } else {\n        global.setTimeout(Signal.$executeQueued, 0);\n      }\n    }\n    Signal.$queued.push([desc, args]);\n  }\n  static $executeQueued() {\n    // New queued signals should be executed on next tick of the event loop\n    const queued = Signal.$queued;\n    Signal.$queued = [];\n\n    QmlWeb.QMLProperty.pushEvalStack();\n    for (const i in queued) {\n      Signal.$execute(...queued[i]);\n    }\n    QmlWeb.QMLProperty.popEvalStack();\n  }\n}\n\nSignal.$queued = [];\n\nSignal.AutoConnection = 0;\nSignal.DirectConnection = 1;\nSignal.QueuedConnection = 2;\nSignal.UniqueConnection = 128;\n\nQmlWeb.Signal = Signal;\n","const Qt = {\n  rgba: (r, g, b, a) => {\n    const intr = Math.round(r * 255);\n    const intg = Math.round(g * 255);\n    const intb = Math.round(b * 255);\n    return `rgba(${intr},${intg},${intb},${a})`;\n  },\n  hsla: (h, s, l, a) => {\n    const inth = Math.round(h * 360);\n    const ints = Math.round(s * 100);\n    const intl = Math.round(l * 100);\n    return `hsla(${inth},${ints}%,${intl}%,${a})`;\n  },\n  openUrlExternally: url => {\n    const page = window.open(url, \"_blank\");\n    page.focus();\n  },\n  // Load file, parse and construct as Component (.qml)\n  createComponent: name => {\n    const engine = QmlWeb.engine;\n\n    let file = engine.$resolvePath(name);\n\n    // If \"name\" was a full URL, \"file\" will be equivalent to name and this\n    // will try and load the Component from the full URL, otherwise, this\n    // doubles as checking for the file in the current directory.\n    let tree = engine.loadComponent(file);\n\n    // If the Component is not found, and it is not a URL, look for \"name\" in\n    // this context's importSearchPaths\n    if (!tree) {\n      const nameIsUrl = engine.$parseURI(name) !== undefined;\n      if (!nameIsUrl) {\n        const moreDirs = engine.importSearchPaths(\n          QmlWeb.executionContext.importContextId);\n        for (let i = 0; i < moreDirs.length; i++) {\n          file = `${moreDirs[i]}${name}`;\n          tree = engine.loadComponent(file);\n          if (tree) break;\n        }\n      }\n    }\n\n    if (!tree) {\n      return undefined;\n    }\n\n    const QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n    const component = new QMLComponent({\n      object: tree,\n      context: QmlWeb.executionContext\n    });\n    component.$basePath = engine.extractBasePath(file);\n    component.$imports = tree.$imports;\n    component.$file = file; // just for debugging\n\n    engine.loadImports(tree.$imports, component.$basePath,\n      component.importContextId);\n\n    engine.components[name] = component;\n    return component;\n  },\n\n  createQmlObject: (src, parent, file) => {\n    const tree = QmlWeb.parseQML(src, file);\n\n    // Create and initialize objects\n\n    const QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n    const component = new QMLComponent({\n      object: tree,\n      parent,\n      context: QmlWeb.executionContext\n    });\n\n    const engine = QmlWeb.engine;\n    engine.loadImports(tree.$imports, undefined, component.importContextId);\n\n    const resolvedFile = file || Qt.resolvedUrl(\"createQmlObject_function\");\n    component.$basePath = engine.extractBasePath(resolvedFile);\n    component.$imports = tree.$imports; // for later use\n    // not just for debugging, but for basepath too, see above\n    component.$file = resolvedFile;\n\n    const obj = component.createObject(parent);\n\n    const QMLOperationState = QmlWeb.QMLOperationState;\n    if (engine.operationState !== QMLOperationState.Init &&\n        engine.operationState !== QMLOperationState.Idle) {\n      // We don't call those on first creation, as they will be called\n      // by the regular creation-procedures at the right time.\n      engine.$initializePropertyBindings();\n\n      engine.callCompletedSignals();\n    }\n\n    return obj;\n  },\n\n  // Returns url resolved relative to the URL of the caller.\n  // http://doc.qt.io/qt-5/qml-qtqml-qt.html#resolvedUrl-method\n  resolvedUrl: url => QmlWeb.qmlUrl(url),\n\n  size: function size(width, height) {\n    return new QmlWeb.QSizeF(width, height);\n  },\n\n  // Buttons masks\n  LeftButton: 1,\n  RightButton: 2,\n  MiddleButton: 4,\n  // Modifiers masks\n  NoModifier: 0,\n  ShiftModifier: 1,\n  ControlModifier: 2,\n  AltModifier: 4,\n  MetaModifier: 8,\n  KeypadModifier: 16, // Note: Not available in web\n  // Layout directions\n  LeftToRight: 0,\n  RightToLeft: 1,\n  // Orientations\n  Vertical: 0,\n  Horizontal: 1,\n  // Keys\n  Key_Escape: 27,\n  Key_Tab: 9,\n  Key_Backtab: 245,\n  Key_Backspace: 8,\n  Key_Return: 13,\n  Key_Enter: 13,\n  Key_Insert: 45,\n  Key_Delete: 46,\n  Key_Pause: 19,\n  Key_Print: 42,\n  Key_SysReq: 0,\n  Key_Clear: 12,\n  Key_Home: 36,\n  Key_End: 35,\n  Key_Left: 37,\n  Key_Up: 38,\n  Key_Right: 39,\n  Key_Down: 40,\n  Key_PageUp: 33,\n  Key_PageDown: 34,\n  Key_Shift: 16,\n  Key_Control: 17,\n  Key_Meta: 91,\n  Key_Alt: 18,\n  Key_AltGr: 0,\n  Key_CapsLock: 20,\n  Key_NumLock: 144,\n  Key_ScrollLock: 145,\n  Key_F1: 112, Key_F2: 113, Key_F3: 114, Key_F4: 115, Key_F5: 116, Key_F6: 117,\n  Key_F7: 118, Key_F8: 119, Key_F9: 120, Key_F10: 121, Key_F11: 122,\n  Key_F12: 123, Key_F13: 124, Key_F14: 125, Key_F15: 126, Key_F16: 127,\n  Key_F17: 128, Key_F18: 129, Key_F19: 130, Key_F20: 131, Key_F21: 132,\n  Key_F22: 133, Key_F23: 134, Key_F24: 135,\n  Key_F25: 0, Key_F26: 0, Key_F27: 0, Key_F28: 0, Key_F29: 0, Key_F30: 0,\n  Key_F31: 0, Key_F32: 0, Key_F33: 0, Key_F34: 0, Key_F35: 0,\n  Key_Super_L: 0,\n  Key_Super_R: 0,\n  Key_Menu: 0,\n  Key_Hyper_L: 0,\n  Key_Hyper_R: 0,\n  Key_Help: 6,\n  Key_Direction_L: 0,\n  Key_Direction_R: 0,\n  Key_Space: 32,\n  Key_Any: 32,\n  Key_Exclam: 161,\n  Key_QuoteDbl: 162,\n  Key_NumberSign: 163,\n  Key_Dollar: 164,\n  Key_Percent: 165,\n  Key_Ampersant: 166,\n  Key_Apostrophe: 222,\n  Key_ParenLeft: 168,\n  Key_ParenRight: 169,\n  Key_Asterisk: 170,\n  Key_Plus: 171,\n  Key_Comma: 188,\n  Key_Minus: 173,\n  Key_Period: 190,\n  Key_Slash: 191,\n  Key_0: 48, Key_1: 49, Key_2: 50, Key_3: 51, Key_4: 52,\n  Key_5: 53, Key_6: 54, Key_7: 55, Key_8: 56, Key_9: 57,\n  Key_Colon: 58,\n  Key_Semicolon: 59,\n  Key_Less: 60,\n  Key_Equal: 61,\n  Key_Greater: 62,\n  Key_Question: 63,\n  Key_At: 64,\n  Key_A: 65, Key_B: 66, Key_C: 67, Key_D: 68, Key_E: 69, Key_F: 70, Key_G: 71,\n  Key_H: 72, Key_I: 73, Key_J: 74, Key_K: 75, Key_L: 76, Key_M: 77, Key_N: 78,\n  Key_O: 79, Key_P: 80, Key_Q: 81, Key_R: 82, Key_S: 83, Key_T: 84, Key_U: 85,\n  Key_V: 86, Key_W: 87, Key_X: 88, Key_Y: 89, Key_Z: 90,\n  Key_BracketLeft: 219,\n  Key_Backslash: 220,\n  Key_BracketRight: 221,\n  Key_AsciiCircum: 160,\n  Key_Underscore: 167,\n  Key_QuoteLeft: 0,\n  Key_BraceLeft: 174,\n  Key_Bar: 172,\n  Key_BraceRight: 175,\n  Key_AsciiTilde: 176,\n  Key_Back: 0,\n  Key_Forward: 0,\n  Key_Stop: 0,\n  Key_VolumeDown: 182,\n  Key_VolumeUp: 183,\n  Key_VolumeMute: 181,\n  Key_multiply: 106,\n  Key_add: 107,\n  Key_substract: 109,\n  Key_divide: 111,\n  Key_News: 0,\n  Key_OfficeHome: 0,\n  Key_Option: 0,\n  Key_Paste: 0,\n  Key_Phone: 0,\n  Key_Calendar: 0,\n  Key_Reply: 0,\n  Key_Reload: 0,\n  Key_RotateWindows: 0,\n  Key_RotationPB: 0,\n  Key_RotationKB: 0,\n  Key_Save: 0,\n  Key_Send: 0,\n  Key_Spell: 0,\n  Key_SplitScreen: 0,\n  Key_Support: 0,\n  Key_TaskPane: 0,\n  Key_Terminal: 0,\n  Key_Tools: 0,\n  Key_Travel: 0,\n  Key_Video: 0,\n  Key_Word: 0,\n  Key_Xfer: 0,\n  Key_ZoomIn: 0,\n  Key_ZoomOut: 0,\n  Key_Away: 0,\n  Key_Messenger: 0,\n  Key_WebCam: 0,\n  Key_MailForward: 0,\n  Key_Pictures: 0,\n  Key_Music: 0,\n  Key_Battery: 0,\n  Key_Bluetooth: 0,\n  Key_WLAN: 0,\n  Key_UWB: 0,\n  Key_AudioForward: 0,\n  Key_AudioRepeat: 0,\n  Key_AudioRandomPlay: 0,\n  Key_Subtitle: 0,\n  Key_AudioCycleTrack: 0,\n  Key_Time: 0,\n  Key_Hibernate: 0,\n  Key_View: 0,\n  Key_TopMenu: 0,\n  Key_PowerDown: 0,\n  Key_Suspend: 0,\n  Key_ContrastAdjust: 0,\n  Key_MediaLast: 0,\n  Key_unknown: -1,\n  Key_Call: 0,\n  Key_Camera: 0,\n  Key_CameraFocus: 0,\n  Key_Context1: 0,\n  Key_Context2: 0,\n  Key_Context3: 0,\n  Key_Context4: 0,\n  Key_Flip: 0,\n  Key_Hangup: 0,\n  Key_No: 0,\n  Key_Select: 93,\n  Key_Yes: 0,\n  Key_ToggleCallHangup: 0,\n  Key_VoiceDial: 0,\n  Key_LastNumberRedial: 0,\n  Key_Execute: 43,\n  Key_Printer: 42,\n  Key_Play: 250,\n  Key_Sleep: 95,\n  Key_Zoom: 251,\n  Key_Cancel: 3,\n  // Align\n  AlignLeft: 0x0001,\n  AlignRight: 0x0002,\n  AlignHCenter: 0x0004,\n  AlignJustify: 0x0008,\n  AlignTop: 0x0020,\n  AlignBottom: 0x0040,\n  AlignVCenter: 0x0080,\n  AlignCenter: 0x0084,\n  AlignBaseline: 0x0100,\n  AlignAbsolute: 0x0010,\n  AlignLeading: 0x0001,\n  AlignTrailing: 0x0002,\n  AlignHorizontal_Mask: 0x001f,\n  AlignVertical_Mask: 0x01e0,\n  // Screen\n  PrimaryOrientation: 0,\n  PortraitOrientation: 1,\n  LandscapeOrientation: 2,\n  InvertedPortraitOrientation: 4,\n  InvertedLandscapeOrientation: 8,\n  // CursorShape\n  ArrowCursor: 0,\n  UpArrowCursor: 1,\n  CrossCursor: 2,\n  WaitCursor: 3,\n  IBeamCursor: 4,\n  SizeVerCursor: 5,\n  SizeHorCursor: 6,\n  SizeBDiagCursor: 7,\n  SizeFDiagCursor: 8,\n  SizeAllCursor: 9,\n  BlankCursor: 10,\n  SplitVCursor: 11,\n  SplitHCursor: 12,\n  PointingHandCursor: 13,\n  ForbiddenCursor: 14,\n  WhatsThisCursor: 15,\n  BusyCursor: 16,\n  OpenHandCursor: 17,\n  ClosedHandCursor: 18,\n  DragCopyCursor: 19,\n  DragMoveCursor: 20,\n  DragLinkCursor: 21,\n  LastCursor: 21, //DragLinkCursor,\n  BitmapCursor: 24,\n  CustomCursor: 25,\n  // ScrollBar Policy\n  ScrollBarAsNeeded: 0,\n  ScrollBarAlwaysOff: 1,\n  ScrollBarAlwaysOn: 2\n};\n\nQmlWeb.Qt = Qt;\n","class QMLBinding {\n/**\n * Create QML binding.\n * @param {Variant} val Sourcecode or function representing the binding\n * @param {Array} tree Parser tree of the binding\n * @return {Object} Object representing the binding\n */\n  constructor(val, tree) {\n    // this.isFunction states whether the binding is a simple js statement or a\n    // function containing a return statement. We decide this on whether it is a\n    // code block or not. If it is, we require a return statement. If it is a\n    // code block it could though also be a object definition, so we need to\n    // check that as well (it is, if the content is labels).\n    this.isFunction = tree && tree[0] === \"block\" &&\n                      tree[1][0] && tree[1][0][0] !== \"label\";\n    this.src = val;\n    this.compiled = false;\n  }\n\n  toJSON() {\n    return {\n      src: this.src,\n      deps: JSON.stringify(this.deps),\n      tree: JSON.stringify(this.tree)\n    };\n  }\n\n  eval(object, context, basePath) {\n    // .call is needed for `this` support\n    return this.impl.call(object, object, context, basePath);\n  }\n\n/**\n * Compile binding. Afterwards you may call binding.eval to evaluate.\n */\n  compile() {\n    this.src = this.src.trim();\n    this.impl = QMLBinding.bindSrc(this.src, this.isFunction);\n    this.compiled = true;\n  }\n\n  static bindSrc(src, isFunction) {\n    return new Function(\"__executionObject\", \"__executionContext\",\n      \"__basePath\", `\n      QmlWeb.executionContext = __executionContext;\n      if (__basePath) {\n        QmlWeb.engine.$basePath = __basePath;\n      }\n      with(QmlWeb) with(__executionContext) with(__executionObject) {\n        ${isFunction ? \"\" : \"return\"} ${src}\n      }\n    `);\n  }\n}\n\nQmlWeb.QMLBinding = QMLBinding;\n","// There can only be one running QMLEngine.\n// This variable points to the currently running engine.\nQmlWeb.engine = null;\n\nconst geometryProperties = [\n  \"width\", \"height\", \"fill\", \"x\", \"y\", \"left\", \"right\", \"top\", \"bottom\"\n];\n\n// QML engine. EXPORTED.\nclass QMLEngine {\n  constructor(element) {\n    //----------Public Members----------\n\n    this.fps = 60;\n    // Math.floor, causes bugs to timing?\n    this.$interval = Math.floor(1000 / this.fps);\n    this.running = false;\n    this.rootElement = element;\n\n    // Cached component trees (post-QmlWeb.convertToEngine)\n    this.components = {};\n\n    // Cached parsed JS files (post-QmlWeb.jsparse)\n    this.js = {};\n\n    // List of Component.completed signals\n    this.completedSignals = [];\n\n    // Current operation state of the engine (Idle, init, etc.)\n    this.operationState = 1;\n\n    // List of properties whose values are bindings. For internal use only.\n    this.bindedProperties = [];\n\n    // List of operations to perform later after init. For internal use only.\n    this.pendingOperations = [];\n\n    // Root object of the engine\n    this.rootObject = null;\n\n    // Base path of qml engine (used for resource loading)\n    this.$basePath = \"\";\n\n    // Module import paths overrides\n    this.userAddedModulePaths = {};\n\n    // Stores data for setImportPathList(), importPathList(), and addImportPath\n    this.userAddedImportPaths = [];\n\n    //----------Private Members---------\n\n    // Ticker resource id and ticker callbacks\n    this._tickers = [];\n    this._lastTick = Date.now();\n\n    // Callbacks for stopping or starting the engine\n    this._whenStop = [];\n    this._whenStart = [];\n\n    // Keyboard management\n    this.$initKeyboard();\n\n    //----------Construct----------\n\n    // TODO: Move to module initialization\n    const QMLBaseObject = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"QtObject\");\n    const constructors = QmlWeb.constructors;\n    for (const i in constructors) {\n      if (constructors[i].getAttachedObject) {\n        QmlWeb.setupGetter(QMLBaseObject.prototype, i,\n                    constructors[i].getAttachedObject);\n      }\n    }\n  }\n\n  //---------- Public Methods ----------\n\n  // Start the engine\n  start() {\n    QmlWeb.engine = this;\n    const QMLOperationState = QmlWeb.QMLOperationState;\n    if (this.operationState !== QMLOperationState.Running) {\n      this.operationState = QMLOperationState.Running;\n      this._tickerId = setInterval(this._tick.bind(this), this.$interval);\n      this._whenStart.forEach(callback => callback());\n    }\n  }\n\n  // Stop the engine\n  stop() {\n    const QMLOperationState = QmlWeb.QMLOperationState;\n    if (this.operationState === QMLOperationState.Running) {\n      clearInterval(this._tickerId);\n      this.operationState = QMLOperationState.Idle;\n      this._whenStop.forEach(callback => callback());\n    }\n  }\n\n  // eslint-disable-next-line max-len\n  /** from http://docs.closure-library.googlecode.com/git/local_closure_goog_uri_uri.js.source.html\n   *\n   * Removes dot segments in given path component, as described in\n   * RFC 3986, section 5.2.4.\n   *\n   * @param {string} path A non-empty path component.\n   * @return {string} Path component with removed dot segments.\n   */\n  removeDotSegments(path) {\n    // path.startsWith(\"/\") is not supported in some browsers\n    let leadingSlash = path && path[0] === \"/\";\n    const segments = path.split(\"/\");\n    const out = [];\n\n    for (let pos = 0; pos < segments.length;) {\n      const segment = segments[pos++];\n\n      if (segment === \".\") {\n        if (leadingSlash && pos === segments.length) {\n          out.push(\"\");\n        }\n      } else if (segment === \"..\") {\n        if (out.length > 1 || out.length === 1 && out[0] !== \"\") {\n          out.pop();\n        }\n        if (leadingSlash && pos === segments.length) {\n          out.push(\"\");\n        }\n      } else {\n        out.push(segment);\n        leadingSlash = true;\n      }\n    }\n\n    return out.join(\"/\");\n  }\n\n  extractBasePath(file) {\n    // work both in url (\"/\") and windows (\"\\\", from file://d:\\test\\) notation\n    const basePath = file.split(/[/\\\\]/);\n    basePath[basePath.length - 1] = \"\";\n    return basePath.join(\"/\");\n  }\n\n  extractFileName(file) {\n    return file.split(/[/\\\\]/).pop();\n  }\n\n  // Load file, parse and construct (.qml or .qml.js)\n  loadFile(file, parentComponent = null) {\n    // Create an anchor element to get the absolute path from the DOM\n    if (!this.$basePathA) {\n      this.$basePathA = document.createElement(\"a\");\n    }\n    this.$basePathA.href = this.extractBasePath(file);\n    this.$basePath = this.$basePathA.href;\n    const fileName = this.extractFileName(file);\n    const tree = this.loadComponent(this.$resolvePath(fileName));\n    return this.loadQMLTree(tree, parentComponent, file);\n  }\n\n  // parse and construct qml\n  // file is not required; only for debug purposes\n  // This function is only used by the QmlWeb tests\n  loadQML(src, parentComponent = null, file = undefined) {\n    return this.loadQMLTree(QmlWeb.parseQML(src, file), parentComponent, file);\n  }\n\n  loadQMLTree(tree, parentComponent = null, file = undefined) {\n    QmlWeb.engine = this;\n\n    // Create and initialize objects\n    const QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n    const component = new QMLComponent({\n      object: tree,\n      parent: parentComponent\n    });\n\n    this.loadImports(tree.$imports, undefined, component.importContextId);\n    component.$basePath = this.$basePath;\n    component.$imports = tree.$imports; // for later use\n    component.$file = file; // just for debugging\n\n    this.rootObject = component.$createObject(parentComponent);\n    component.finalizeImports(this.rootContext());\n    this.$initializePropertyBindings();\n\n    this.start();\n\n    this.callCompletedSignals();\n\n    return component;\n  }\n\n  rootContext() {\n    return this.rootObject.$context;\n  }\n\n  // next 3 methods used in Qt.createComponent for qml files lookup\n  // http://doc.qt.io/qt-5/qqmlengine.html#addImportPath\n\n  addImportPath(dirpath) {\n    this.userAddedImportPaths.push(dirpath);\n  }\n\n  /* Add this dirpath to be checked for components. This is the result of\n   * something like:\n   *\n   * import \"SomeDir/AnotherDirectory\"\n   *\n   * The importContextId ensures it is only accessible from the file in which\n   * it was imported. */\n  addComponentImportPath(importContextId, dirpath, qualifier) {\n    if (!this.componentImportPaths) {\n      this.componentImportPaths = {};\n    }\n    if (!this.componentImportPaths[importContextId]) {\n      this.componentImportPaths[importContextId] = {};\n    }\n\n    const paths = this.componentImportPaths[importContextId];\n\n    if (qualifier) {\n      if (!paths.qualified) {\n        paths.qualified = {};\n      }\n      paths.qualified[qualifier] = dirpath;\n    } else {\n      if (!paths.unqualified) {\n        paths.unqualified = [];\n      }\n      paths.unqualified.push(dirpath);\n    }\n  }\n\n  importSearchPaths(importContextId) {\n    if (!this.componentImportPaths) {\n      return [];\n    }\n    const paths = this.componentImportPaths[importContextId];\n    if (!paths) {\n      return [];\n    }\n    return paths.unqualified || [];\n  }\n\n  qualifiedImportPath(importContextId, qualifier) {\n    if (!this.componentImportPaths) {\n      return \"\";\n    }\n    const paths = this.componentImportPaths[importContextId];\n    if (!paths || !paths.qualified) {\n      return \"\";\n    }\n    return paths.qualified[qualifier] || \"\";\n  }\n\n  setImportPathList(arrayOfDirs) {\n    this.userAddedImportPaths = arrayOfDirs;\n  }\n\n  importPathList() {\n    return this.userAddedImportPaths;\n  }\n\n  // `addModulePath` defines conrete path for module lookup\n  // e.g. addModulePath(\"QtQuick.Controls\", \"http://example.com/controls\")\n  // will force system to `import QtQuick.Controls` module from\n  // `http://example.com/controls/qmldir`\n\n  addModulePath(moduleName, dirPath) {\n    // Keep the mapping. It will be used in loadImports() function.\n    // Remove trailing slash as it required for `readQmlDir`.\n    this.userAddedModulePaths[moduleName] = dirPath.replace(/\\/$/, \"\");\n  }\n\n  registerProperty(obj, propName) {\n    const dependantProperties = [];\n    let value = obj[propName];\n\n    const getter = () => {\n      const QMLProperty = QmlWeb.QMLProperty;\n      if (QMLProperty.evaluatingProperty &&\n          dependantProperties.indexOf(QMLProperty.evaluatingProperty) === -1) {\n        dependantProperties.push(QMLProperty.evaluatingProperty);\n      }\n      return value;\n    };\n\n    const setter = newVal => {\n      value = newVal;\n      for (const i in dependantProperties) {\n        dependantProperties[i].update();\n      }\n    };\n\n    QmlWeb.setupGetterSetter(obj, propName, getter, setter);\n  }\n\n  loadImports(importsArray, currentFileDir = this.$basePath,\n    importContextId = -1)\n  {\n    if (!this.qmldirsContents) {\n      this.qmldirsContents = {}; // cache\n\n      // putting initial keys in qmldirsContents - is a hack. We should find a\n      // way to explain to qmlweb, is this built-in module or qmldir-style\n      // module.\n      for (const module in QmlWeb.modules) {\n        if (module !== \"Main\") {\n          this.qmldirsContents[module] = {};\n        }\n      }\n    }\n\n    if (!this.qmldirs) {\n      this.qmldirs = {}; // resulting components lookup table\n    }\n\n    if (!importsArray || importsArray.length === 0) {\n      return;\n    }\n\n    for (let i = 0; i < importsArray.length; i++) {\n      this.loadImport(importsArray[i], currentFileDir, importContextId);\n    }\n  }\n\n  loadImport(entry, currentFileDir, importContextId) {\n    let name = entry[1];\n\n    // is it url to remote resource\n    const nameIsUrl = name.indexOf(\"//\") === 0 || name.indexOf(\"://\") >= 0;\n    // is it a module name, e.g. QtQuick, QtQuick.Controls, etc\n    const nameIsQualifiedModuleName = entry[4];\n    // local [relative] dir\n    const nameIsDir = !nameIsQualifiedModuleName && !nameIsUrl;\n\n    if (nameIsDir) {\n      name = this.$resolvePath(name, currentFileDir);\n      if (name[name.length - 1] === \"/\") {\n        // remove trailing slash as it required for `readQmlDir`\n        name = name.substr(0, name.length - 1);\n      }\n    }\n\n    let content = this.qmldirsContents[name];\n    // check if we have already loaded that qmldir file\n    if (!content) {\n      if (nameIsQualifiedModuleName && this.userAddedModulePaths[name]) {\n        // 1. we have qualified module and user had configured path for that\n        // module with this.addModulePath\n        content = QmlWeb.readQmlDir(this.userAddedModulePaths[name]);\n      } else if (nameIsUrl || nameIsDir) {\n        // 2. direct load\n        // nameIsUrl => url do not need dirs\n        // nameIsDir => already computed full path above\n        content = QmlWeb.readQmlDir(name);\n      } else {\n        // 3. qt-style lookup for qualified module\n        const probableDirs = [currentFileDir].concat(this.importPathList());\n        const diredName = name.replace(/\\./g, \"/\");\n\n        for (let k = 0; k < probableDirs.length; k++) {\n          const file = probableDirs[k] + diredName;\n          content = QmlWeb.readQmlDir(file);\n          if (content) {\n            break;\n          }\n        }\n      }\n      this.qmldirsContents[name] = content;\n    }\n\n    /* If there is no qmldir, add these directories to the list of places to\n      * search for components (within this import scope). \"noqmldir\" is\n      * inserted into the qmldir cache to avoid future attempts at fetching\n      * the qmldir file, but we always need to the call to\n      * \"addComponentImportPath\" for these sorts of directories. */\n    if (!content || content === \"noqmldir\") {\n      if (nameIsDir) {\n        if (entry[3]) {\n          /* Use entry[1] directly, as we don't want to include the\n            * basePath, otherwise it gets prepended twice in\n            * createComponent. */\n          this.addComponentImportPath(importContextId,\n            `${entry[1]}/`, entry[3]);\n        } else {\n          this.addComponentImportPath(importContextId, `${name}/`);\n        }\n      }\n\n      this.qmldirsContents[name] = \"noqmldir\";\n      return;\n    }\n\n    // copy founded externals to global var\n    // TODO actually we have to copy it to current component\n    for (const attrname in content.externals) {\n      this.qmldirs[attrname] = content.externals[attrname];\n    }\n\n    // keep already loaded qmldir files\n    this.qmldirsContents[name] = content;\n  }\n\n  size() {\n    return {\n      width: this.rootObject.getWidth(),\n      height: this.rootObject.getHeight()\n    };\n  }\n\n  focusedElement() {\n    return this.rootContext().activeFocus;\n  }\n\n  //---------- Private Methods ----------\n\n  $initKeyboard() {\n    document.onkeypress = e => {\n      let focusedElement = this.focusedElement();\n      const event = QmlWeb.eventToKeyboard(e || window.event);\n      const eventName = QmlWeb.keyboardSignals[event.key];\n\n      while (focusedElement && !event.accepted) {\n        const backup = focusedElement.$context.event;\n        focusedElement.$context.event = event;\n        focusedElement.Keys.pressed(event);\n        if (eventName) {\n          focusedElement.Keys[eventName](event);\n        }\n        focusedElement.$context.event = backup;\n        if (event.accepted) {\n          e.preventDefault();\n        } else {\n          focusedElement = focusedElement.$parent;\n        }\n      }\n    };\n\n    document.onkeyup = e => {\n      let focusedElement = this.focusedElement();\n      const event = QmlWeb.eventToKeyboard(e || window.event);\n\n      while (focusedElement && !event.accepted) {\n        const backup = focusedElement.$context.event;\n        focusedElement.$context.event = event;\n        focusedElement.Keys.released(event);\n        focusedElement.$context.event = backup;\n        if (event.accepted) {\n          e.preventDefault();\n        } else {\n          focusedElement = focusedElement.$parent;\n        }\n      }\n    };\n  }\n\n  _tick() {\n    const now = Date.now();\n    const elapsed = now - this._lastTick;\n    this._lastTick = now;\n    this._tickers.forEach(ticker => ticker(now, elapsed));\n  }\n\n  // Load resolved file, parse and construct as Component (.qml)\n  loadComponent(file) {\n    if (file in this.components) {\n      return this.components[file];\n    }\n\n    const uri = this.$parseURI(file);\n    if (!uri) {\n      return undefined;\n    }\n\n    let tree;\n    if (uri.scheme === \"qrc://\") {\n      tree = QmlWeb.qrc[uri.path];\n      if (!tree) {\n        return undefined;\n      }\n      // QmlWeb.qrc contains pre-parsed Component objects, but they still need\n      // convertToEngine called on them.\n      tree = QmlWeb.convertToEngine(tree);\n    } else {\n      const src = QmlWeb.getUrlContents(file, true);\n      if (!src) {\n        console.error(\"QMLEngine.loadComponent: Failed to load:\", file);\n        return undefined;\n      }\n\n      console.log(\"QMLEngine.loadComponent: Loading file:\", file);\n      tree = QmlWeb.parseQML(src, file);\n    }\n\n    if (!tree) {\n      return undefined;\n    }\n\n    if (tree.$children.length !== 1) {\n      console.error(\"QMLEngine.loadComponent: Failed to load:\", file,\n        \": A QML component must only contain one root element!\");\n      return undefined;\n    }\n\n    tree.$file = file;\n    this.components[file] = tree;\n    return tree;\n  }\n\n  // Load resolved file and parse as JavaScript\n  loadJS(file) {\n    if (file in this.js) {\n      return this.js[file];\n    }\n\n    const uri = this.$parseURI(file);\n    if (!uri) {\n      return undefined;\n    }\n\n    if (uri.scheme === \"qrc://\") {\n      return QmlWeb.qrc[uri.path];\n    }\n\n    QmlWeb.loadParser();\n    return QmlWeb.jsparse(QmlWeb.getUrlContents(file));\n  }\n\n  $registerStart(f) {\n    this._whenStart.push(f);\n  }\n\n  $registerStop(f) {\n    this._whenStop.push(f);\n  }\n\n  $addTicker(t) {\n    this._tickers.push(t);\n  }\n\n  $removeTicker(t) {\n    const index = this._tickers.indexOf(t);\n    if (index !== -1) {\n      this._tickers.splice(index, 1);\n    }\n  }\n\n  $initializePropertyBindings() {\n    // Initialize property bindings\n    // we use `while`, because $initializePropertyBindings may be called\n    // recursive (because of Loader and/or createQmlObject )\n    while (this.bindedProperties.length > 0) {\n      const property = this.bindedProperties.shift();\n\n      if (!property.binding) {\n        // Probably, the binding was overwritten by an explicit value. Ignore.\n        continue;\n      }\n\n      if (property.needsUpdate) {\n        property.update();\n      } else if (geometryProperties.indexOf(property.name) >= 0) {\n        // It is possible that bindings with these names was already evaluated\n        // during eval of other bindings but in that case $updateHGeometry and\n        // $updateVGeometry could be blocked during their eval.\n        // So we call them explicitly, just in case.\n        const { obj, changed } = property;\n        if (obj.$updateHGeometry &&\n            changed.isConnected(obj, obj.$updateHGeometry)) {\n          obj.$updateHGeometry(property.val, property.val, property.name);\n        }\n        if (obj.$updateVGeometry &&\n            changed.isConnected(obj, obj.$updateVGeometry)) {\n          obj.$updateVGeometry(property.val, property.val, property.name);\n        }\n      }\n    }\n\n    this.$initializeAliasSignals();\n  }\n\n  // This parses the full URL into scheme, authority and path\n  $parseURI(uri) {\n    const match = uri.match(/^([^/]*?:\\/\\/)(.*?)(\\/.*)$/);\n    if (match) {\n      return {\n        scheme: match[1],\n        authority: match[2],\n        path: match[3]\n      };\n    }\n    return undefined;\n  }\n\n  // Return a path to load the file\n  $resolvePath(file, basePath = this.$basePath) {\n    // probably, replace :// with :/ ?\n    if (!file || file.indexOf(\"://\") !== -1 || file.indexOf(\"data:\") === 0 ||\n      file.indexOf(\"blob:\") === 0) {\n      return file;\n    }\n\n    const basePathURI = this.$parseURI(basePath);\n    if (!basePathURI) {\n      return file;\n    }\n\n    let path = basePathURI.path;\n    if (file.indexOf(\"/\") === 0) {\n      path = file;\n    } else {\n      path = `${path}${file}`;\n    }\n\n    // Remove duplicate slashes and dot segments in the path\n    path = this.removeDotSegments(path.replace(/([^:]\\/)\\/+/g, \"$1\"));\n\n    return `${basePathURI.scheme}${basePathURI.authority}${path}`;\n  }\n\n  // Return a DOM-valid path to load the image (fileURL is an already-resolved\n  // URL)\n  $resolveImageURL(fileURL) {\n    const uri = this.$parseURI(fileURL);\n    // If we are within the resource system, look up a \"real\" path that can be\n    // used by the DOM. If not found, return the path itself without the\n    // \"qrc://\" scheme.\n    if (uri && uri.scheme === \"qrc://\") {\n      return QmlWeb.qrc[uri.path] || uri.path;\n    }\n\n    // Something we can't parse, just pass it through\n    return fileURL;\n  }\n\n  $initializeAliasSignals() {\n    // Perform pending operations. Now we use it only to init alias's \"changed\"\n    // handlers, that's why we have such strange function name.\n    while (this.pendingOperations.length > 0) {\n      const op = this.pendingOperations.shift();\n      op[0](op[1], op[2], op[3]);\n    }\n    this.pendingOperations = [];\n  }\n\n  callCompletedSignals() {\n    // the while loop is better than for..in loop, because completedSignals\n    // array might change dynamically when some completed signal handlers will\n    // create objects dynamically via createQmlObject or Loader\n    while (this.completedSignals.length > 0) {\n      const handler = this.completedSignals.shift();\n      handler();\n    }\n  }\n}\n\nQmlWeb.QMLEngine = QMLEngine;\n","const QMLOperationState = {\n  Idle: 1,\n  Init: 2,\n  Running: 3\n};\n\nQmlWeb.QMLOperationState = QMLOperationState;\n","class QMLProperty {\n  constructor(type, obj, name) {\n    this.obj = obj;\n    this.name = name;\n    this.changed = QmlWeb.Signal.signal([], { obj });\n    this.binding = null;\n    this.objectScope = null;\n    this.componentScope = null;\n    this.value = undefined;\n    this.type = type;\n    this.animation = null;\n    this.needsUpdate = true;\n\n    // This list contains all signals that hold references to this object.\n    // It is needed when deleting, as we need to tidy up all references to this\n    // object.\n    this.$tidyupList = [];\n  }\n\n  // Called by update and set to actually set this.val, performing any type\n  // conversion required.\n  $setVal(val, componentScope) {\n    const constructors = QmlWeb.constructors;\n    if (constructors[this.type] === QmlWeb.qmlList) {\n      this.val = QmlWeb.qmlList({\n        object: val,\n        parent: this.obj,\n        context: componentScope\n      });\n    } else if (val instanceof QmlWeb.QMLMetaElement) {\n      const QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n      if (constructors[val.$class] === QMLComponent ||\n          constructors[this.type] === QMLComponent) {\n        this.val = new QMLComponent({\n          object: val,\n          parent: this.obj,\n          context: componentScope\n        });\n        /* $basePath must be set here so that Components that are assigned to\n         * properties (e.g. Repeater delegates) can properly resolve child\n         * Components that live in the same directory in\n         * Component.createObject. */\n        this.val.$basePath = componentScope.$basePath;\n      } else {\n        this.val = QmlWeb.construct({\n          object: val,\n          parent: this.obj,\n          context: componentScope\n        });\n      }\n    } else if (val instanceof Object || val === undefined || val === null) {\n      this.val = val;\n    } else if (constructors[this.type].plainType) {\n      this.val = constructors[this.type](val);\n    } else {\n      this.val = new constructors[this.type](val);\n    }\n  }\n\n  // Updater recalculates the value of a property if one of the dependencies\n  // changed\n  update() {\n    this.needsUpdate = false;\n\n    if (!this.binding) {\n      return;\n    }\n\n    const oldVal = this.val;\n\n    try {\n      QMLProperty.pushEvaluatingProperty(this);\n      if (!this.binding.compiled) {\n        this.binding.compile();\n      }\n      this.$setVal(this.binding.eval(this.objectScope, this.componentScope,\n        this.componentScopeBasePath), this.componentScope);\n    } catch (e) {\n      console.log(\"QMLProperty.update binding error:\",\n        e,\n        Function.prototype.toString.call(this.binding.eval)\n      );\n    } finally {\n      QMLProperty.popEvaluatingProperty();\n    }\n\n    if (this.animation) {\n      this.animation.$actions = [{\n        target: this.animation.target || this.obj,\n        property: this.animation.property || this.name,\n        from: this.animation.from || oldVal,\n        to: this.animation.to || this.val\n      }];\n      this.animation.restart();\n    }\n\n    if (this.val !== oldVal) {\n      this.changed(this.val, oldVal, this.name);\n    }\n  }\n\n  // Define getter\n  get() {\n    //if (this.needsUpdate && !QMLProperty.evaluatingPropertyPaused) {\n    if (this.needsUpdate &&\n        QmlWeb.engine.operationState !== QmlWeb.QMLOperationState.Init) {\n      this.update();\n    }\n\n    // If this call to the getter is due to a property that is dependant on this\n    // one, we need it to take track of changes\n    if (QMLProperty.evaluatingProperty) {\n      //console.log(this,QMLProperty.evaluatingPropertyStack.slice(0),this.val);\n      this.changed.connect(\n        QMLProperty.evaluatingProperty,\n        QMLProperty.prototype.update,\n        QmlWeb.Signal.UniqueConnection\n      );\n    }\n\n    if (this.val && this.val.$get) {\n      return this.val.$get();\n    }\n\n    return this.val;\n  }\n  // Define setter\n  set(newVal, reason, objectScope, componentScope) {\n    const oldVal = this.val;\n\n    let val = newVal;\n    if (val instanceof QmlWeb.QMLBinding) {\n      if (!objectScope || !componentScope) {\n        throw new Error(\"Internal error: binding assigned without scope\");\n      }\n      this.binding = val;\n      this.objectScope = objectScope;\n      this.componentScope = componentScope;\n      this.componentScopeBasePath = componentScope.$basePath;\n\n      if (QmlWeb.engine.operationState !== QmlWeb.QMLOperationState.Init) {\n        if (!val.compiled) {\n          val.compile();\n        }\n        try {\n          QMLProperty.pushEvaluatingProperty(this);\n          this.needsUpdate = false;\n          val = this.binding.eval(objectScope, componentScope,\n            this.componentScopeBasePath);\n        } finally {\n          QMLProperty.popEvaluatingProperty();\n        }\n      } else {\n        QmlWeb.engine.bindedProperties.push(this);\n        return;\n      }\n    } else {\n      if (reason !== QMLProperty.ReasonAnimation) {\n        this.binding = null;\n      }\n      if (val instanceof Array) {\n        val = val.slice(); // Copies the array\n      }\n    }\n\n    if (reason === QMLProperty.ReasonInit && typeof val === \"undefined\") {\n      if (QMLProperty.typeInitialValues.hasOwnProperty(this.type)) {\n        val = QMLProperty.typeInitialValues[this.type];\n      }\n    }\n\n    this.$setVal(val, componentScope);\n\n    if (this.val !== oldVal) {\n      if (this.animation && reason === QMLProperty.ReasonUser) {\n        this.animation.running = false;\n        this.animation.$actions = [{\n          target: this.animation.target || this.obj,\n          property: this.animation.property || this.name,\n          from: this.animation.from || oldVal,\n          to: this.animation.to || this.val\n        }];\n        this.animation.running = true;\n      }\n      if (this.obj.$syncPropertyToRemote instanceof Function &&\n          reason === QMLProperty.ReasonUser) {\n        // is a remote object from e.g. a QWebChannel\n        this.obj.$syncPropertyToRemote(this.name, val);\n      } else {\n        this.changed(this.val, oldVal, this.name);\n      }\n    }\n  }\n\n  static pushEvalStack() {\n    QMLProperty.evaluatingPropertyStackOfStacks.push(\n      QMLProperty.evaluatingPropertyStack\n    );\n    QMLProperty.evaluatingPropertyStack = [];\n    QMLProperty.evaluatingProperty = undefined;\n  //  console.log(\"evaluatingProperty=>undefined due to push stck \");\n  }\n\n  static popEvalStack() {\n    QMLProperty.evaluatingPropertyStack =\n      QMLProperty.evaluatingPropertyStackOfStacks.pop() || [];\n    QMLProperty.evaluatingProperty =\n      QMLProperty.evaluatingPropertyStack[\n        QMLProperty.evaluatingPropertyStack.length - 1\n      ];\n  }\n\n  static pushEvaluatingProperty(prop) {\n    // TODO say warnings if already on stack. This means binding loop.\n    // BTW actually we do not loop because needsUpdate flag is reset before\n    // entering update again.\n    if (QMLProperty.evaluatingPropertyStack.indexOf(prop) >= 0) {\n      console.error(\"Property binding loop detected for property\",\n        prop.name,\n        [prop].slice(0)\n      );\n    }\n    QMLProperty.evaluatingProperty = prop;\n    QMLProperty.evaluatingPropertyStack.push(prop); //keep stack of props\n  }\n\n  static popEvaluatingProperty() {\n    QMLProperty.evaluatingPropertyStack.pop();\n    QMLProperty.evaluatingProperty = QMLProperty.evaluatingPropertyStack[\n      QMLProperty.evaluatingPropertyStack.length - 1\n    ];\n  }\n}\n\n// Property that is currently beeing evaluated. Used to get the information\n// which property called the getter of a certain other property for\n// evaluation and is thus dependant on it.\nQMLProperty.evaluatingProperty = undefined;\nQMLProperty.evaluatingPropertyPaused = false;\nQMLProperty.evaluatingPropertyStack = [];\nQMLProperty.evaluatingPropertyStackOfStacks = [];\n\nQMLProperty.typeInitialValues = {\n  int: 0,\n  real: 0,\n  double: 0,\n  string: \"\",\n  bool: false,\n  list: [],\n  enum: 0,\n  url: \"\"\n};\n\nQMLProperty.ReasonUser = 0;\nQMLProperty.ReasonInit = 1;\nQMLProperty.ReasonAnimation = 2;\n\nQmlWeb.QMLProperty = QMLProperty;\n","window.addEventListener(\"load\", () => {\n  const metaTags = document.getElementsByTagName(\"body\");\n  for (let i = 0; i < metaTags.length; ++i) {\n    const metaTag = metaTags[i];\n    const source = metaTag.getAttribute(\"data-qml\");\n    if (source) {\n      QmlWeb.qmlEngine = new QmlWeb.QMLEngine();\n      QmlWeb.qmlEngine.loadFile(source);\n      QmlWeb.qmlEngine.start();\n      break;\n    }\n  }\n});\n","const Easing = {\n  Linear: 1,\n  InQuad: 2, OutQuad: 3, InOutQuad: 4, OutInQuad: 5,\n  InCubic: 6, OutCubic: 7, InOutCubic: 8, OutInCubic: 9,\n  InQuart: 10, OutQuart: 11, InOutQuart: 12, OutInQuart: 13,\n  InQuint: 14, OutQuint: 15, InOutQuint: 16, OutInQuint: 17,\n  InSine: 18, OutSine: 19, InOutSine: 20, OutInSine: 21,\n  InExpo: 22, OutExpo: 23, InOutExpo: 24, OutInExpo: 25,\n  InCirc: 26, OutCirc: 27, InOutCirc: 28, OutInCirc: 29,\n  InElastic: 30, OutElastic: 31, InOutElastic: 32, OutInElastic: 33,\n  InBack: 34, OutBack: 35, InOutBack: 36, OutInBack: 37,\n  InBounce: 38, OutBounce: 39, InOutBounce: 40, OutInBounce: 41\n};\n\n// eslint-disable-next-line complexity\nQmlWeb.$ease = (type, period, amplitude, overshoot, t) => {\n  switch (type) {\n    // Linear\n    case Easing.Linear:\n      return t;\n\n    // Quad\n    case Easing.InQuad:\n      return Math.pow(t, 2);\n    case Easing.OutQuad:\n      return -Math.pow(t - 1, 2) + 1;\n    case Easing.InOutQuad:\n      if (t < 0.5) {\n        return 2 * Math.pow(t, 2);\n      }\n      return -2 * Math.pow(t - 1, 2) + 1;\n    case Easing.OutInQuad:\n      if (t < 0.5) {\n        return -2 * Math.pow(t - 0.5, 2) + 0.5;\n      }\n      return 2 * Math.pow(t - 0.5, 2) + 0.5;\n\n    // Cubic\n    case Easing.InCubic:\n      return Math.pow(t, 3);\n    case Easing.OutCubic:\n      return Math.pow(t - 1, 3) + 1;\n    case Easing.InOutCubic:\n      if (t < 0.5) {\n        return 4 * Math.pow(t, 3);\n      }\n      return 4 * Math.pow(t - 1, 3) + 1;\n    case Easing.OutInCubic:\n      return 4 * Math.pow(t - 0.5, 3) + 0.5;\n\n    // Quart\n    case Easing.InQuart:\n      return Math.pow(t, 4);\n    case Easing.OutQuart:\n      return -Math.pow(t - 1, 4) + 1;\n    case Easing.InOutQuart:\n      if (t < 0.5) {\n        return 8 * Math.pow(t, 4);\n      }\n      return -8 * Math.pow(t - 1, 4) + 1;\n    case Easing.OutInQuart:\n      if (t < 0.5) {\n        return -8 * Math.pow(t - 0.5, 4) + 0.5;\n      }\n      return 8 * Math.pow(t - 0.5, 4) + 0.5;\n\n    // Quint\n    case Easing.InQuint:\n      return Math.pow(t, 5);\n    case Easing.OutQuint:\n      return Math.pow(t - 1, 5) + 1;\n    case Easing.InOutQuint:\n      if (t < 0.5) {\n        return 16 * Math.pow(t, 5);\n      }\n      return 16 * Math.pow(t - 1, 5) + 1;\n    case Easing.OutInQuint:\n      if (t < 0.5) {\n        return 16 * Math.pow(t - 0.5, 5) + 0.5;\n      }\n      return 16 * Math.pow(t - 0.5, 5) + 0.5;\n\n    // Sine\n    case Easing.InSine:\n      return -Math.cos(0.5 * Math.PI * t) + 1;\n    case Easing.OutSine:\n      return Math.sin(0.5 * Math.PI * t);\n    case Easing.InOutSine:\n      return -0.5 * Math.cos(Math.PI * t) + 0.5;\n    case Easing.OutInSine:\n      if (t < 0.5) {\n        return 0.5 * Math.sin(Math.PI * t);\n      }\n      return -0.5 * Math.sin(Math.PI * t) + 1;\n\n    // Expo\n    case Easing.InExpo:\n      return 1 / 1023 * (Math.pow(2, 10 * t) - 1);\n    case Easing.OutExpo:\n      return -1024 / 1023 * (Math.pow(2, -10 * t) - 1);\n    case Easing.InOutExpo:\n      if (t < 0.5) {\n        return 1 / 62 * (Math.pow(2, 10 * t) - 1);\n      }\n      return -512 / 31 * Math.pow(2, -10 * t) + 63 / 62;\n    case Easing.OutInExpo:\n      if (t < 0.5) {\n        return -16 / 31 * (Math.pow(2, -10 * t) - 1);\n      }\n      return 1 / 1984 * Math.pow(2, 10 * t) + 15 / 31;\n\n    // Circ\n    case Easing.InCirc:\n      return 1 - Math.sqrt(1 - t * t);\n    case Easing.OutCirc:\n      return Math.sqrt(1 - Math.pow(t - 1, 2));\n    case Easing.InOutCirc:\n      if (t < 0.5) {\n        return 0.5 * (1 - Math.sqrt(1 - 4 * t * t));\n      }\n      return 0.5 * (Math.sqrt(1 - 4 * Math.pow(t - 1, 2)) + 1);\n    case Easing.OutInCirc:\n      if (t < 0.5) {\n        return 0.5 * Math.sqrt(1 - Math.pow(2 * t - 1, 2));\n      }\n      return 0.5 * (2 - Math.sqrt(1 - Math.pow(2 * t - 1, 2)));\n\n    // Elastic\n    case Easing.InElastic:\n      return -amplitude * Math.pow(2, 10 * t - 10) *\n        Math.sin(2 * t * Math.PI / period - Math.asin(1 / amplitude));\n    case Easing.OutElastic:\n      return amplitude * Math.pow(2, -10 * t) *\n        Math.sin(2 * t * Math.PI / period - Math.asin(1 / amplitude)) + 1;\n    case Easing.InOutElastic:\n      if (t < 0.5) {\n        return -0.5 * amplitude * Math.pow(2, 20 * t - 10) *\n          Math.sin(4 * t * Math.PI / period - Math.asin(1 / amplitude));\n      }\n      return -0.5 * amplitude * Math.pow(2, -20 * t + 10) *\n        Math.sin(4 * t * Math.PI / period + Math.asin(1 / amplitude)) + 1;\n    case Easing.OutInElastic:\n      if (t < 0.5) {\n        return 0.5 * amplitude * Math.pow(2, -20 * t) *\n          Math.sin(4 * t * Math.PI / period - Math.asin(1 / amplitude)) + 0.5;\n      }\n      return -0.5 * amplitude * Math.pow(2, 20 * t - 20) *\n        Math.sin(4 * t * Math.PI / period - Math.asin(1 / amplitude)) + 0.5;\n\n    // Back\n    case Easing.InBack:\n      return (overshoot + 1) * Math.pow(t, 3) - overshoot * Math.pow(t, 2);\n    case Easing.OutBack:\n      return (overshoot + 1) * Math.pow(t - 1, 3) +\n             overshoot * Math.pow(t - 1, 2) + 1;\n    case Easing.InOutBack:\n      if (t < 0.5) {\n        return 4 * (overshoot + 1) * Math.pow(t, 3) -\n               2 * overshoot * Math.pow(t, 2);\n      }\n      return 0.5 * (overshoot + 1) * Math.pow(2 * t - 2, 3) +\n             overshoot / 2 * Math.pow(2 * t - 2, 2) + 1;\n    case Easing.OutInBack:\n      if (t < 0.5) {\n        return 0.5 * ((overshoot + 1) * Math.pow(2 * t - 1, 3) +\n               overshoot * Math.pow(2 * t - 1, 2) + 1);\n      }\n      return 4 * (overshoot + 1) * Math.pow(t - 0.5, 3) -\n             2 * overshoot * Math.pow(t - 0.5, 2) + 0.5;\n    // Bounce\n    case Easing.InBounce:\n      if (t < 1 / 11) {\n        return -amplitude * 121 / 16 * (t * t - 1 / 11 * t);\n      } else if (t < 3 / 11) {\n        return -amplitude * 121 / 16 * (t * t - 4 / 11 * t + 3 / 121);\n      } else if (t < 7 / 11) {\n        return -amplitude * 121 / 16 * (t * t - 10 / 11 * t + 21 / 121);\n      }\n      return -(121 / 16) * (t * t - 2 * t + 1) + 1;\n    case Easing.OutBounce:\n      if (t < 4 / 11) {\n        return 121 / 16 * t * t;\n      } else if (t < 8 / 11) {\n        return amplitude * (121 / 16) * (t * t - 12 / 11 * t + 32 / 121) + 1;\n      } else if (t < 10 / 11) {\n        return amplitude * (121 / 16) * (t * t - 18 / 11 * t + 80 / 121) + 1;\n      }\n      return amplitude * (121 / 16) * (t * t - 21 / 11 * t + 10 / 11) + 1;\n    case Easing.InOutBounce:\n      if (t < 1 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 1 / 22 * t);\n      } else if (t < 3 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 2 / 11 * t + 3 / 484);\n      } else if (t < 7 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 5 / 11 * t + 21 / 484);\n      } else if (t < 11 / 22) {\n        return -121 / 8 * (t * t - t + 0.25) + 0.5;\n      } else if (t < 15 / 22) {\n        return 121 / 8 * (t * t - t) + 137 / 32;\n      } else if (t < 19 / 22) {\n        return amplitude * 121 / 8 * (t * t - 17 / 11 * t + 285 / 484) + 1;\n      } else if (t < 21 / 22) {\n        return amplitude * 121 / 8 * (t * t - 20 / 11 * t + 399 / 484) + 1;\n      }\n      return amplitude * 121 / 8 * (t * t - 43 / 22 * t + 21 / 22) + 1;\n    case Easing.OutInBounce:\n      if (t < 4 / 22) {\n        return 121 / 8 * t * t;\n      } else if (t < 8 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 6 / 11 * t + 8 / 121) + 0.5;\n      } else if (t < 10 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 9 / 11 * t + 20 / 121) + 0.5;\n      } else if (t < 11 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 21 / 22 * t + 5 / 22) + 0.5;\n      } else if (t < 12 / 22) {\n        return amplitude * 121 / 8 * (t * t - 23 / 22 * t + 3 / 11) + 0.5;\n      } else if (t < 14 / 22) {\n        return amplitude * 121 / 8 * (t * t - 13 / 11 * t + 42 / 121) + 0.5;\n      } else if (t < 18 / 22) {\n        return amplitude * 121 / 8 * (t * t - 16 / 11 * t + 63 / 121) + 0.5;\n      }\n      return -121 / 8 * (t * t - 2 * t + 117 / 121) + 0.5;\n\n    // Default\n    default:\n      console.error(\"Unsupported animation type: \", type);\n      return t;\n  }\n};\n\nQmlWeb.Easing = Easing;\n","class QmlWebHelpers {\n  static arrayFindIndex(array, callback) {\n    // Note: does not support thisArg, we don't need that\n    if (!Array.prototype.findIndex) {\n      for (const key in array) {\n        if (callback(array[key], key, array)) {\n          return key;\n        }\n      }\n      return -1;\n    }\n    return Array.prototype.findIndex.call(array, callback);\n  }\n  static mergeObjects(...args) {\n    const merged = {};\n    for (const i in args) {\n      const arg = args[i];\n      if (!arg) {\n        continue;\n      }\n      for (const key in arg) {\n        merged[key] = arg[key];\n      }\n    }\n    return merged;\n  }\n}\n\nQmlWeb.helpers = QmlWebHelpers;\n","QmlWeb.keyCodeToQt = e => {\n  const Qt = QmlWeb.Qt;\n  e.keypad = e.keyCode >= 96 && e.keyCode <= 111;\n  if (e.keyCode === Qt.Key_Tab && e.shiftKey) {\n    return Qt.Key_Backtab;\n  }\n  if (e.keyCode >= 97 && e.keyCode <= 122) {\n    return e.keyCode - (97 - Qt.Key_A);\n  }\n  return e.keyCode;\n};\n\nQmlWeb.eventToKeyboard = e => ({\n  accepted: false,\n  count: 1,\n  isAutoRepeat: false,\n  key: QmlWeb.keyCodeToQt(e),\n  modifiers: e.ctrlKey * QmlWeb.Qt.CtrlModifier\n           | e.altKey * QmlWeb.Qt.AltModifier\n           | e.shiftKey * QmlWeb.Qt.ShiftModifier\n           | e.metaKey * QmlWeb.Qt.MetaModifier\n           | e.keypad * QmlWeb.Qt.KeypadModifier,\n  text: String.fromCharCode(e.charCode)\n});\n\nQmlWeb.keyboardSignals = {};\n[\n  \"asterisk\", \"back\", \"backtab\", \"call\", \"cancel\", \"delete\", \"escape\", \"flip\",\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \"hangup\", \"menu\", \"no\", \"return\", \"select\",\n  \"space\", \"tab\", \"volumeDown\", \"volumeUp\", \"yes\", \"up\", \"right\", \"down\", \"left\"\n].forEach(key => {\n  const name = key.toString();\n  const qtName = `Key_${name[0].toUpperCase()}${name.slice(1)}`;\n  const prefix = typeof key === \"number\" ? \"digit\" : \"\";\n  QmlWeb.keyboardSignals[QmlWeb.Qt[qtName]] = `${prefix}${name}Pressed`;\n});\n","/*\n\nQmlWeb.qrc is analogous to the Qt Resource System. It is expected to map a path\nwithin the resource system to the following pieces of data:\n\n1) For a QML Component, it is the return value of QmlWeb.parse\n2) For a JavaScript file, it is the return value of QmlWeb.jsparse\n2) For an image, it is any URL that an <img> tag can accept (e.g. a standard\n   URL to an image resource, or a \"data:\" URI). If there is no entry for a\n   given qrc image path, it will fall back to passing the path right through to\n   the DOM. This is mainly a convenience until support for images is added to\n   gulp-qmlweb.\n\nThe \"data-qml\" tag on <body> can be set to a \"qrc://\" URL like\n\"qrc:///root.qml\" to use a pre-parsed \"/root.qml\" from QmlWeb.qrc.\n\nSince relative URLs are resolved relative to the URL of the containing\ncomponent, any relative URL set within a file in the resource system will also\nresolve within the resource system. To access a Component, JavaScript or image\nfile that is stored outside of the resources system from within the resource\nsystem, a full URL must be used (e.g. \"http://www.example.com/images/foo.png\").\n\nVice-versa, in order to access a Component, JavaScript or image file that is\nstored within the resource system from outside of the resource system, a full\n\"qrc://\" URL must be used (e.g. \"qrc:///images/foo.png\").\n\nMore details here: http://doc.qt.io/qt-5/qml-url.html\n\n*/\nQmlWeb.qrc = {};\n","QmlWeb.registerQmlType({\n  module: \"QmlWeb.Dom\",\n  name: \"DomElement\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    tagName: { type: \"string\", initialValue: \"div\" }\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    const tagName = meta.object.tagName || \"div\";\n    this.dom = document.createElement(tagName);\n\n    // TODO: support properties, styles, perhaps changing the tagName\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QmlWeb\",\n  name: \"RestModel\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    url: \"string\",\n    isLoading: \"bool\",\n    mimeType: { type: \"string\", initialValue: \"application/json\" },\n    queryMimeType: {\n      type: \"string\",\n      initialValue: \"application/x-www-urlencoded\"\n    }\n  },\n  signals: {\n    fetched: [],\n    saved: []\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.attributes = this.getAttributes();\n    this.runningRequests = 0;\n  }\n  fetch() {\n    this.$ajax({\n      method: \"GET\",\n      mimeType: this.mimetype,\n      success: xhr => {\n        this.$xhrReadResponse(xhr);\n        this.fetched();\n      }\n    });\n  }\n  remove() {\n    this.$ajax({\n      method: \"DELETE\",\n      success: () => {\n        this.destroy();\n      }\n    });\n  }\n  create() {\n    this.$sendToServer(\"POST\");\n  }\n  save() {\n    this.$sendToServer(\"PUT\");\n  }\n  $sendToServer(method) {\n    this.$ajax({\n      method,\n      mimeType: this.queryMimeType,\n      body: this.$generateBodyForPostQuery(),\n      success: xhr => {\n        this.$xhrReadResponse(xhr);\n        this.saved();\n      }\n    });\n  }\n  $generateBodyForPostQuery() {\n    const object = {};\n    for (let i = 0; i < this.attributes.length; ++i) {\n      object[this.attributes[i]] = this.$properties[this.attributes[i]].get();\n    }\n    console.log(object);\n    switch (this.queryMimeType) {\n      case \"application/json\":\n      case \"text/json\":\n        return JSON.stringify(object);\n      case \"application/x-www-urlencoded\":\n        return this.$objectToUrlEncoded(object);\n    }\n    return undefined;\n  }\n  $objectToUrlEncoded(object, prefix) {\n    const parts = [];\n    for (let key in object) {\n      if (object.hasOwnProperty(key)) {\n        const value = object[key];\n        if (typeof prefix !== \"undefined\") {\n          key = `${prefix}[${key}]`;\n        }\n        if (typeof value === \"object\") {\n          parts.push(this.$objectToUrlEncoded(value, key));\n        } else {\n          const ekey = this.$myEncodeURIComponent(key);\n          const evalue = this.$myEncodeURIComponent(value);\n          parts.push(`${ekey}=${evalue}`);\n        }\n      }\n    }\n    return parts.join(\"&\");\n  }\n  $myEncodeURIComponent(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, c =>\n      `%${c.charCodeAt(0).toString(16)}`\n    );\n  }\n  $ajax(options) {\n    const xhr = new XMLHttpRequest();\n    xhr.overrideMimeType(this.mimeType);\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        if (xhr.status === 200) {\n          options.success(xhr);\n        } else {\n          options.failure(xhr);\n        }\n        this.runningRequests -= 1;\n        if (this.runningRequests <= 0) {\n          this.isLoading = false;\n        }\n      }\n    };\n    xhr.open(options.method, this.url, true);\n    if (typeof options.body !== \"undefined\") {\n      xhr.setRequestHeader(\"Content-Type\", this.queryMimeType);\n      xhr.send(options.body);\n    } else {\n      xhr.send(null);\n    }\n    this.runningRequests += 1;\n    this.isLoading = true;\n  }\n  $xhrReadResponse(xhr) {\n    let responseObject;\n    if (this.mimeType === \"application/json\" || this.mimeType === \"text/json\") {\n      responseObject = JSON.parse(xhr.responseText);\n    }\n    this.$updatePropertiesFromResponseObject(responseObject);\n  }\n  $updatePropertiesFromResponseObject(responseObject) {\n    const QMLProperty = QmlWeb.QMLProperty;\n    for (const key in responseObject) {\n      if (responseObject.hasOwnProperty(key) && this.$hasProperty(key)) {\n        this.$properties[key].set(responseObject[key], QMLProperty.ReasonUser);\n      }\n    }\n  }\n  $hasProperty(name) {\n    return typeof this.$properties[name] !== \"undefined\";\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"Qt.labs.settings\",\n  name: \"Settings\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    category: \"string\"\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    if (typeof window.localStorage === \"undefined\") {\n      return;\n    }\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n  }\n  Component$onCompleted() {\n    this.$loadProperties();\n    this.$initializeProperties();\n  }\n  $getKey(attrName) {\n    return `${this.category}/${attrName}`;\n  }\n  $loadProperties() {\n    this.$attributes.forEach(attrName => {\n      if (!this.$properties[attrName]) return;\n\n      const key = this.$getKey(attrName);\n      this[attrName] = localStorage.getItem(key);\n    });\n  }\n  $initializeProperties() {\n    this.$attributes.forEach(attrName => {\n      if (!this.$properties[attrName]) return;\n\n      let emitter = this;\n      let signalName = `${attrName}Changed`;\n\n      if (this.$properties[attrName].type === \"alias\") {\n        emitter = this.$context[this.$properties[attrName].val.objectName];\n        signalName = `${this.$properties[attrName].val.propertyName}Changed`;\n      }\n\n      emitter[signalName].connect(this, () => {\n        localStorage.setItem(this.$getKey(attrName), this[attrName]);\n      });\n    });\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtGraphicalEffects\",\n  name: \"FastBlur\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    radius: \"real\",\n    source: { type: \"var\", initialValue: null }\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.$previousSource = null;\n    this.$filterObject = undefined;\n\n    this.radiusChanged.connect(this, this.$onRadiusChanged);\n    this.sourceChanged.connect(this, this.$onSourceChanged);\n  }\n  $onRadiusChanged() {\n    this.$updateEffect(this.source);\n  }\n  $onSourceChanged() {\n    this.$updateEffect(this.source);\n  }\n  $updateFilterObject() {\n    this.$filterObject = {\n      transformType: \"filter\",\n      operation: \"blur\",\n      parameters: `${this.radius}px`\n    };\n  }\n  $updateEffect(source) {\n    console.log(\"updating effect\");\n    if (this.$previousSource) {\n      const index = this.$previousSource.transform.indexOf(this.$filterObject);\n      this.$previousSource.transform.splice(index, 1);\n      this.$previousSource.$updateTransform();\n    }\n    if (source && source.transform) {\n      this.$updateFilterObject();\n      console.log(\"updating effect:\", this.$filterObject, source);\n      source.transform.push(this.$filterObject);\n      source.$updateTransform();\n      this.$previousSource = source;\n    } else {\n      this.$previousSource = null;\n    }\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtMobility\",\n  name: \"GeoLocation\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    accuracy: \"double\",\n    altitude: \"double\",\n    altitudeAccuracy: \"double\",\n    heading: \"double\",\n    latitude: \"double\",\n    longitude: \"double\",\n    speed: \"double\",\n    timestamp: \"date\",\n    label: \"string\"\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    if (!navigator.geolocation) {\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(pos => this.$updatePosition(pos));\n    navigator.geolocation.watchPosition(pos => this.$updatePosition(pos));\n  }\n  $updatePosition(position) {\n    this.accuracy = position.coords.accuracy;\n    this.altitude = position.coords.altitude;\n    this.altitudeAccuracy = position.coords.altitudeAccuracy;\n    this.heading = position.coords.heading;\n    this.latitude = position.coords.latitude;\n    this.longitude = position.coords.longitude;\n    this.speed = position.coords.speed;\n    this.timestamp = position.timestamp;\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtMultimedia\",\n  name: \"Video\",\n  versions: /^5\\./,\n  baseClass: \"QtQuick.Item\",\n  enums: {\n    MediaPlayer: {\n      NoError: 0, ResourceError: 1, FormatError: 2, NetworkError: 4,\n      AccessDenied: 8, ServiceMissing: 16,\n\n      StoppedState: 0, PlayingState: 1, PausedState: 2,\n\n      NoMedia: 0, Loading: 1, Loaded: 2, Buffering: 4, Stalled: 8,\n      EndOfMedia: 16, InvalidMedia: 32, UnknownStatus: 64\n    },\n    VideoOutput: { PreserveAspectFit: 0, PreserveAspectCrop: 1, Stretch: 2 }\n  },\n  properties: {\n    source: \"string\",\n    duration: \"int\",\n    position: \"int\",\n    autoPlay: \"bool\",\n    muted: \"bool\",\n    volume: \"real\",\n    playbackRate: \"real\",\n    playbackState: \"enum\", // MediaPlayer.StoppedState\n    fillMode: \"enum\", // VideoOutput.PreserveAspectFit\n    status: \"enum\", // MediaPlayer.NoMedia\n    error: \"enum\" // MediaPlayer.NoError\n  },\n  signals: {\n    paused: [],\n    playing: [],\n    stopped: []\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.$runningEventListener = 0;\n\n    this.impl = document.createElement(\"video\");\n    this.impl.style.width = this.impl.style.height = \"100%\";\n    this.impl.style.margin = \"0\";\n    this.dom.appendChild(this.impl);\n\n    this.volume = this.impl.volume;\n    this.duration = this.impl.duration;\n\n    this.impl.addEventListener(\"play\", () => {\n      this.playing();\n      this.playbackState = this.MediaPlayer.PlayingState;\n    });\n\n    this.impl.addEventListener(\"pause\", () => {\n      this.paused();\n      this.playbackState = this.MediaPlayer.PausedState;\n    });\n\n    this.impl.addEventListener(\"timeupdate\", () => {\n      this.$runningEventListener++;\n      this.position = this.impl.currentTime * 1000;\n      this.$runningEventListener--;\n    });\n\n    this.impl.addEventListener(\"ended\", () => {\n      this.stopped();\n      this.playbackState = this.MediaPlayer.StoppedState;\n    });\n\n    this.impl.addEventListener(\"progress\", () => {\n      if (this.impl.buffered.length > 0) {\n        this.progress = this.impl.buffered.end(0) / this.impl.duration;\n        this.status = this.progress < 1 ?\n          this.MediaPlayer.Buffering :\n          this.MediaPlayer.Buffered;\n      }\n    });\n\n    this.impl.addEventListener(\"stalled\", () => {\n      this.status = this.MediaPlayer.Stalled;\n    });\n\n    this.impl.addEventListener(\"canplaythrough\", () => {\n      this.status = this.MediaPlayer.Buffered;\n    });\n\n    this.impl.addEventListener(\"loadstart\", () => {\n      this.status = this.MediaPlayer.Loading;\n    });\n\n    this.impl.addEventListener(\"durationchanged\", () => {\n      this.duration = this.impl.duration;\n    });\n\n    this.impl.addEventListener(\"volumechanged\", () => {\n      this.$runningEventListener++;\n      this.volume = this.impl.volume;\n      this.$runningEventListener--;\n    });\n\n    this.impl.addEventListener(\"suspend\", () => {\n      this.error |= this.MediaPlayer.NetworkError;\n    });\n\n    this.impl.addEventListener(\"error\", () => {\n      this.error |= this.MediaPlayer.ResourceError;\n    });\n\n    this.impl.addEventListener(\"ratechange\", () => {\n      this.$runningEventListener++;\n      this.playbackRate = this.impl.playbackRate;\n      this.$runningEventListener--;\n    });\n\n    this.autoPlayChanged.connect(this, this.$onAutoPlayChanged);\n    this.sourceChanged.connect(this, this.$onSourceChanged);\n    this.positionChanged.connect(this, this.$onPositionChanged);\n    this.volumeChanged.connect(this, this.$onVolumeChanged);\n    this.playbackRateChanged.connect(this, this.$onPlaybackRateChanged);\n    this.mutedChanged.connect(this, this.$onMutedChanged);\n    this.fillModeChanged.connect(this, this.$onFillModeChanged);\n  }\n  $onAutoPlayChanged(newVal) {\n    this.impl.autoplay = newVal;\n  }\n  $onSourceChanged(source) {\n    const parts = source.split(\".\");\n    const extension = parts[parts.length - 1].toLowerCase();\n    const mime = this.mimetypeFromExtension(extension);\n    this.impl.src = source;\n    if (!this.impl.canPlayType(mime)) {\n      this.error |= this.MediaPlayer.FormatError;\n    }\n  }\n  $onPositionChanged(currentTime) {\n    if (this.$runningEventListener > 0) return;\n    this.impl.currentTime = currentTime / 1000;\n  }\n  $onVolumeChanged(volume) {\n    if (this.$runningEventListener > 0) return;\n    this.impl.volume = volume;\n  }\n  $onPlaybackRateChanged(playbackRate) {\n    if (this.$runningEventListener > 0) return;\n    this.impl.playbackRate = playbackRate;\n  }\n  $onMutedChanged(newValue) {\n    if (newValue) {\n      this.$volulmeBackup = this.impl.volume;\n      this.volume = 0;\n    } else {\n      this.volume = this.$volumeBackup;\n    }\n  }\n  $onFillModeChanged(newValue) {\n    switch (newValue) {\n      case this.VideoOutput.Stretch:\n        this.impl.style.objectFit = \"fill\";\n        break;\n      case this.VideoOutput.PreserveAspectFit:\n        this.impl.style.objectFit = \"\";\n        break;\n      case this.VideoOutput.PreserveAspectCrop:\n        this.impl.style.objectFit = \"cover\";\n        break;\n    }\n  }\n  pause() {\n    this.impl.pause();\n  }\n  play() {\n    this.impl.play();\n  }\n  seek(offset) {\n    this.impl.currentTime = offset * 1000;\n  }\n  stop() {\n  }\n  mimetypeFromExtension(extension) {\n    const mimetypes = {\n      ogg: \"video/ogg\",\n      ogv: \"video/ogg\",\n      ogm: \"video/ogg\",\n      mp4: \"video/mp4\",\n      webm: \"video/webm\"\n    };\n    return mimetypes[extension] || \"\";\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQml\",\n  name: \"Binding\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    target: { type: \"QtObject\", initialValue: null },\n    property: { type: \"string\", initialValue: \"\" },\n    value: { type: \"var\", initialValue: undefined },\n    when: { type: \"bool\", initialValue: true }\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.$property = undefined;\n\n    this.valueChanged.connect(this, this.$onValueChanged);\n    this.targetChanged.connect(this, this.$updateBinding);\n    this.propertyChanged.connect(this, this.$updateBinding);\n    this.whenChanged.connect(this, this.$updateBinding);\n  }\n\n  $updateBinding() {\n    if (!this.when || !this.target\n        || !this.target.hasOwnProperty(this.property)\n        || this.value === undefined)\n    {\n      this.$property = undefined;\n      return;\n    }\n    this.$property = this.target.$properties[this.property];\n    this.$onValueChanged(this.value); // trigger value update\n  }\n\n  $onValueChanged(value) {\n    if (value !== undefined && this.$property) {\n      this.$property.set(value);\n    }\n  }\n});\n","class QMLContext {\n  nameForObject(obj) {\n    for (const name in this) {\n      if (this[name] === obj) {\n        return name;\n      }\n    }\n    return undefined;\n  }\n}\n\nclass QMLComponent {\n  constructor(meta) {\n    if (QmlWeb.constructors[meta.object.$class] === QMLComponent) {\n      this.$metaObject = meta.object.$children[0];\n    } else {\n      this.$metaObject = meta.object;\n    }\n    this.$context = meta.context;\n\n    this.$jsImports = [];\n\n    if (meta.object.$imports instanceof Array) {\n      const moduleImports = [];\n      const loadImport = importDesc => {\n        if (/\\.js$/.test(importDesc[1])) {\n          this.$jsImports.push(importDesc);\n        } else {\n          moduleImports.push(importDesc);\n        }\n      };\n\n      for (let i = 0; i < meta.object.$imports.length; ++i) {\n        loadImport(meta.object.$imports[i]);\n      }\n      QmlWeb.loadImports(this, moduleImports);\n      if (this.$context) {\n        this.finalizeImports(this.$context);\n      }\n    }\n\n    /* If this Component does not have any imports, it is likely one that was\n     * created within another Component file. It should inherit the\n     * importContextId of the Component file it was created within. */\n    if (this.importContextId === undefined) {\n      this.importContextId = meta.context.importContextId;\n    }\n  }\n  finalizeImports($context) {\n    const engine = QmlWeb.engine;\n    for (let i = 0; i < this.$jsImports.length; ++i) {\n      const importDesc = this.$jsImports[i];\n      const js = engine.loadJS(engine.$resolvePath(importDesc[1]));\n\n      if (!js) {\n        console.log(\"Component.finalizeImports: failed to import JavaScript\",\n          importDesc[1]);\n        continue;\n      }\n\n      if (importDesc[3] !== \"\") {\n        $context[importDesc[3]] = {};\n        QmlWeb.importJavascriptInContext(js, $context[importDesc[3]]);\n      } else {\n        QmlWeb.importJavascriptInContext(js, $context);\n      }\n    }\n  }\n  $createObject(parent, properties = {}, context = this.$context) {\n    const engine = QmlWeb.engine;\n    const oldState = engine.operationState;\n    engine.operationState = QmlWeb.QMLOperationState.Init;\n    // change base path to current component base path\n    const bp = engine.$basePath;\n    engine.$basePath = this.$basePath ? this.$basePath : engine.$basePath;\n\n    const newContext = context ? Object.create(context) : new QMLContext();\n\n    if (this.importContextId !== undefined) {\n      newContext.importContextId = this.importContextId;\n    }\n\n    const item = QmlWeb.construct({\n      object: this.$metaObject,\n      parent,\n      context: newContext,\n      isComponentRoot: true\n    });\n\n    Object.keys(properties).forEach(propname => {\n      item[propname] = properties.propname;\n    });\n\n    // change base path back\n    // TODO looks a bit hacky\n    engine.$basePath = bp;\n\n    engine.operationState = oldState;\n    return item;\n  }\n  createObject(parent, properties = {}) {\n    const item = this.$createObject(parent, properties);\n    const QMLItem = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Item\");\n\n    if (item instanceof QMLItem) {\n      item.$properties.parent.set(parent, QmlWeb.QMLProperty.ReasonInit);\n    }\n\n    return item;\n  }\n  static getAttachedObject() {\n    if (!this.$Component) {\n      this.$Component = new QmlWeb.QObject(this);\n      this.$Component.completed = QmlWeb.Signal.signal([]);\n      QmlWeb.engine.completedSignals.push(this.$Component.completed);\n\n      this.$Component.destruction = QmlWeb.Signal.signal([]);\n    }\n    return this.$Component;\n  }\n}\n\nQmlWeb.registerQmlType({\n  global: true,\n  module: \"QtQml\",\n  name: \"Component\",\n  versions: /.*/,\n  baseClass: \"QtObject\",\n  constructor: QMLComponent\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQml\",\n  name: \"Connections\",\n  versions: /.*/,\n  baseClass: \"QtObject\",\n  properties: {\n    target: \"QtObject\",\n    ignoreUnknownSignals: \"bool\"\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n    this.target = this.$parent;\n    this.$connections = {};\n\n    this.$old_target = this.target;\n    this.targetChanged.connect(this, this.$onTargetChanged);\n    this.Component.completed.connect(this, this.Component$onCompleted);\n  }\n  $onTargetChanged() {\n    this.$reconnectTarget();\n  }\n  Component$onCompleted() {\n    this.$reconnectTarget();\n  }\n  $reconnectTarget() {\n    const old_target = this.$old_target;\n    for (const i in this.$connections) {\n      const c = this.$connections[i];\n      if (c._currentConnection && old_target && old_target[i] &&\n          typeof old_target[i].disconnect === \"function\") {\n        old_target[i].disconnect(c._currentConnection);\n      }\n      if (this.target) {\n        c._currentConnection = QmlWeb.connectSignal(this.target, i, c.value,\n          c.objectScope, c.componentScope);\n      }\n    }\n    this.$old_target = this.target;\n  }\n  $setCustomSlot(propName, value, objectScope, componentScope) {\n    this.$connections[propName] = { value, objectScope, componentScope };\n  }\n});\n","// Base object for all qml elements\n\nQmlWeb.registerQmlType({\n  module: \"QtQml\",\n  name: \"QtObject\",\n  versions: /.*/,\n}, class extends QmlWeb.QObject {\n  constructor(meta) {\n    super(meta.parent);\n\n    this.$isComponentRoot = meta.isComponentRoot;\n    this.$context = meta.context;\n\n    // Component get own properties\n    this.$attributes = [];\n    for (const key in meta.object) {\n      if (!meta.object.hasOwnProperty(key) || !meta.object[key]) {\n        continue;\n      }\n      const name = meta.object[key].__proto__.constructor.name;\n      if (name === \"QMLPropertyDefinition\" || name === \"QMLAliasDefinition\") {\n        this.$attributes.push(key);\n      }\n    }\n\n    const Signal = QmlWeb.Signal;\n\n    this.Keys = new QmlWeb.QObject(this);\n    this.Keys.asteriskPresed = Signal.signal();\n    this.Keys.backPressed = Signal.signal();\n    this.Keys.backtabPressed = Signal.signal();\n    this.Keys.callPressed = Signal.signal();\n    this.Keys.cancelPressed = Signal.signal();\n    this.Keys.deletePressed = Signal.signal();\n    for (let i = 0; i < 10; ++i) {\n      this.Keys[`digit${i}Pressed`] = Signal.signal();\n    }\n    this.Keys.escapePressed = Signal.signal();\n    this.Keys.flipPressed = Signal.signal();\n    this.Keys.hangupPressed = Signal.signal();\n    this.Keys.leftPressed = Signal.signal();\n    this.Keys.menuPressed = Signal.signal();\n    this.Keys.noPressed = Signal.signal();\n    this.Keys.pressed = Signal.signal();\n    this.Keys.released = Signal.signal();\n    this.Keys.returnPressed = Signal.signal();\n    this.Keys.rightPressed = Signal.signal();\n    this.Keys.selectPressed = Signal.signal();\n    this.Keys.spacePressed = Signal.signal();\n    this.Keys.tabPressed = Signal.signal();\n    this.Keys.upPressed = Signal.signal();\n    this.Keys.volumeDownPressed = Signal.signal();\n    this.Keys.volumeUpPressed = Signal.signal();\n    this.Keys.yesPressed = Signal.signal();\n  }\n  getAttributes() {\n    return this.$attributes;\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQml\",\n  name: \"Timer\",\n  versions: /.*/,\n  baseClass: \"QtObject\",\n  properties: {\n    interval: { type: \"int\", initialValue: 1000 },\n    parent: { type: \"QtObject\", readOnly: true },\n    repeat: \"bool\",\n    running: \"bool\",\n    triggeredOnStart: \"bool\"\n  },\n  signals: {\n    triggered: []\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.$properties.parent.set(this.$parent, QmlWeb.QMLProperty.ReasonInit);\n\n    /* This ensures that if the user toggles the \"running\" property manually,\n     * the timer will trigger. */\n    this.runningChanged.connect(this, this.$onRunningChanged);\n\n    QmlWeb.engine.$addTicker((...args) => this.$ticker(...args));\n\n    QmlWeb.engine.$registerStart(() => {\n      if (this.running) {\n        this.restart();\n      }\n    });\n\n    QmlWeb.engine.$registerStop(() => this.stop());\n  }\n  start() {\n    this.running = true;\n  }\n  stop() {\n    this.running = false;\n  }\n  restart() {\n    this.stop();\n    this.start();\n  }\n  $ticker(now) {\n    if (!this.running) return;\n    if (now - this.$prevTrigger >= this.interval) {\n      this.$prevTrigger = now;\n      this.$trigger();\n    }\n  }\n  $onRunningChanged() {\n    if (this.running) {\n      this.$prevTrigger = Date.now();\n      if (this.triggeredOnStart) {\n        this.$trigger();\n      }\n    }\n  }\n  $trigger() {\n    if (!this.repeat) {\n      // We set the value directly in order to be able to emit the\n      // runningChanged signal after triggered, like Qt does it.\n      this.$properties.running.val = false;\n    }\n\n    // Trigger this.\n    this.triggered();\n\n    if (!this.repeat) {\n      // Emit changed signal manually after setting the value manually above.\n      this.runningChanged();\n    }\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick.Controls\",\n  name: \"Button\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    text: \"string\",\n    enabled: { type: \"bool\", initialValue: true }\n  },\n  signals: {\n    clicked: []\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n    this.textChanged.connect(this, this.$onTextChanged);\n    this.enabledChanged.connect(this, this.$onEnabledChanged);\n\n    const button = this.impl = document.createElement(\"button\");\n    button.style.pointerEvents = \"auto\";\n    this.dom.appendChild(button);\n\n    button.onclick = () => {\n      this.clicked();\n    };\n  }\n  Component$onCompleted() {\n    this.implicitWidth = this.impl.offsetWidth;\n    this.implicitHeight = this.impl.offsetHeight;\n  }\n  $onTextChanged(newVal) {\n    this.impl.textContent = newVal;\n    //TODO: Replace those statically sized borders\n    this.implicitWidth = this.impl.offsetWidth;\n    this.implicitHeight = this.impl.offsetHeight;\n  }\n  $onEnabledChanged(newVal) {\n    this.impl.disabled = !newVal;\n  }\n\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick.Controls\",\n  name: \"CheckBox\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    text: \"string\",\n    checked: \"bool\",\n    color: \"color\"\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.impl = document.createElement(\"label\");\n    this.impl.style.pointerEvents = \"auto\";\n\n    const checkbox = document.createElement(\"input\");\n    checkbox.type = \"checkbox\";\n    checkbox.style.verticalAlign = \"text-bottom\";\n    checkbox.addEventListener(\"change\", () => {\n      this.checked = checkbox.checked;\n    });\n    this.impl.appendChild(checkbox);\n\n    const span = document.createElement(\"span\");\n    this.impl.appendChild(span);\n\n    this.dom.appendChild(this.impl);\n\n    const QMLFont = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Font\");\n    this.font = new QMLFont(this);\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n    this.textChanged.connect(this, this.$onTextChanged);\n    this.colorChanged.connect(this, this.$onColorChanged);\n    this.checkedChanged.connect(this, this.$onCheckedChanged);\n  }\n  $onTextChanged(newVal) {\n    this.impl.children[1].innerHTML = newVal;\n    this.implicitHeight = this.impl.offsetHeight;\n    this.implicitWidth = this.impl.offsetWidth > 0 ?\n                          this.impl.offsetWidth + 4 :\n                          0;\n  }\n  $onColorChanged(newVal) {\n    this.impl.children[1].style.color = new QmlWeb.QColor(newVal);\n  }\n  $onCheckedChanged() {\n    this.impl.children[0].checked = this.checked;\n  }\n  Component$onCompleted() {\n    this.implicitHeight = this.impl.offsetHeight;\n    this.implicitWidth = this.impl.offsetWidth > 0 ?\n                          this.impl.offsetWidth + 4 :\n                          0;\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick.Controls\",\n  name: \"ComboBox\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    count: \"int\",\n    currentIndex: \"int\",\n    currentText: \"string\",\n    menu: { type: \"array\", initialValue: [] },\n    model: { type: \"array\", initialValue: [] },\n    pressed: \"bool\"\n  },\n  signals: {\n    accepted: [],\n    activated: [{ type: \"int\", name: \"index\" }]\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.dom.style.pointerEvents = \"auto\";\n    this.name = \"QMLComboBox\";\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n    this.modelChanged.connect(this, this.$onModelChanged);\n\n    this.dom.onclick = () => {\n      const index = this.dom.firstChild.selectedIndex;\n      this.currentIndex = index;\n      this.currentText = this.model[index];\n      this.accepted();\n      this.activated(index);\n    };\n  }\n  find(text) {\n    return this.model.indexOf(text);\n  }\n  selectAll() {\n    // TODO\n  }\n  textAt(index) {\n    return this.model[index];\n  }\n  $updateImpl() {\n    this.currentIndex = 0;\n    this.count = this.model.length;\n    const entries = [];\n    for (let i = 0; i < this.count; i++) {\n      const elt = this.model[i];\n      //if (elt instanceof Array) { // TODO - optgroups? update model !\n      //    var count_i = elt.length;\n      //    for (var j = 0; j < count_i; j++)\n      //        html += \"<option>\" + elt[j] + \"</option>\";\n      //}\n      //else\n      entries.push(`<option>${elt}</option>`);\n    }\n    // TODO: remove innerHTML, port to DOM\n    this.dom.innerHTML = `<select>${entries.join(\"\")}</select>`;\n    this.impl = this.dom.firstChild;\n  }\n  Component$onCompleted() {\n    this.$updateImpl();\n    this.implicitWidth = this.impl.offsetWidth;\n    this.implicitHeight = this.impl.offsetHeight;\n  }\n  $onModelChanged() {\n    this.$updateImpl();\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick.Controls\",\n  name: \"ScrollView\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    contentItem: \"Item\",\n    flickableItem: \"Item\", // TODO  0) implement it  1) make it read-only\n    viewport: \"Item\", // TODO\n    frameVisible: \"bool\",\n    highlightOnFocus: \"bool\", // TODO test\n    verticalScrollBarPolicy: \"enum\",\n    horizontalScrollBarPolicy: \"enum\",\n    style: \"Component\" // TODO\n  },\n  defaultProperty: \"contentItem\"\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.css.pointerEvents = \"auto\";\n    this.setupFocusOnDom(this.dom);\n\n    this.contentItemChanged.connect(this, this.$onContentItemChanged);\n    this.flickableItemChanged.connect(this, this.$onFlickableItemChanged);\n    this.viewportChanged.connect(this, this.$onViewportChanged);\n    this.frameVisibleChanged.connect(this, this.$onFrameVisibleChanged);\n    this.highlightOnFocusChanged.connect(this, this.$onHighlightOnFocusChanged);\n    this.horizontalScrollBarPolicyChanged.connect(this,\n                                      this.$onHorizontalScrollBarPolicyChanged);\n    this.verticalScrollBarPolicyChanged.connect(this,\n                                        this.$onVerticalScrollBarPolicyChanged);\n    this.styleChanged.connect(this, this.$onStyleChanged);\n    this.childrenChanged.connect(this, this.$onChildrenChanged);\n    this.focusChanged.connect(this, this.$onFocusChanged);\n\n    this.width = this.implicitWidth = 240; // default QML ScrollView width\n    this.height = this.implicitHeight = 150; // default QML ScrollView height\n    this.width = this.implicitWidth;\n    this.height = this.implicitHeight;\n\n    const Qt = QmlWeb.Qt;\n    this.contentItem = undefined;\n    this.flickableItem = undefined;\n    this.viewport = undefined;\n    this.frameVisible = false;\n    this.highlightOnFocus = false;\n    this.verticalScrollBarPolicy = Qt.ScrollBarAsNeeded;\n    this.horizontalScrollBarPolicy = Qt.ScrollBarAsNeeded;\n    this.style = undefined;\n  }\n  $onContentItemChanged(newItem) {\n    if (typeof newItem !== undefined) {\n      newItem.parent = this;\n    }\n  }\n  $onFlickableItemChanged() {\n  }\n  $onHighlightOnFocusChanged() {\n  }\n  $onViewportChanged() {\n  }\n  $onFocusChanged(focus) {\n    this.css.outline = this.highlight && focus\n      ? \"outline: lightblue solid 2px;\"\n      : \"\";\n  }\n  $onFrameVisibleChanged(visible) {\n    this.css.border = visible ? \"1px solid gray\" : \"hidden\";\n  }\n  $onHorizontalScrollBarPolicyChanged(newPolicy) {\n    this.css.overflowX = this.$scrollBarPolicyToCssOverflow(newPolicy);\n  }\n  $onVerticalScrollBarPolicyChanged(newPolicy) {\n    this.css.overflowY = this.$scrollBarPolicyToCssOverflow(newPolicy);\n  }\n  $onStyleChanged() {\n  }\n  $onChildrenChanged() {\n    if (typeof this.contentItem === \"undefined\" && this.children.length === 1) {\n      this.contentItem = this.children[0];\n    }\n  }\n  $scrollBarPolicyToCssOverflow(policy) {\n    const Qt = QmlWeb.Qt;\n    switch (policy) {\n      case Qt.ScrollBarAsNeeded:\n        return \"auto\";\n      case Qt.ScrollBarAlwaysOff:\n        return \"hidden\";\n      case Qt.ScrollBarAlwaysOn:\n        return \"scroll\";\n    }\n    return \"auto\";\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick.Controls\",\n  name: \"TextArea\",\n  versions: /.*/,\n  baseClass: \"QtQuick.TextEdit\"\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n    const textarea = this.impl;\n    textarea.style.padding = \"5px\";\n    textarea.style.borderWidth = \"1px\";\n    textarea.style.backgroundColor = \"#fff\";\n  }\n});\n","/**\n *\n * TextField is used to accept a line of text input.\n * Input constraints can be placed on a TextField item\n * (for example, through a validator or inputMask).\n * Setting echoMode to an appropriate value enables TextField\n * to be used for a password input field.\n *\n * Valid entries for echoMode and alignment are defined in TextInput.\n *\n */\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick.Controls\",\n  name: \"TextField\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  enums: {\n    TextInput: { Normal: 0, Password: 1, NoEcho: 2, PasswordEchoOnEdit: 3 }\n  },\n  properties: {\n    text: \"string\",\n    maximumLength: { type: \"int\", initialValue: -1 },\n    readOnly: \"bool\",\n    validator: \"var\",\n    echoMode: \"enum\" // TextInput.Normal\n  },\n  signals: {\n    accepted: []\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    const QMLFont = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Font\");\n    this.font = new QMLFont(this);\n\n    const input = this.impl = document.createElement(\"input\");\n    input.type = \"text\";\n    input.disabled = true;\n    input.style.pointerEvents = \"auto\";\n    input.style.margin = \"0\";\n    input.style.width = \"100%\";\n    this.dom.appendChild(input);\n    this.setupFocusOnDom(input);\n    input.disabled = false;\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n    this.textChanged.connect(this, this.$onTextChanged);\n    this.echoModeChanged.connect(this, this.$onEchoModeChanged);\n    this.maximumLengthChanged.connect(this, this.$onMaximumLengthChanged);\n    this.readOnlyChanged.connect(this, this.$onReadOnlyChanged);\n    this.Keys.pressed.connect(this, this.Keys$onPressed);\n\n    this.impl.addEventListener(\"input\", () => this.$updateValue());\n  }\n  Component$onCompleted() {\n    this.implicitWidth = this.impl.offsetWidth;\n    this.implicitHeight = this.impl.offsetHeight;\n  }\n  $onTextChanged(newVal) {\n    // See TextInput for comments\n    if (this.impl.value !== newVal) {\n      this.impl.value = newVal;\n    }\n  }\n  $onEchoModeChanged(newVal) {\n    const TextInput = this.TextInput;\n    const input = this.impl;\n    switch (newVal) {\n      case TextInput.Normal:\n        input.type = \"text\";\n        break;\n      case TextInput.Password:\n        input.type = \"password\";\n        break;\n      case TextInput.NoEcho:\n        // Not supported, use password, that's nearest\n        input.type = \"password\";\n        break;\n      case TextInput.PasswordEchoOnEdit:\n        // Not supported, use password, that's nearest\n        input.type = \"password\";\n        break;\n    }\n  }\n  $onMaximumLengthChanged(newVal) {\n    this.impl.maxLength = newVal < 0 ? null : newVal;\n  }\n  $onReadOnlyChanged(newVal) {\n    this.impl.disabled = newVal;\n  }\n  Keys$onPressed(e) {\n    const Qt = QmlWeb.Qt;\n    const submit = e.key === Qt.Key_Return || e.key === Qt.Key_Enter;\n    if (submit && this.$testValidator()) {\n      this.accepted();\n      e.accepted = true;\n    }\n  }\n  $testValidator() {\n    if (this.validator) {\n      return this.validator.validate(this.text);\n    }\n    return true;\n  }\n  $updateValue() {\n    if (this.text !== this.impl.value) {\n      this.$canEditReadOnlyProperties = true;\n      this.text = this.impl.value;\n      this.$canEditReadOnlyProperties = false;\n    }\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick.Window\",\n  name: \"Screen\",\n  versions: /.*/,\n  baseClass: \"QtQuick.Item\",\n  properties: {\n    name: \"string\",\n    orientation: \"enum\",\n    orientationUpdateMask: \"enum\",\n    primaryOrientation: \"enum\",\n    pixelDensity: \"real\",\n    devicePixelRatio: \"real\",\n    desktopAvailableHeight: \"int\",\n    desktopAvailableWidth: \"int\",\n    height: \"int\",\n    width: \"int\"\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    // TODO: rewrite as an attached object and forbid constructing\n    this.Component.completed.connect(this, this.Component$onCompleted);\n  }\n  Component$onCompleted() {\n    const Qt = QmlWeb.Qt;\n    this.desktopAvailableHeight = window.outerHeight;\n    this.desktopAvailableWidth = window.outerWidth;\n    this.devicePixelRatio = window.devicePixelRatio;\n    this.height = window.innerHeight;\n    this.name = this.name;\n    this.orientation = Qt.PrimaryOrientation;\n    this.orientationUpdateMask = 0;\n    this.pixelDensity = 100.0;  // TODO\n    this.primaryOrientation = Qt.PrimaryOrientation;\n    this.width = window.innerWidth;\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"AnimatedImage\",\n  versions: /.*/,\n  baseClass: \"Image\"\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Animation\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  enums: {\n    Animation: { Infinite: -1 },\n    Easing: QmlWeb.Easing\n  },\n  properties: {\n    alwaysRunToEnd: \"bool\",\n    loops: { type: \"int\", initialValue: 1 },\n    paused: \"bool\",\n    running: \"bool\"\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n  }\n  restart() {\n    this.stop();\n    this.start();\n  }\n  start() {\n    this.running = true;\n  }\n  stop() {\n    this.running = false;\n  }\n  pause() {\n    this.paused = true;\n  }\n  resume() {\n    this.paused = false;\n  }\n  complete() {\n    // To be overridden\n    console.log(\"Unbound method for\", this);\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Behavior\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    animation: \"Animation\",\n    enabled: { type: \"bool\", initialValue: true }\n  },\n  defaultProperty: \"animation\"\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n    this.$on = meta.object.$on;\n\n    this.animationChanged.connect(this, this.$onAnimationChanged);\n    this.enabledChanged.connect(this, this.$onEnabledChanged);\n  }\n  $onAnimationChanged(newVal) {\n    newVal.target = this.$parent;\n    newVal.property = this.$on;\n    this.$parent.$properties[this.$on].animation = newVal;\n  }\n  $onEnabledChanged(newVal) {\n    this.$parent.$properties[this.$on].animation = newVal\n      ? this.animation\n      : null;\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"BorderImage\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  enums: {\n    BorderImage: {\n      Stretch: \"stretch\", Repeat: \"repeat\", Round: \"round\",\n      Null: 1, Ready: 2, Loading: 3, Error: 4\n    }\n  },\n  properties: {\n    source: \"url\",\n    smooth: { type: \"bool\", initialValue: true },\n    // BorderImage.Stretch\n    horizontalTileMode: { type: \"enum\", initialValue: \"stretch\" },\n    // BorderImage.Stretch\n    verticalTileMode: { type: \"enum\", initialValue: \"stretch\" },\n    progress: \"real\",\n    status: { type: \"enum\", initialValue: 1 } // BorderImage.Null\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    const createProperty = QmlWeb.createProperty;\n    this.border = new QmlWeb.QObject(this);\n    createProperty(\"int\", this.border, \"left\");\n    createProperty(\"int\", this.border, \"right\");\n    createProperty(\"int\", this.border, \"top\");\n    createProperty(\"int\", this.border, \"bottom\");\n\n    const bg = this.impl = document.createElement(\"div\");\n    bg.style.pointerEvents = \"none\";\n    bg.style.height = \"100%\";\n    bg.style.boxSizing = \"border-box\";\n    this.dom.appendChild(bg);\n\n    this.$img = new Image();\n    this.$img.addEventListener(\"load\", () => {\n      this.progress = 1;\n      this.status = this.BorderImage.Ready;\n    });\n    this.$img.addEventListener(\"error\", () => {\n      this.status = this.BorderImage.Error;\n    });\n\n    this.sourceChanged.connect(this, this.$onSourceChanged);\n    this.border.leftChanged.connect(this, this.$updateBorder);\n    this.border.rightChanged.connect(this, this.$updateBorder);\n    this.border.topChanged.connect(this, this.$updateBorder);\n    this.border.bottomChanged.connect(this, this.$updateBorder);\n    this.horizontalTileModeChanged.connect(this, this.$updateBorder);\n    this.verticalTileModeChanged.connect(this, this.$updateBorder);\n    this.smoothChanged.connect(this, this.$onSmoothChanged);\n  }\n  $onSourceChanged(source) {\n    this.progress = 0;\n    this.status = this.BorderImage.Loading;\n    const style = this.impl.style;\n    const imageURL = QmlWeb.engine.$resolveImageURL(source);\n    style.OBorderImageSource = `url(\"${imageURL}\")`;\n    style.borderImageSource = `url(\"${imageURL}\")`;\n    this.$img.src = imageURL;\n    if (this.$img.complete) {\n      this.progress = 1;\n      this.status = this.BorderImage.Ready;\n    }\n  }\n  $updateBorder() {\n    const style = this.impl.style;\n    const { right, left, top, bottom } = this.border;\n    const slice = `${top} ${right} ${bottom} ${left} fill`;\n    const width = `${top}px ${right}px ${bottom}px ${left}px`;\n    const repeat = `${this.horizontalTileMode} ${this.verticalTileMode}`;\n    style.OBorderImageSlice = slice;\n    style.OBorderImageRepeat = repeat;\n    style.OBorderImageWidth = width;\n    style.borderImageSlice = slice;\n    style.borderImageRepeat = repeat;\n    style.borderImageWidth = width;\n  }\n  $onSmoothChanged(val) {\n    const style = this.impl.style;\n    if (val) {\n      style.imageRendering = \"auto\";\n    } else {\n      style.imageRendering = \"-webkit-optimize-contrast\";\n      style.imageRendering = \"-moz-crisp-edges\";\n      style.imageRendering = \"crisp-edges\";\n      style.imageRendering = \"pixelated\";\n    }\n  }\n});\n","// TODO\n// Currently only a skeleton implementation\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Canvas\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    available: { type: \"bool\", initialValue: true },\n    canvasSize: { type: \"var\", initialValue: [0, 0] },\n    canvasWindow: { type: \"var\", initialValue: [0, 0, 0, 0] },\n    context: { type: \"var\", initialValue: {} },\n    contextType: { type: \"string\", initialValue: \"contextType\" },\n    renderStrategy: \"enum\",\n    renderTarget: \"enum\",\n    tileSize: { type: \"var\", initialValue: [0, 0] }\n  },\n  signals: {\n    imageLoaded: [],\n    paint: [{ type: \"var\", name: \"region\" }],\n    painted: []\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n  }\n  cancelRequestAnimationFrame(/*handle*/) {\n    return false;\n  }\n  getContext(/*context_id, ...args*/) {\n    return {};\n  }\n  isImageError(/*image*/) {\n    return true;\n  }\n  isImageLoaded(/*image*/) {\n    return false;\n  }\n  isImageLoading(/*image*/) {\n    return false;\n  }\n  loadImage(image) {\n    //loadImageAsync(image);\n    if (this.isImageLoaded(image)) {\n      this.imageLoaded();\n    }\n  }\n  markDirty(area) {\n    // if dirty\n    this.paint(area);\n  }\n  requestAnimationFrame(/*callback*/) {\n    return 0;\n  }\n  requestPaint() {\n  }\n  save(/*file_name*/) {\n    return false;\n  }\n  toDataURL(/*mime_type*/) {\n    return \"\";\n  }\n  unloadImage(/*image*/) {\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Column\",\n  versions: /.*/,\n  baseClass: \"Positioner\"\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n  }\n  layoutChildren() {\n    let curPos = 0;\n    let maxWidth = 0;\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i];\n      if (!child.visible || !child.width || !child.height) {\n        continue;\n      }\n      maxWidth = child.width > maxWidth ? child.width : maxWidth;\n      child.y = curPos;\n      curPos += child.height + this.spacing;\n    }\n    this.implicitWidth = maxWidth;\n    this.implicitHeight = curPos - this.spacing;\n    // We want no spacing at the bottom side\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"DoubleValidator\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  enums: {\n    DoubleValidator: { StandardNotation: 1, ScientificNotation: 2 }\n  },\n  properties: {\n    bottom: { type: \"real\", initialValue: -Infinity },\n    top: { type: \"real\", initialValue: Infinity },\n    decimals: { type: \"int\", initialValue: 1000 },\n    // DoubleValidator.ScientificNotation\n    notation: { type: \"enum\", initialValue: 2 }\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n    this.$standardRegExp = /^(-|\\+)?\\s*[0-9]+(\\.[0-9]+)?$/;\n    this.$scientificRegExp = /^(-|\\+)?\\s*[0-9]+(\\.[0-9]+)?(E(-|\\+)?[0-9]+)?$/;\n  }\n  getRegExpForNotation(notation) {\n    switch (notation) {\n      case this.DoubleValidator.ScientificNotation:\n        return this.$scientificRegExp;\n      case this.DoubleValidator.StandardNotation:\n        return this.$standardRegExp;\n    }\n    return null;\n  }\n  $getDecimalsForNumber(number) {\n    if (Math.round(number) === number) {\n      return 0;\n    }\n    const str = `${number}`;\n    return /\\d*$/.exec(str)[0].length;\n  }\n  validate(string) {\n    const regExp = this.getRegExpForNotation(this.notation);\n    if (!regExp.test(string.trim())) {\n      return false;\n    }\n    const value = parseFloat(string);\n    return this.bottom <= value && this.top >= value &&\n           this.$getDecimalsForNumber(value) <= this.decimals;\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Flow\",\n  versions: /.*/,\n  baseClass: \"Positioner\",\n  enums: {\n    Flow: { LeftToRight: 0, TopToBottom: 1 }\n  },\n  properties: {\n    flow: \"enum\", // Flow.LeftToRight\n    layoutDirection: \"enum\" // Flow.LeftToRight\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.flowChanged.connect(this, this.layoutChildren);\n    this.layoutDirectionChanged.connect(this, this.layoutChildren);\n    this.widthChanged.connect(this, this.layoutChildren);\n    this.heightChanged.connect(this, this.layoutChildren);\n    this.layoutChildren();\n  }\n\n  layoutChildren() {\n    if (this.flow === undefined) {\n      // Flow has not been fully initialized yet\n      return;\n    }\n\n    let curHPos = 0;\n    let curVPos = 0;\n    let rowSize = 0;\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i];\n      if (!child.visible || !child.width || !child.height) {\n        continue;\n      }\n\n      if (this.flow === this.Flow.LeftToRight) {\n        if (!this.$isUsingImplicitWidth && curHPos + child.width > this.width) {\n          curHPos = 0;\n          curVPos += rowSize + this.spacing;\n          rowSize = 0;\n        }\n        rowSize = child.height > rowSize ? child.height : rowSize;\n        child.x = this.layoutDirection === this.Flow.TopToBottom\n                ? this.width - curHPos - child.width : curHPos;\n        child.y = curVPos;\n        curHPos += child.width + this.spacing;\n      } else { // Flow.TopToBottom\n        if (!this.$isUsingImplicitHeight\n          && curVPos + child.height > this.height)\n        {\n          curVPos = 0;\n          curHPos += rowSize + this.spacing;\n          rowSize = 0;\n        }\n        rowSize = child.width > rowSize ? child.width : rowSize;\n        child.x = this.layoutDirection === this.Flow.TopToBottom\n                ? this.width - curHPos - child.width : curHPos;\n        child.y = curVPos;\n        curVPos += child.height + this.spacing;\n      }\n    }\n\n    if (this.flow === this.Flow.LeftToRight) {\n      this.implicitWidth = curHPos - this.spacing;\n      this.implicitHeight = curVPos + rowSize;\n    } else { // Flow.TopToBottom\n      this.implicitWidth = curHPos + rowSize;\n      this.implicitHeight = curVPos - this.spacing;\n    }\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Font\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\"\n}, class extends QmlWeb.QObject {\n  constructor(parent) {\n    super(parent); // TODO: callSuper support?\n    this.Font = global.Font; // TODO: make a sane enum\n\n    const Font = this.Font;\n    const createProperty = QmlWeb.createProperty;\n\n    createProperty(\"bool\", this, \"bold\");\n    createProperty(\"enum\", this, \"capitalization\", { initialValue:\n                                                      Font.MixedCase });\n    createProperty(\"string\", this, \"family\", { initialValue: \"sans-serif\" });\n    createProperty(\"bool\", this, \"italic\");\n    createProperty(\"real\", this, \"letterSpacing\");\n    createProperty(\"int\", this, \"pixelSize\", { initialValue: 13 });\n    createProperty(\"real\", this, \"pointSize\", { initialValue: 10 });\n    createProperty(\"bool\", this, \"strikeout\");\n    createProperty(\"bool\", this, \"underline\");\n    createProperty(\"enum\", this, \"weight\", { initialValue: Font.Normal });\n    createProperty(\"real\", this, \"wordSpacing\");\n\n    this.$sizeLock = false;\n\n    this.boldChanged.connect(this, this.$onBoldChanged);\n    this.capitalizationChanged.connect(this, this.$onCapitalizationChanged);\n    this.familyChanged.connect(this, this.$onFamilyChanged);\n    this.italicChanged.connect(this, this.$onItalicChanged);\n    this.letterSpacingChanged.connect(this, this.$onLetterSpacingChanged);\n    this.pixelSizeChanged.connect(this, this.$onPixelSizeChanged);\n    this.pointSizeChanged.connect(this, this.$onPointSizeChanged);\n    this.strikeoutChanged.connect(this, this.$onStrikeoutChanged);\n    this.underlineChanged.connect(this, this.$onUnderlineChanged);\n    this.weightChanged.connect(this, this.$onWidthChanged);\n    this.wordSpacingChanged.connect(this, this.$onWordSpacingChanged);\n  }\n  $onBoldChanged(newVal) {\n    const Font = this.Font;\n    this.weight = newVal ? Font.Bold : Font.Normal;\n  }\n  $onCapitalizationChanged(newVal) {\n    const style = this.$parent.dom.firstChild.style;\n    style.fontVariant = newVal === this.Font.SmallCaps ? \"small-caps\" : \"none\";\n    style.textTransform = this.$capitalizationToTextTransform(newVal);\n  }\n  $onFamilyChanged(newVal) {\n    const style = this.$parent.dom.firstChild.style;\n    style.fontFamily = newVal;\n  }\n  $onItalicChanged(newVal) {\n    const style = this.$parent.dom.firstChild.style;\n    style.fontStyle = newVal ? \"italic\" : \"normal\";\n  }\n  $onLetterSpacingChanged(newVal) {\n    const style = this.$parent.dom.firstChild.style;\n    style.letterSpacing = newVal !== undefined ? `${newVal}px` : \"\";\n  }\n  $onPixelSizeChanged(newVal) {\n    if (!this.$sizeLock) {\n      this.pointSize = newVal * 0.75;\n    }\n    const val = `${newVal}px`;\n    this.$parent.dom.style.fontSize = val;\n    this.$parent.dom.firstChild.style.fontSize = val;\n  }\n  $onPointSizeChanged(newVal) {\n    this.$sizeLock = true;\n    this.pixelSize = Math.round(newVal / 0.75);\n    this.$sizeLock = false;\n  }\n  $onStrikeoutChanged(newVal) {\n    const style = this.$parent.dom.firstChild.style;\n    style.textDecoration = newVal\n      ? \"line-through\"\n      : this.$parent.font.underline\n        ? \"underline\"\n        : \"none\";\n  }\n  $onUnderlineChanged(newVal) {\n    const style = this.$parent.dom.firstChild.style;\n    style.textDecoration = this.$parent.font.strikeout\n      ? \"line-through\"\n      : newVal\n        ? \"underline\"\n        : \"none\";\n  }\n  $onWidthChanged(newVal) {\n    const style = this.$parent.dom.firstChild.style;\n    style.fontWeight = this.$weightToCss(newVal);\n  }\n  $onWordSpacingChanged(newVal) {\n    const style = this.$parent.dom.firstChild.style;\n    style.wordSpacing = newVal !== undefined ? `${newVal}px` : \"\";\n  }\n\n  $weightToCss(weight) {\n    const Font = this.Font;\n    switch (weight) {\n      case Font.Thin: return \"100\";\n      case Font.ExtraLight: return \"200\";\n      case Font.Light: return \"300\";\n      case Font.Normal: return \"400\";\n      case Font.Medium: return \"500\";\n      case Font.DemiBold: return \"600\";\n      case Font.Bold: return \"700\";\n      case Font.ExtraBold: return \"800\";\n      case Font.Black: return \"900\";\n    }\n    return \"normal\";\n  }\n  $capitalizationToTextTransform(capitalization) {\n    const Font = this.Font;\n    switch (capitalization) {\n      case Font.AllUppercase: return \"uppercase\";\n      case Font.AllLowercase: return \"lowercase\";\n      case Font.Capitalize: return \"capitalize\";\n    }\n    return \"none\";\n  }\n});\n","global.Font = {\n  // Capitalization\n  MixedCase: 0,\n  AllUppercase: 1,\n  AllLowercase: 2,\n  SmallCaps: 3,\n  Capitalize: 4,\n  // Weight\n  Thin: 0,\n  ExtraLight: 12,\n  Light: 25,\n  Normal: 50,\n  Medium: 57,\n  DemiBold: 63,\n  Bold: 75,\n  ExtraBold: 81,\n  Black: 87\n};\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"FontLoader\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  enums: {\n    FontLoader: { Null: 0, Ready: 1, Loading: 2, Error: 3 }\n  },\n  properties: {\n    name: \"string\",\n    source: \"url\",\n    status: \"enum\" // FontLoader.Null\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.$domStyle = document.createElement(\"style\");\n    this.$lastName = \"\";\n    this.$inTouchName = false;\n\n    /*\n      Maximum timeout is the maximum time for a font to load. If font isn't\n      loaded in this time, the status is set to Error.\n      For both cases (with and without FontLoader.js) if the font takes more\n      than the maximum timeout to load, dimensions recalculations for elements\n      that are using this font will not be triggered or will have no effect.\n\n      FontLoader.js uses only the last timeout. The state and name properties\n      are set immediately when the font loads. If the font could not be loaded,\n      the Error status will be set only when this timeout expires. If the font\n      loading takes more than the timeout, the name property is set, but the\n      status is set to Error.\n\n      Fallback sets the font name immediately and touches it several times to\n      trigger dimensions recalcuations. The status is set to Error and should\n      not be used.\n    */\n    // 15 seconds maximum\n    this.$timeouts = [20, 50, 100, 300, 500, 1000, 3000, 5000, 10000, 15000];\n\n    this.sourceChanged.connect(this, this.$onSourceChanged);\n    this.nameChanged.connect(this, this.$onNameChanged);\n  }\n  $loadFont(fontName) {\n    /* global FontLoader */\n    if (this.$lastName === fontName || this.$inTouchName) {\n      return;\n    }\n    this.$lastName = fontName;\n\n    if (!fontName) {\n      this.status = this.FontLoader.Null;\n      return;\n    }\n    this.status = this.FontLoader.Loading;\n    if (typeof FontLoader === \"function\") {\n      const fontLoader = new FontLoader([fontName], {\n        fontsLoaded: error => {\n          if (error !== null) {\n            if (this.$lastName === fontName &&\n                error.notLoadedFontFamilies[0] === fontName) {\n              // Set the name for the case of font loading after the timeout.\n              this.name = fontName;\n              this.status = this.FontLoader.Error;\n            }\n          }\n        },\n        fontLoaded: fontFamily => {\n          if (this.$lastName === fontName && fontFamily === fontName) {\n            this.name = fontName;\n            this.status = this.FontLoader.Ready;\n          }\n        }\n      }, this.$timeouts[this.$timeouts.length - 1]);\n      // Else I get problems loading multiple fonts (FontLoader.js bug?)\n      FontLoader.testDiv = null;\n      fontLoader.loadFonts();\n    } else {\n      console.warn(`FontLoader.js library is not loaded.\nYou should load FontLoader.js if you want to use QtQuick FontLoader elements.\nRefs: https://github.com/smnh/FontLoader.`);\n      // You should not rely on 'status' property without FontLoader.js.\n      this.status = this.FontLoader.Error;\n      this.name = fontName;\n      this.$cycleTouchName(fontName, 0);\n    }\n  }\n  $cycleTouchName(fontName, i) {\n    if (this.$lastName !== fontName) {\n      return;\n    }\n    if (i > 0) {\n      const name = this.name;\n      this.$inTouchName = true;\n      // Calling this.nameChanged() is not enough, we have to actually change\n      // the value to flush the bindings.\n      this.name = \"sans-serif\";\n      this.name = name;\n      this.$inTouchName = false;\n    }\n    if (i < this.$timeouts.length) {\n      setTimeout(() => {\n        this.$cycleTouchName(fontName, i + 1);\n      }, this.$timeouts[i] - (i > 0 ? this.$timeouts[i - 1] : 0));\n    }\n  }\n  $onSourceChanged(font_src) {\n    const rand = Math.round(Math.random() * 1e15);\n    const fontName = `font_${Date.now().toString(36)}_${rand.toString(36)}`;\n    this.$domStyle.innerHTML = `@font-face {\n      font-family: ${fontName};\n      src: url('${font_src}');\n    }`;\n    document.getElementsByTagName(\"head\")[0].appendChild(this.$domStyle);\n    this.$loadFont(fontName);\n  }\n  $onNameChanged(fontName) {\n    this.$loadFont(fontName);\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Grid\",\n  versions: /.*/,\n  baseClass: \"Positioner\",\n  enums: {\n    Grid: { LeftToRight: 0, TopToBottom: 1 }\n  },\n  properties: {\n    columns: \"int\",\n    rows: \"int\",\n    flow: \"enum\",\n    layoutDirection: \"enum\"\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.columnsChanged.connect(this, this.layoutChildren);\n    this.rowsChanged.connect(this, this.layoutChildren);\n    this.flowChanged.connect(this, this.layoutChildren);\n    this.layoutDirectionChanged.connect(this, this.layoutChildren);\n    this.layoutChildren();\n  }\n  layoutChildren() {\n    // How many items are actually visible?\n    const visibleItems = this.$getVisibleItems();\n\n    // How many rows and columns do we need?\n    const [c, r] = this.$calculateSize(visibleItems.length);\n\n    // How big are the colums/rows?\n    const [colWidth, rowHeight] = this.$calculateGrid(visibleItems, c, r);\n\n    // Do actual positioning\n    // When layoutDirection is RightToLeft we need oposite order of coumns\n    const step = this.layoutDirection === 1 ? -1 : 1;\n    const startingPoint = this.layoutDirection === 1 ? c - 1 : 0;\n    const endPoint = this.layoutDirection === 1 ? -1 : c;\n    let curHPos = 0;\n    let curVPos = 0;\n    if (this.flow === 0) {\n      for (let i = 0; i < r; i++) {\n        for (let j = startingPoint; j !== endPoint; j += step) {\n          const item = visibleItems[i * c + j];\n          if (!item) {\n            break;\n          }\n          item.x = curHPos;\n          item.y = curVPos;\n\n          curHPos += colWidth[j] + this.spacing;\n        }\n        curVPos += rowHeight[i] + this.spacing;\n        curHPos = 0;\n      }\n    } else {\n      for (let i = startingPoint; i !== endPoint; i += step) {\n        for (let j = 0; j < r; j++) {\n          const item = visibleItems[i * r + j];\n          if (!item) {\n            break;\n          }\n          item.x = curHPos;\n          item.y = curVPos;\n\n          curVPos += rowHeight[j] + this.spacing;\n        }\n        curHPos += colWidth[i] + this.spacing;\n        curVPos = 0;\n      }\n    }\n\n    // Set implicit size\n    let gridWidth = -this.spacing;\n    let gridHeight = -this.spacing;\n    for (const i in colWidth) {\n      gridWidth += colWidth[i] + this.spacing;\n    }\n    for (const i in rowHeight) {\n      gridHeight += rowHeight[i] + this.spacing;\n    }\n    this.implicitWidth = gridWidth;\n    this.implicitHeight = gridHeight;\n  }\n  $getVisibleItems() {\n    return this.children.filter(child =>\n      child.visible && child.width && child.height\n    );\n  }\n  $calculateSize(length) {\n    let cols;\n    let rows;\n    if (!this.columns && !this.rows) {\n      cols = 4;\n      rows = Math.ceil(length / cols);\n    } else if (!this.columns) {\n      rows = this.rows;\n      cols = Math.ceil(length / rows);\n    } else {\n      cols = this.columns;\n      rows = Math.ceil(length / cols);\n    }\n    return [cols, rows];\n  }\n  $calculateGrid(visibleItems, cols, rows) {\n    const colWidth = [];\n    const rowHeight = [];\n\n    if (this.flow === 0) {\n      for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n          const item = visibleItems[i * cols + j];\n          if (!item) {\n            break;\n          }\n          if (!colWidth[j] || item.width > colWidth[j]) {\n            colWidth[j] = item.width;\n          }\n          if (!rowHeight[i] || item.height > rowHeight[i]) {\n            rowHeight[i] = item.height;\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i < cols; i++) {\n        for (let j = 0; j < rows; j++) {\n          const item = visibleItems[i * rows + j];\n          if (!item) {\n            break;\n          }\n          if (!rowHeight[j] || item.height > rowHeight[j]) {\n            rowHeight[j] = item.height;\n          }\n          if (!colWidth[i] || item.width > colWidth[i]) {\n            colWidth[i] = item.width;\n          }\n        }\n      }\n    }\n\n    return [colWidth, rowHeight];\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Image\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  enums: {\n    Image: {\n      Stretch: 1, PreserveAspectFit: 2, PreserveAspectCrop: 3,\n      Tile: 4, TileVertically: 5, TileHorizontally: 6,\n\n      Null: 1, Ready: 2, Loading: 3, Error: 4\n    }\n  },\n  properties: {\n    asynchronous: { type: \"bool\", initialValue: true },\n    cache: { type: \"bool\", initialValue: true },\n    smooth: { type: \"bool\", initialValue: true },\n    fillMode: { type: \"enum\", initialValue: 1 }, // Image.Stretch\n    mirror: \"bool\",\n    progress: \"real\",\n    source: \"url\",\n    status: { type: \"enum\", initialValue: 1 } // Image.Null\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    const createProperty = QmlWeb.createProperty;\n\n    this.sourceSize = new QmlWeb.QObject(this);\n    createProperty(\"int\", this.sourceSize, \"width\");\n    createProperty(\"int\", this.sourceSize, \"height\");\n\n    const bg = this.impl = document.createElement(\"div\");\n    bg.style.pointerEvents = \"none\";\n    bg.style.height = \"100%\";\n    this.dom.appendChild(bg);\n\n    this.$img = new Image();\n    this.$img.addEventListener(\"load\", () => {\n      const w = this.$img.naturalWidth;\n      const h = this.$img.naturalHeight;\n      this.sourceSize.width = w;\n      this.sourceSize.height = h;\n      this.implicitWidth = w;\n      this.implicitHeight = h;\n      this.progress = 1;\n      this.status = this.Image.Ready;\n    });\n    this.$img.addEventListener(\"error\", () => {\n      this.status = this.Image.Error;\n    });\n\n    this.sourceChanged.connect(this, this.$onSourceChanged);\n    this.mirrorChanged.connect(this, this.$onMirrorChanged);\n    this.fillModeChanged.connect(this, this.$onFillModeChanged);\n    this.smoothChanged.connect(this, this.$onSmoothChanged);\n  }\n  $updateFillMode(val = this.fillMode) {\n    const style = this.impl.style;\n    switch (val) {\n      default:\n      case this.Image.Stretch:\n        style.backgroundRepeat = \"auto\";\n        style.backgroundSize = \"100% 100%\";\n        style.backgroundPosition = \"auto\";\n        break;\n      case this.Image.Tile:\n        style.backgroundRepeat = \"auto\";\n        style.backgroundSize = \"auto\";\n        style.backgroundPosition = \"center\";\n        break;\n      case this.Image.PreserveAspectFit:\n        style.backgroundRepeat = \"no-repeat\";\n        style.backgroundSize = \"contain\";\n        style.backgroundPosition = \"center\";\n        break;\n      case this.Image.PreserveAspectCrop:\n        style.backgroundRepeat = \"no-repeat\";\n        style.backgroundSize = \"cover\";\n        style.backgroundPosition = \"center\";\n        break;\n      case this.Image.TileVertically:\n        style.backgroundRepeat = \"repeat-y\";\n        style.backgroundSize = \"100% auto\";\n        style.backgroundPosition = \"auto\";\n        break;\n      case this.Image.TileHorizontally:\n        style.backgroundRepeat = \"repeat-x\";\n        style.backgroundSize = \"auto 100%\";\n        style.backgroundPosition = \"auto\";\n        break;\n    }\n  }\n  $onSourceChanged(source) {\n    this.progress = 0;\n    this.status = this.Image.Loading;\n    const imageURL = QmlWeb.engine.$resolveImageURL(source);\n    this.impl.style.backgroundImage = `url(\"${imageURL}\")`;\n    this.$img.src = imageURL;\n    if (this.$img.complete) {\n      this.progress = 1;\n      this.status = this.Image.Ready;\n    }\n    this.$updateFillMode();\n  }\n  $onMirrorChanged(val) {\n    const transformRule = \"scale(-1,1)\";\n    if (!val) {\n      const index = this.transform.indexOf(transformRule);\n      if (index >= 0) {\n        this.transform.splice(index, 1);\n      }\n    } else {\n      this.transform.push(transformRule);\n    }\n    this.$updateTransform();\n  }\n  $onFillModeChanged(val) {\n    this.$updateFillMode(val);\n  }\n  $onSmoothChanged(val) {\n    const style = this.impl.style;\n    if (val) {\n      style.imageRendering = \"auto\";\n    } else {\n      style.imageRendering = \"-webkit-optimize-contrast\";\n      style.imageRendering = \"-moz-crisp-edges\";\n      style.imageRendering = \"crisp-edges\";\n      style.imageRendering = \"pixelated\";\n    }\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"IntValidator\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    bottom: { type: \"int\", initialValue: -2147483647 },\n    top: { type: \"int\", initialValue: 2147483647 }\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n  }\n  validate(string) {\n    const regExp = /^(-|\\+)?\\s*[0-9]+$/;\n    let acceptable = regExp.test(string.trim());\n\n    if (acceptable) {\n      const value = parseInt(string, 10);\n      acceptable = this.bottom <= value && this.top >= value;\n    }\n    return acceptable;\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Item\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    $opacity: { type: \"real\", initialValue: 1 },\n    parent: \"Item\",\n    state: \"string\",\n    states: \"list\",\n    transitions: \"list\",\n    data: \"list\",\n    children: \"list\",\n    resources: \"list\",\n    transform: \"list\",\n    x: \"real\",\n    y: \"real\",\n    z: \"real\",\n    width: \"real\",\n    height: \"real\",\n    implicitWidth: \"real\",\n    implicitHeight: \"real\",\n    left: \"real\",\n    right: \"real\",\n    top: \"real\",\n    bottom: \"real\",\n    horizontalCenter: \"real\",\n    verticalCenter: \"real\",\n    rotation: \"real\",\n    scale: { type: \"real\", initialValue: 1 },\n    opacity: { type: \"real\", initialValue: 1 },\n    visible: { type: \"bool\", initialValue: true },\n    clip: \"bool\",\n    focus: \"bool\"\n  },\n  defaultProperty: \"data\"\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    if (this.$parent === null) { // This is the root element. Initialize it.\n      this.dom = QmlWeb.engine.rootElement || document.body;\n      this.dom.innerHTML = \"\";\n      // Needed to make absolute positioning work\n      this.dom.style.position = \"relative\";\n      this.dom.style.top = \"0\";\n      this.dom.style.left = \"0\";\n      // No QML stuff should stand out the root element\n      this.dom.style.overflow = \"hidden\";\n    } else {\n      if (!this.dom) { // Create a dom element for this item.\n        this.dom = document.createElement(\"div\");\n      }\n      this.dom.style.position = \"absolute\";\n    }\n    this.dom.style.pointerEvents = \"none\";\n    // In case the class is qualified, only use the last part for the css class\n    // name.\n    const classComponent = meta.object.$class.split(\".\").pop();\n    this.dom.className = `${classComponent}${this.id ? ` ${this.id}` : \"\"}`;\n    this.css = this.dom.style;\n    this.impl = null; // Store the actually drawn element\n\n    this.css.boxSizing = \"border-box\";\n\n    const createProperty = QmlWeb.createProperty;\n\n    if (this.$isComponentRoot) {\n      createProperty(\"var\", this, \"activeFocus\");\n    }\n\n    this.parentChanged.connect(this, this.$onParentChanged_);\n    this.dataChanged.connect(this, this.$onDataChanged);\n    this.stateChanged.connect(this, this.$onStateChanged);\n    this.visibleChanged.connect(this, this.$onVisibleChanged_);\n    this.clipChanged.connect(this, this.$onClipChanged);\n    this.zChanged.connect(this, this.$onZChanged);\n    this.xChanged.connect(this, this.$onXChanged);\n    this.yChanged.connect(this, this.$onYChanged);\n    this.widthChanged.connect(this, this.$onWidthChanged_);\n    this.heightChanged.connect(this, this.$onHeightChanged_);\n    this.focusChanged.connect(this, this.$onFocusChanged_);\n\n    this.widthChanged.connect(this, this.$updateHGeometry);\n    this.heightChanged.connect(this, this.$updateVGeometry);\n    this.implicitWidthChanged.connect(this, this.$onImplicitWidthChanged);\n    this.implicitHeightChanged.connect(this, this.$onImplicitHeightChanged);\n\n    this.$isUsingImplicitWidth = true;\n    this.$isUsingImplicitHeight = true;\n\n    this.anchors = new QmlWeb.QObject(this);\n    createProperty(\"var\", this.anchors, \"left\");\n    createProperty(\"var\", this.anchors, \"right\");\n    createProperty(\"var\", this.anchors, \"top\");\n    createProperty(\"var\", this.anchors, \"bottom\");\n    createProperty(\"var\", this.anchors, \"horizontalCenter\");\n    createProperty(\"var\", this.anchors, \"verticalCenter\");\n    createProperty(\"Item\", this.anchors, \"fill\");\n    createProperty(\"Item\", this.anchors, \"centerIn\");\n    createProperty(\"real\", this.anchors, \"margins\");\n    createProperty(\"real\", this.anchors, \"leftMargin\");\n    createProperty(\"real\", this.anchors, \"rightMargin\");\n    createProperty(\"real\", this.anchors, \"topMargin\");\n    createProperty(\"real\", this.anchors, \"bottomMargin\");\n    this.anchors.leftChanged.connect(this, this.$updateHGeometry);\n    this.anchors.rightChanged.connect(this, this.$updateHGeometry);\n    this.anchors.topChanged.connect(this, this.$updateVGeometry);\n    this.anchors.bottomChanged.connect(this, this.$updateVGeometry);\n    this.anchors.horizontalCenterChanged.connect(this, this.$updateHGeometry);\n    this.anchors.verticalCenterChanged.connect(this, this.$updateVGeometry);\n    this.anchors.fillChanged.connect(this, this.$updateHGeometry);\n    this.anchors.fillChanged.connect(this, this.$updateVGeometry);\n    this.anchors.centerInChanged.connect(this, this.$updateHGeometry);\n    this.anchors.centerInChanged.connect(this, this.$updateVGeometry);\n    this.anchors.leftMarginChanged.connect(this, this.$updateHGeometry);\n    this.anchors.rightMarginChanged.connect(this, this.$updateHGeometry);\n    this.anchors.topMarginChanged.connect(this, this.$updateVGeometry);\n    this.anchors.bottomMarginChanged.connect(this, this.$updateVGeometry);\n    this.anchors.marginsChanged.connect(this, this.$updateHGeometry);\n    this.anchors.marginsChanged.connect(this, this.$updateVGeometry);\n\n    // childrenRect property\n    this.childrenRect = new QmlWeb.QObject(this);\n    createProperty(\"real\", this.childrenRect, \"x\"); // TODO ro\n    createProperty(\"real\", this.childrenRect, \"y\"); // TODO ro\n    createProperty(\"real\", this.childrenRect, \"width\"); // TODO ro\n    createProperty(\"real\", this.childrenRect, \"height\"); // TODO ro\n\n    this.rotationChanged.connect(this, this.$updateTransform);\n    this.scaleChanged.connect(this, this.$updateTransform);\n    this.transformChanged.connect(this, this.$updateTransform);\n\n    this.Component.completed.connect(this, this.Component$onCompleted_);\n    this.opacityChanged.connect(this, this.$calculateOpacity);\n    if (this.$parent) {\n      this.$parent.$opacityChanged.connect(this, this.$calculateOpacity);\n    }\n\n    this.spacing = 0;\n    this.$revertActions = [];\n    this.css.left = `${this.x}px`;\n    this.css.top = `${this.y}px`;\n\n    // Init size of root element\n    if (this.$parent === null) {\n      if (!QmlWeb.engine.rootElement) {\n        // Case 1: Qml scene is placed in body tag\n\n        // event handling by addEventListener is probably better than setting\n        // window.onresize\n        const updateQmlGeometry = () => {\n          this.implicitHeight = window.innerHeight;\n          this.implicitWidth = window.innerWidth;\n        };\n        window.addEventListener(\"resize\", updateQmlGeometry);\n        updateQmlGeometry();\n      } else {\n        // Case 2: Qml scene is placed in some element tag\n\n        // we have to call `this.implicitHeight =` and `this.implicitWidth =`\n        // each time the rootElement changes it's geometry\n        // to reposition child elements of qml scene\n\n        // it is good to have this as named method of dom element, so we can\n        // call it from outside too, whenever element changes it's geometry\n        // (not only on window resize)\n        this.dom.updateQmlGeometry = () => {\n          this.implicitHeight = this.dom.offsetHeight;\n          this.implicitWidth = this.dom.offsetWidth;\n        };\n        window.addEventListener(\"resize\", this.dom.updateQmlGeometry);\n        this.dom.updateQmlGeometry();\n      }\n    }\n  }\n  $onParentChanged_(newParent, oldParent, propName) {\n    if (oldParent) {\n      oldParent.children.splice(oldParent.children.indexOf(this), 1);\n      oldParent.childrenChanged();\n      oldParent.dom.removeChild(this.dom);\n    }\n    if (newParent && newParent.children.indexOf(this) === -1) {\n      newParent.children.push(this);\n      newParent.childrenChanged();\n    }\n    if (newParent) {\n      newParent.dom.appendChild(this.dom);\n    }\n    this.$updateHGeometry(newParent, oldParent, propName);\n    this.$updateVGeometry(newParent, oldParent, propName);\n  }\n  $onDataChanged(newData) {\n    const QMLItem = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Item\");\n    for (const i in newData) {\n      const child = newData[i];\n      if (child instanceof QMLItem) {\n        child.parent = this; // This will also add it to children.\n      } else {\n        this.resources.push(child);\n      }\n    }\n  }\n  $onStateChanged(newVal, oldVal) {\n    // let oldState; // TODO: do we need oldState?\n    let newState;\n    for (let i = 0; i < this.states.length; i++) {\n      if (this.states[i].name === newVal) {\n        newState = this.states[i];\n      }\n      /*\n      else if (this.states[i].name === oldVal) {\n        oldState = this.states[i];\n      }\n      */\n    }\n\n    const actions = this.$revertActions.slice();\n\n    // Get current values for revert actions\n    for (const i in actions) {\n      const action = actions[i];\n      action.from = action.target[action.property];\n    }\n    if (newState) {\n      const changes = newState.$getAllChanges();\n\n      // Get all actions we need to do and create actions to revert them\n      for (let i = 0; i < changes.length; i++) {\n        this.$applyChange(actions, changes[i]);\n      }\n    }\n\n    // Set all property changes and fetch the actual values afterwards\n    // The latter is needed for transitions. We need to set all properties\n    // before we fetch the values because properties can be interdependent.\n    for (const i in actions) {\n      const action = actions[i];\n      action.target.$properties[action.property].set(\n        action.value, QmlWeb.QMLProperty.ReasonUser, action.target,\n        newState ? newState.$context : action.target.$context\n      );\n    }\n    for (const i in actions) {\n      const action = actions[i];\n      action.to = action.target[action.property];\n      if (action.explicit) {\n        // Remove binding\n        action.target[action.property] = action.target[action.property];\n        action.value = action.target[action.property];\n      }\n    }\n\n    // Find the best transition to use\n    let transition;\n    let rating = 0;\n    for (let i = 0; i < this.transitions.length; i++) {\n      // We need to stop running transitions, so let's do\n      // it while iterating through the transitions anyway\n      this.transitions[i].$stop();\n      const curTransition = this.transitions[i];\n      let curRating = 0;\n      if (curTransition.from === oldVal ||\n          curTransition.reversible && curTransition.from === newVal) {\n        curRating += 2;\n      } else if (curTransition.from === \"*\") {\n        curRating++;\n      } else {\n        continue;\n      }\n      if (curTransition.to === newVal ||\n        curTransition.reversible && curTransition.to === oldVal) {\n        curRating += 2;\n      } else if (curTransition.to === \"*\") {\n        curRating++;\n      } else {\n        continue;\n      }\n      if (curRating > rating) {\n        rating = curRating;\n        transition = curTransition;\n      }\n    }\n    if (transition) {\n      transition.$start(actions);\n    }\n  }\n  $applyChange(actions, change) {\n    const arrayFindIndex = QmlWeb.helpers.arrayFindIndex;\n    for (let j = 0; j < change.$actions.length; j++) {\n      const item = change.$actions[j];\n\n      const action = {\n        target: change.target,\n        property: item.property,\n        origValue: change.target.$properties[item.property].binding ||\n                    change.target.$properties[item.property].val,\n        value: item.value,\n        from: change.target[item.property],\n        to: undefined,\n        explicit: change.explicit\n      };\n\n      const actionIndex = arrayFindIndex(actions, element =>\n        element.target === action.target &&\n        element.property === action.property\n      );\n      if (actionIndex !== -1) {\n        actions[actionIndex] = action;\n      } else {\n        actions.push(action);\n      }\n\n      // Look for existing revert action, else create it\n      const revertIndex = arrayFindIndex(this.$revertActions, element =>\n        element.target === change.target &&\n        element.property === item.property\n      );\n      if (revertIndex !== -1 && !change.restoreEntryValues) {\n        // We don't want to revert, so remove it\n        this.$revertActions.splice(revertIndex, 1);\n      } else if (revertIndex === -1 && change.restoreEntryValues) {\n        this.$revertActions.push({\n          target: change.target,\n          property: item.property,\n          value: change.target.$properties[item.property].binding ||\n                  change.target.$properties[item.property].val,\n          from: undefined,\n          to: change.target[item.property]\n        });\n      }\n    }\n  }\n  $onVisibleChanged_(newVal) {\n    this.css.visibility = newVal ? \"inherit\" : \"hidden\";\n  }\n  $onClipChanged(newVal) {\n    this.css.overflow = newVal ? \"hidden\" : \"visible\";\n  }\n  $onZChanged() {\n    this.$updateTransform();\n  }\n  $onXChanged(newVal) {\n    this.css.left = `${newVal}px`;\n    this.$updateHGeometry();\n  }\n  $onYChanged(newVal) {\n    this.css.top = `${newVal}px`;\n    this.$updateVGeometry();\n  }\n  $onWidthChanged_(newVal) {\n    this.css.width = newVal ? `${newVal}px` : \"auto\";\n  }\n  $onHeightChanged_(newVal) {\n    this.css.height = newVal ? `${newVal}px` : \"auto\";\n  }\n  $onFocusChanged(newVal) {\n    if (newVal) {\n      if (this.dom.firstChild) {\n        this.dom.firstChild.focus();\n      }\n      document.qmlFocus = this;\n      this.$context.activeFocus = this;\n    } else if (document.qmlFocus === this) {\n      document.getElementsByTagName(\"BODY\")[0].focus();\n      document.qmlFocus = QmlWeb.engine.rootContext().base;\n      this.$context.activeFocus = null;\n    }\n  }\n  setupFocusOnDom(element) {\n    const updateFocus = () => {\n      const hasFocus = document.activeElement === this.dom ||\n                       document.activeElement === this.dom.firstChild;\n      if (this.focus !== hasFocus) {\n        this.focus = hasFocus;\n      }\n    };\n    element.addEventListener(\"focus\", updateFocus);\n    element.addEventListener(\"blur\", updateFocus);\n  }\n  $updateTransform() {\n    const QMLTranslate = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Translate\");\n    const QMLRotation = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Rotation\");\n    const QMLScale = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Scale\");\n    let transform = `rotate(${this.rotation}deg) scale(${this.scale})`;\n    let filter = \"\";\n    const transformStyle = \"preserve-3d\";\n\n    for (let i = 0; i < this.transform.length; i++) {\n      const t = this.transform[i];\n      if (t instanceof QMLRotation) {\n        const ax = t.axis;\n        transform += ` rotate3d(${ax.x}, ${ax.y}, ${ax.z}, ${ax.angle}deg)`;\n      } else if (t instanceof QMLScale) {\n        transform += ` scale(${t.xScale}, ${t.yScale})`;\n      } else if (t instanceof QMLTranslate) {\n        transform += ` translate(${t.x}px, ${t.y}px)`;\n      } else if (typeof t.transformType !== \"undefined\") {\n        if (t.transformType === \"filter\") {\n          filter += `${t.operation}(${t.parameters}) `;\n        }\n      } else if (typeof t === \"string\") {\n        transform += t;\n      }\n    }\n    if (typeof this.z === \"number\") {\n      transform += ` translate3d(0, 0, ${this.z}px)`;\n    }\n    this.dom.style.transform = transform;\n    this.dom.style.transformStyle = transformStyle;\n    this.dom.style.webkitTransform = transform; // Chrome, Safari and Opera\n    this.dom.style.webkitTransformStyle = transformStyle;\n    this.dom.style.msTransform = transform;     // IE\n    this.dom.style.filter = filter;\n    this.dom.style.webkitFilter = filter; // Chrome, Safari and Opera\n  }\n  Component$onCompleted_() {\n    this.$calculateOpacity();\n  }\n  $calculateOpacity() {\n    // TODO: reset all opacity on layer.enabled changed\n    /*\n    if (false) { // TODO: check layer.enabled\n      this.css.opacity = this.opacity;\n    }\n    */\n    const parentOpacity = this.$parent && this.$parent.$opacity || 1;\n    this.$opacity = this.opacity * parentOpacity;\n    if (this.impl) {\n      this.impl.style.opacity = this.$opacity;\n    }\n  }\n  $onImplicitWidthChanged() {\n    if (this.$isUsingImplicitWidth) {\n      this.width = this.implicitWidth;\n      this.$isUsingImplicitWidth = true;\n    }\n  }\n  $onImplicitHeightChanged() {\n    if (this.$isUsingImplicitHeight) {\n      this.height = this.implicitHeight;\n      this.$isUsingImplicitHeight = true;\n    }\n  }\n  $updateHGeometry(newVal, oldVal, propName) {\n    const anchors = this.anchors || this;\n    if (this.$updatingHGeometry) {\n      return;\n    }\n    this.$updatingHGeometry = true;\n\n    const flags = QmlWeb.Signal.UniqueConnection;\n    const lM = anchors.leftMargin || anchors.margins;\n    const rM = anchors.rightMargin || anchors.margins;\n    const w = this.width;\n    const left = this.parent ? this.parent.left : 0;\n\n    // Width\n    if (propName === \"width\") {\n      this.$isUsingImplicitWidth = false;\n    }\n\n    // Position TODO: Layouts\n\n    const u = {}; // our update object\n\n    if (anchors.fill !== undefined) {\n      const fill = anchors.fill;\n      const props = fill.$properties;\n      props.left.changed.connect(this, this.$updateHGeometry, flags);\n      props.right.changed.connect(this, this.$updateHGeometry, flags);\n      props.width.changed.connect(this, this.$updateHGeometry, flags);\n\n      this.$isUsingImplicitWidth = false;\n      u.width = fill.width - lM - rM;\n      u.x = fill.left - left + lM;\n      u.left = fill.left + lM;\n      u.right = fill.right - rM;\n      u.horizontalCenter = (u.left + u.right) / 2;\n    } else if (anchors.centerIn !== undefined) {\n      const horizontalCenter = anchors.centerIn.$properties.horizontalCenter;\n      horizontalCenter.changed.connect(this, this.$updateHGeometry, flags);\n\n      u.horizontalCenter = anchors.centerIn.horizontalCenter;\n      u.x = u.horizontalCenter - w / 2 - left;\n      u.left = u.horizontalCenter - w / 2;\n      u.right = u.horizontalCenter + w / 2;\n    } else if (anchors.left !== undefined) {\n      u.left = anchors.left + lM;\n      if (anchors.right !== undefined) {\n        u.right = anchors.right - rM;\n        this.$isUsingImplicitWidth = false;\n        u.width = u.right - u.left;\n        u.x = u.left - left;\n        u.horizontalCenter = (u.right + u.left) / 2;\n      } else if (anchors.horizontalCenter !== undefined) {\n        u.horizontalCenter = anchors.horizontalCenter;\n        this.$isUsingImplicitWidth = false;\n        u.width = (u.horizontalCenter - u.left) * 2;\n        u.x = u.left - left;\n        u.right = 2 * u.horizontalCenter - u.left;\n      } else {\n        u.x = u.left - left;\n        u.right = u.left + w;\n        u.horizontalCenter = u.left + w / 2;\n      }\n    } else if (anchors.right !== undefined) {\n      u.right = anchors.right - rM;\n      if (anchors.horizontalCenter !== undefined) {\n        u.horizontalCenter = anchors.horizontalCenter;\n        this.$isUsingImplicitWidth = false;\n        u.width = (u.right - u.horizontalCenter) * 2;\n        u.x = 2 * u.horizontalCenter - u.right - left;\n        u.left = 2 * u.horizontalCenter - u.right;\n      } else {\n        u.x = u.right - w - left;\n        u.left = u.right - w;\n        u.horizontalCenter = u.right - w / 2;\n      }\n    } else if (anchors.horizontalCenter !== undefined) {\n      u.horizontalCenter = anchors.horizontalCenter;\n      u.x = u.horizontalCenter - w / 2 - left;\n      u.left = u.horizontalCenter - w / 2;\n      u.right = u.horizontalCenter + w / 2;\n    } else {\n      if (this.parent) {\n        const leftProp = this.parent.$properties.left;\n        leftProp.changed.connect(this, this.$updateHGeometry, flags);\n      }\n\n      u.left = this.x + left;\n      u.right = u.left + w;\n      u.horizontalCenter = u.left + w / 2;\n    }\n\n    for (const key in u) {\n      this[key] = u[key];\n    }\n\n    this.$updatingHGeometry = false;\n\n    if (this.parent) this.$updateChildrenRect(this.parent);\n  }\n  $updateVGeometry(newVal, oldVal, propName) {\n    const anchors = this.anchors || this;\n    if (this.$updatingVGeometry) {\n      return;\n    }\n    this.$updatingVGeometry = true;\n\n    const flags = QmlWeb.Signal.UniqueConnection;\n    const tM = anchors.topMargin || anchors.margins;\n    const bM = anchors.bottomMargin || anchors.margins;\n    const h = this.height;\n    const top = this.parent ? this.parent.top : 0;\n\n    // HeighttopProp\n    if (propName === \"height\") {\n      this.$isUsingImplicitHeight = false;\n    }\n\n    // Position TODO: Layouts\n\n    const u = {}; // our update object\n\n    if (anchors.fill !== undefined) {\n      const fill = anchors.fill;\n      const props = fill.$properties;\n      props.top.changed.connect(this, this.$updateVGeometry, flags);\n      props.bottom.changed.connect(this, this.$updateVGeometry, flags);\n      props.height.changed.connect(this, this.$updateVGeometry, flags);\n\n      this.$isUsingImplicitHeight = false;\n      u.height = fill.height - tM - bM;\n      u.y = fill.top - top + tM;\n      u.top = fill.top + tM;\n      u.bottom = fill.bottom - bM;\n      u.verticalCenter = (u.top + u.bottom) / 2;\n    } else if (anchors.centerIn !== undefined) {\n      const verticalCenter = anchors.centerIn.$properties.verticalCenter;\n      verticalCenter.changed.connect(this, this.$updateVGeometry, flags);\n\n      u.verticalCenter = anchors.centerIn.verticalCenter;\n      u.y = u.verticalCenter - h / 2 - top;\n      u.top = u.verticalCenter - h / 2;\n      u.bottom = u.verticalCenter + h / 2;\n    } else if (anchors.top !== undefined) {\n      u.top = anchors.top + tM;\n      if (anchors.bottom !== undefined) {\n        u.bottom = anchors.bottom - bM;\n        this.$isUsingImplicitHeight = false;\n        u.height = u.bottom - u.top;\n        u.y = u.top - top;\n        u.verticalCenter = (u.bottom + u.top) / 2;\n      } else if ((u.verticalCenter = anchors.verticalCenter) !== undefined) {\n        this.$isUsingImplicitHeight = false;\n        u.height = (u.verticalCenter - u.top) * 2;\n        u.y = u.top - top;\n        u.bottom = 2 * u.verticalCenter - u.top;\n      } else {\n        u.y = u.top - top;\n        u.bottom = u.top + h;\n        u.verticalCenter = u.top + h / 2;\n      }\n    } else if (anchors.bottom !== undefined) {\n      u.bottom = anchors.bottom - bM;\n      if ((u.verticalCenter = anchors.verticalCenter) !== undefined) {\n        this.$isUsingImplicitHeight = false;\n        u.height = (u.bottom - u.verticalCenter) * 2;\n        u.y = 2 * u.verticalCenter - u.bottom - top;\n        u.top = 2 * u.verticalCenter - u.bottom;\n      } else {\n        u.y = u.bottom - h - top;\n        u.top = u.bottom - h;\n        u.verticalCenter = u.bottom - h / 2;\n      }\n    } else if (anchors.verticalCenter !== undefined) {\n      u.verticalCenter = anchors.verticalCenter;\n      u.y = u.verticalCenter - h / 2 - top;\n      u.top = u.verticalCenter - h / 2;\n      u.bottom = u.verticalCenter + h / 2;\n    } else {\n      if (this.parent) {\n        const topProp = this.parent.$properties.top;\n        topProp.changed.connect(this, this.$updateVGeometry, flags);\n      }\n\n      u.top = this.y + top;\n      u.bottom = u.top + h;\n      u.verticalCenter = u.top + h / 2;\n    }\n\n    for (const key in u) {\n      this[key] = u[key];\n    }\n\n    this.$updatingVGeometry = false;\n\n    if (this.parent) this.$updateChildrenRect(this.parent);\n  }\n  $updateChildrenRect(component) {\n    if (!component || !component.children || component.children.length === 0) {\n      return;\n    }\n    const children = component.children;\n\n    let maxWidth = 0;\n    let maxHeight = 0;\n    let minX = children.length > 0 ? children[0].x : 0;\n    let minY = children.length > 0 ? children[0].y : 0;\n\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      maxWidth = Math.max(maxWidth, child.x + child.width);\n      maxHeight = Math.max(maxHeight, child.y + child.heighth);\n      minX = Math.min(minX, child.x);\n      minY = Math.min(minX, child.y);\n    }\n\n    component.childrenRect.x = minX;\n    component.childrenRect.y = minY;\n    component.childrenRect.width = maxWidth;\n    component.childrenRect.height = maxHeight;\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"ListElement\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\"\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    const createProperty = QmlWeb.createProperty;\n    for (const i in meta.object) {\n      if (i[0] !== \"$\") {\n        createProperty(\"variant\", this, i);\n      }\n    }\n    QmlWeb.applyProperties(meta.object, this, this, this.$context);\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"ListModel\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    count: \"int\",\n    $items: \"list\"\n  },\n  defaultProperty: \"$items\"\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.$firstItem = true;\n    this.$itemsChanged.connect(this, this.$on$itemsChanged);\n    this.$model = new QmlWeb.JSItemModel();\n    this.$model.data = (index, role) => this.$items[index][role];\n    this.$model.rowCount = () => this.$items.length;\n  }\n  $on$itemsChanged(newVal) {\n    this.count = this.$items.length;\n    if (this.$firstItem && newVal.length > 0) {\n      const QMLListElement = QmlWeb.getConstructor(\n        \"QtQuick\", \"2.0\", \"ListElement\"\n      );\n      this.$firstItem = false;\n      const roleNames = [];\n      let dict = newVal[0];\n      if (dict instanceof QMLListElement) {\n        dict = dict.$properties;\n      }\n      for (const i in dict) {\n        if (i !== \"index\") {\n          roleNames.push(i);\n        }\n      }\n      this.$model.setRoleNames(roleNames);\n    }\n  }\n  append(dict) {\n    const index = this.$items.length;\n    let c = 0;\n\n    if (dict instanceof Array) {\n      for (const key in dict) {\n        this.$items.push(dict[key]);\n        c++;\n      }\n    } else {\n      this.$items.push(dict);\n      c = 1;\n    }\n\n    this.$itemsChanged(this.$items);\n    this.$model.rowsInserted(index, index + c);\n  }\n  clear() {\n    this.$items.length = 0;\n    this.count = 0;\n    this.$model.modelReset();\n  }\n  get(index) {\n    return this.$items[index];\n  }\n  insert(index, dict) {\n    this.$items.splice(index, 0, dict);\n    this.$itemsChanged(this.$items);\n    this.$model.rowsInserted(index, index + 1);\n  }\n  move(from, to, n) {\n    const vals = this.$items.splice(from, n);\n    for (let i = 0; i < vals.length; i++) {\n      this.$items.splice(to + i, 0, vals[i]);\n    }\n    this.$model.rowsMoved(from, from + n, to);\n  }\n  remove(index) {\n    this.$items.splice(index, 1);\n    this.$model.rowsRemoved(index, index + 1);\n    this.count = this.$items.length;\n  }\n  set(index, dict) {\n    this.$items[index] = dict;\n    this.$model.dataChanged(index, index);\n  }\n  setProperty(index, property, value) {\n    this.$items[index][property] = value;\n    this.$model.dataChanged(index, index);\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"ListView\",\n  versions: /.*/,\n  baseClass: \"Repeater\",\n  properties: {\n    orientation: \"enum\",\n    spacing: \"real\"\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n    this.modelChanged.connect(this, this.$styleChanged);\n    this.delegateChanged.connect(this, this.$styleChanged);\n    this.orientationChanged.connect(this, this.$styleChanged);\n    this.spacingChanged.connect(this, this.$styleChanged);\n    this._childrenInserted.connect(this, this.$applyStyleOnItem);\n  }\n  container() {\n    return this;\n  }\n  $applyStyleOnItem($item) {\n    const Qt = QmlWeb.Qt;\n    $item.dom.style.position = \"initial\";\n    if (this.orientation === Qt.Horizontal) {\n      $item.dom.style.display = \"inline-block\";\n      if ($item !== this.$items[0]) {\n        $item.dom.style[\"margin-left\"] = `${this.spacing}px`;\n      }\n    } else {\n      $item.dom.style.display = \"block\";\n      if ($item !== this.$items[0]) {\n        $item.dom.style[\"margin-top\"] = `${this.spacing}px`;\n      }\n    }\n  }\n  $styleChanged() {\n    for (let i = 0; i < this.$items.length; ++i) {\n      this.$applyStyleOnItem(this.$items[i]);\n    }\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Loader\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    active: { type: \"bool\", initialValue: true },\n    asynchronous: \"bool\",\n    item: \"var\",\n    progress: \"real\",\n    source: \"url\",\n    sourceComponent: \"Component\",\n    status: { type: \"enum\", initialValue: 1 }\n  },\n  signals: {\n    loaded: []\n  },\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.$sourceUrl = \"\";\n\n    this.activeChanged.connect(this, this.$onActiveChanged);\n    this.sourceChanged.connect(this, this.$onSourceChanged);\n    this.sourceComponentChanged.connect(this, this.$onSourceComponentChanged);\n    this.widthChanged.connect(this, this.$updateGeometry);\n    this.heightChanged.connect(this, this.$updateGeometry);\n  }\n  $onActiveChanged() {\n    if (!this.active) {\n      this.$unload();\n      return;\n    }\n    if (this.source) {\n      this.$onSourceChanged(this.source);\n    } else if (this.sourceComponent) {\n      this.$onSourceComponentChanged(this.sourceComponent);\n    }\n  }\n  $onSourceChanged(fileName) {\n    // TODO\n    // if (fileName == this.$sourceUrl && this.item !== undefined) return;\n    if (!this.active) return;\n    this.$unload();\n\n    if (!fileName) {\n      this.sourceComponent = null;\n      this.$sourceUrl = fileName;\n      return;\n    }\n\n    const tree = QmlWeb.engine.loadComponent(fileName);\n    const QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n    const meta = { object: tree, context: this, parent: this };\n    const qmlComponent = new QMLComponent(meta);\n    qmlComponent.$basePath = QmlWeb.engine.extractBasePath(tree.$file);\n    qmlComponent.$imports = tree.$imports;\n    qmlComponent.$file = tree.$file;\n    QmlWeb.engine.loadImports(tree.$imports, qmlComponent.$basePath,\n      qmlComponent.importContextId);\n    const loadedComponent = this.$createComponentObject(qmlComponent, this);\n    this.sourceComponent = loadedComponent;\n    this.$sourceUrl = fileName;\n  }\n  $onSourceComponentChanged(newItem) {\n    if (!this.active) return;\n    this.$unload();\n\n    if (!newItem) {\n      this.item = null;\n      return;\n    }\n\n    const QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n    let qmlComponent = newItem;\n    if (newItem instanceof QMLComponent) {\n      qmlComponent = newItem.$createObject(this, {}, this);\n    }\n    qmlComponent.parent = this;\n    this.item = qmlComponent;\n    this.$updateGeometry();\n    if (this.item) {\n      this.loaded();\n    }\n  }\n  setSource(url, options) {\n    this.$sourceUrl = url;\n    this.props = options;\n    this.source = url;\n  }\n  $unload() {\n    if (!this.item) return;\n    this.item.$delete();\n    this.item.parent = undefined;\n    this.item = undefined;\n  }\n  $callOnCompleted(child) {\n    child.Component.completed();\n    const QMLBaseObject = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"QtObject\");\n    for (let i = 0; i < child.$tidyupList.length; i++) {\n      if (child.$tidyupList[i] instanceof QMLBaseObject) {\n        this.$callOnCompleted(child.$tidyupList[i]);\n      }\n    }\n  }\n  $createComponentObject(qmlComponent, parent) {\n    const newComponent = qmlComponent.createObject(parent);\n    qmlComponent.finalizeImports();\n    if (QmlWeb.engine.operationState !== QmlWeb.QMLOperationState.Init) {\n      // We don't call those on first creation, as they will be called\n      // by the regular creation-procedures at the right time.\n      QmlWeb.engine.$initializePropertyBindings();\n      this.$callOnCompleted(newComponent);\n    }\n    return newComponent;\n  }\n  $updateGeometry() {\n    // Loader size doesn't exist\n    if (!this.width) {\n      this.width = this.item ? this.item.width : 0;\n    } else if (this.item) {\n      // Loader size exists\n      this.item.width = this.width;\n    }\n\n    if (!this.height) {\n      this.height = this.item ? this.item.height : 0;\n    } else if (this.item) {\n      // Loader size exists\n      this.item.height = this.height;\n    }\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"MouseArea\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    acceptedButtons: { type: \"variant\", initialValue: 1 }, // Qt.LeftButton\n    enabled: { type: \"bool\", initialValue: true },\n    hoverEnabled: \"bool\",\n    mouseX: \"real\",\n    mouseY: \"real\",\n    pressed: \"bool\",\n    containsMouse: \"bool\",\n    pressedButtons: { type: \"variant\", initialValue: 0 },\n    cursorShape: \"enum\" // Qt.ArrowCursor\n  },\n  signals: {\n    clicked: [{ type: \"variant\", name: \"mouse\" }],\n    entered: [],\n    exited: [],\n    positionChanged: [{ type: \"variant\", name: \"mouse\" }]\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.dom.style.pointerEvents = \"all\";\n\n    // IE does not handle mouse clicks to transparent divs, so we have\n    // to set a background color and make it invisible using opacity\n    // as that doesn't affect the mouse handling.\n    this.dom.style.backgroundColor = \"white\";\n    this.dom.style.opacity = 0;\n\n    this.cursorShapeChanged.connect(this, this.$onCursorShapeChanged);\n\n    this.dom.addEventListener(\"click\", e => this.$handleClick(e));\n    this.dom.addEventListener(\"contextmenu\", e => this.$handleClick(e));\n    const handleMouseUp = () => {\n      this.pressed = false;\n      this.pressedButtons = 0;\n      document.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n    this.dom.addEventListener(\"mousedown\", e => {\n      if (!this.enabled) return;\n      const mouse = this.$eventToMouse(e);\n      this.mouseX = mouse.x;\n      this.mouseY = mouse.y;\n      this.pressed = true;\n      this.pressedButtons = mouse.button;\n      document.addEventListener(\"mouseup\", handleMouseUp);\n    });\n    this.dom.addEventListener(\"mouseover\", () => {\n      this.containsMouse = true;\n      this.entered();\n    });\n    this.dom.addEventListener(\"mouseout\", () => {\n      this.containsMouse = false;\n      this.exited();\n    });\n    this.dom.addEventListener(\"mousemove\", e => {\n      if (!this.enabled || !this.hoverEnabled && !this.pressed) return;\n      const mouse = this.$eventToMouse(e);\n      this.mouseX = mouse.x;\n      this.mouseY = mouse.y;\n      this.positionChanged(mouse);\n    });\n  }\n  $onCursorShapeChanged() {\n    this.dom.style.cursor = this.$cursorShapeToCSS();\n  }\n  $handleClick(e) {\n    const mouse = this.$eventToMouse(e);\n    if (this.enabled && this.acceptedButtons & mouse.button) {\n      this.clicked(mouse);\n    }\n    // This decides whether to show the browser's context menu on right click or\n    // not\n    return !(this.acceptedButtons & QmlWeb.Qt.RightButton);\n  }\n  $eventToMouse(e) {\n    const Qt = QmlWeb.Qt;\n    return {\n      accepted: true,\n      button: e.button === 0 ? Qt.LeftButton :\n              e.button === 1 ? Qt.MiddleButton :\n              e.button === 2 ? Qt.RightButton :\n              0,\n      modifiers: e.ctrlKey * Qt.CtrlModifier\n               | e.altKey * Qt.AltModifier\n               | e.shiftKey * Qt.ShiftModifier\n               | e.metaKey * Qt.MetaModifier,\n      x: e.offsetX || e.layerX,\n      y: e.offsetY || e.layerY\n    };\n  }\n\n  // eslint-disable-next-line complexity\n  $cursorShapeToCSS() {\n    const Qt = QmlWeb.Qt;\n    switch (this.cursorShape) {\n      case Qt.ArrowCursor: return \"default\";\n      case Qt.UpArrowCursor: return \"n-resize\";\n      case Qt.CrossCursor: return \"crosshair\";\n      case Qt.WaitCursor: return \"wait\";\n      case Qt.IBeamCursor: return \"text\";\n      case Qt.SizeVerCursor: return \"ew-resize\";\n      case Qt.SizeHorCursor: return \"ns-resize\";\n      case Qt.SizeBDiagCursor: return \"nesw-resize\";\n      case Qt.SizeFDiagCursor: return \"nwse-resize\";\n      case Qt.SizeAllCursor: return \"all-scroll\";\n      case Qt.BlankCursor: return \"none\";\n      case Qt.SplitVCursor: return \"row-resize\";\n      case Qt.SplitHCursor: return \"col-resize\";\n      case Qt.PointingHandCursor: return \"pointer\";\n      case Qt.ForbiddenCursor: return \"not-allowed\";\n      case Qt.WhatsThisCursor: return \"help\";\n      case Qt.BusyCursor: return \"progress\";\n      case Qt.OpenHandCursor: return \"grab\";\n      case Qt.ClosedHandCursor: return \"grabbing\";\n      case Qt.DragCopyCursor: return \"copy\";\n      case Qt.DragMoveCursor: return \"move\";\n      case Qt.DragLinkCursor: return \"alias\";\n      //case Qt.BitmapCursor: return \"auto\";\n      //case Qt.CustomCursor: return \"auto\";\n    }\n    return \"auto\";\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"NumberAnimation\",\n  versions: /.*/,\n  baseClass: \"PropertyAnimation\"\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.$at = 0;\n    this.$loop = 0;\n\n    QmlWeb.engine.$addTicker((...args) => this.$ticker(...args));\n    this.runningChanged.connect(this, this.$onRunningChanged);\n  }\n  $startLoop() {\n    for (const i in this.$actions) {\n      const action = this.$actions[i];\n      action.from = action.from !== undefined ?\n                      action.from :\n                      action.target[action.property];\n    }\n    this.$at = 0;\n  }\n  $ticker(now, elapsed) {\n    if (!this.running && this.$loop !== -1 || this.paused) {\n      // $loop === -1 is a marker to just finish this run\n      return;\n    }\n    if (this.$at === 0 && this.$loop === 0 && !this.$actions.length) {\n      this.$redoActions();\n    }\n    this.$at += elapsed / this.duration;\n    if (this.$at >= 1) {\n      this.complete();\n      return;\n    }\n    for (const i in this.$actions) {\n      const action = this.$actions[i];\n      const value = action.from + (action.to - action.from) *\n                    this.easing.$valueForProgress(this.$at);\n      const property = action.target.$properties[action.property];\n      property.set(value, QmlWeb.QMLProperty.ReasonAnimation);\n    }\n  }\n  $onRunningChanged(newVal) {\n    if (newVal) {\n      this.$startLoop();\n      this.paused = false;\n    } else if (this.alwaysRunToEnd && this.$at < 1) {\n      this.$loop = -1; // -1 is used as a marker to stop\n    } else {\n      this.$loop = 0;\n      this.$actions = [];\n    }\n  }\n  complete() {\n    for (const i in this.$actions) {\n      const action = this.$actions[i];\n      const property = action.target.$properties[action.property];\n      property.set(action.to, QmlWeb.QMLProperty.ReasonAnimation);\n    }\n    this.$loop++;\n    if (this.$loop === this.loops) {\n      this.running = false;\n    } else if (!this.running) {\n      this.$actions = [];\n    } else {\n      this.$startLoop(this);\n    }\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"ParallelAnimation\",\n  versions: /.*/,\n  baseClass: \"Animation\",\n  enums: {\n    Animation: { Infinite: Math.Infinite }\n  },\n  properties: {\n    animations: \"list\"\n  },\n  defaultProperty: \"animations\"\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.$runningAnimations = 0;\n\n    this.animationsChanged.connect(this, this.$onAnimationsChanged);\n\n    QmlWeb.engine.$registerStart(() => {\n      if (!this.running) return;\n      self.running = false; // toggled back by start();\n      self.start();\n    });\n    QmlWeb.engine.$registerStop(() => this.stop());\n  }\n  $onAnimationsChanged() {\n    const flags = QmlWeb.Signal.UniqueConnection;\n    for (let i = 0; i < this.animations.length; i++) {\n      const animation = this.animations[i];\n      animation.runningChanged.connect(this, this.$animationFinished, flags);\n    }\n  }\n  $animationFinished(newVal) {\n    this.$runningAnimations += newVal ? 1 : -1;\n    if (this.$runningAnimations === 0) {\n      this.running = false;\n    }\n  }\n  start() {\n    if (this.running) return;\n    this.running = true;\n    for (let i = 0; i < this.animations.length; i++) {\n      this.animations[i].start();\n    }\n  }\n  stop() {\n    if (!this.running) return;\n    for (let i = 0; i < this.animations.length; i++) {\n      this.animations[i].stop();\n    }\n    this.running = false;\n  }\n  complete() {\n    this.stop();\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Positioner\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    spacing: \"int\"\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.childrenChanged.connect(this, this.$onChildrenChanged);\n    this.spacingChanged.connect(this, this.layoutChildren);\n    this.childrenChanged.connect(this, this.layoutChildren);\n    this.layoutChildren();\n  }\n  $onChildrenChanged() {\n    const flags = QmlWeb.Signal.UniqueConnection;\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i];\n      child.widthChanged.connect(this, this.layoutChildren, flags);\n      child.heightChanged.connect(this, this.layoutChildren, flags);\n      child.visibleChanged.connect(this, this.layoutChildren, flags);\n    }\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"PropertyAnimation\",\n  versions: /.*/,\n  baseClass: \"Animation\",\n  properties: {\n    duration: { type: \"int\", initialValue: 250 },\n    from: \"real\",\n    to: \"real\",\n    properties: \"string\",\n    property: \"string\",\n    target: \"QtObject\",\n    targets: \"list\"\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    const createProperty = QmlWeb.createProperty;\n    this.easing = new QmlWeb.QObject(this);\n    createProperty(\"enum\", this.easing, \"type\",\n      { initialValue: this.Easing.Linear });\n    createProperty(\"real\", this.easing, \"amplitude\", { initialValue: 1 });\n    createProperty(\"real\", this.easing, \"overshoot\", { initialValue: 1.70158 });\n    createProperty(\"real\", this.easing, \"period\", { initialValue: 0.3 });\n\n    this.easing.$valueForProgress = function(t) {\n      return QmlWeb.$ease(\n        this.type, this.period, this.amplitude, this.overshoot, t\n      );\n    };\n\n    this.$props = [];\n    this.$targets = [];\n    this.$actions = [];\n\n    this.targetChanged.connect(this, this.$redoTargets);\n    this.targetsChanged.connect(this, this.$redoTargets);\n    this.propertyChanged.connect(this, this.$redoProperties);\n    this.propertiesChanged.connect(this, this.$redoProperties);\n\n    if (meta.object.$on !== undefined) {\n      this.property = meta.object.$on;\n      this.target = this.$parent;\n    }\n  }\n  $redoActions() {\n    this.$actions = [];\n    for (let i = 0; i < this.$targets.length; i++) {\n      for (const j in this.$props) {\n        this.$actions.push({\n          target: this.$targets[i],\n          property: this.$props[j],\n          from: this.from,\n          to: this.to\n        });\n      }\n    }\n  }\n  $redoProperties() {\n    this.$props = this.properties.split(\",\");\n\n    // Remove whitespaces\n    for (let i = 0; i < this.$props.length; i++) {\n      const matches = this.$props[i].match(/\\w+/);\n      if (matches) {\n        this.$props[i] = matches[0];\n      } else {\n        this.$props.splice(i, 1);\n        i--;\n      }\n    }\n    // Merge properties and property\n    if (this.property && this.$props.indexOf(this.property) === -1) {\n      this.$props.push(this.property);\n    }\n  }\n  $redoTargets() {\n    this.$targets = this.targets.slice();\n    if (this.target && this.$targets.indexOf(this.target) === -1) {\n      this.$targets.push(this.target);\n    }\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"PropertyChanges\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    target: \"QtObject\",\n    explicit: \"bool\",\n    restoreEntryValues: { type: \"bool\", initialValue: true }\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.$actions = [];\n  }\n  $setCustomData(property, value) {\n    this.$actions.push({ property, value });\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Rectangle\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    color: { type: \"color\", initialValue: \"white\" },\n    radius: \"real\"\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    const createProperty = QmlWeb.createProperty;\n    this.border = new QmlWeb.QObject(this);\n    createProperty(\"color\", this.border, \"color\", { initialValue: \"black\" });\n    createProperty(\"int\", this.border, \"width\", { initialValue: 1 });\n    this.$borderActive = false;\n\n    const bg = this.impl = document.createElement(\"div\");\n    bg.style.pointerEvents = \"none\";\n    bg.style.position = \"absolute\";\n    bg.style.left = bg.style.right = bg.style.top = bg.style.bottom = \"0px\";\n    bg.style.borderWidth = \"0px\";\n    bg.style.borderStyle = \"solid\";\n    bg.style.borderColor = \"black\";\n    bg.style.backgroundColor = \"white\";\n    this.dom.appendChild(bg);\n\n    this.colorChanged.connect(this, this.$onColorChanged);\n    this.radiusChanged.connect(this, this.$onRadiusChanged);\n    this.border.colorChanged.connect(this, this.border$onColorChanged);\n    this.border.widthChanged.connect(this, this.border$onWidthChanged);\n    this.widthChanged.connect(this, this.$updateBorder);\n    this.heightChanged.connect(this, this.$updateBorder);\n  }\n  $onColorChanged(newVal) {\n    this.impl.style.backgroundColor = new QmlWeb.QColor(newVal);\n  }\n  border$onColorChanged(newVal) {\n    this.$borderActive = true;\n    this.impl.style.borderColor = new QmlWeb.QColor(newVal);\n    this.$updateBorder();\n  }\n  border$onWidthChanged() {\n    this.$borderActive = true;\n    this.$updateBorder();\n  }\n  $onRadiusChanged(newVal) {\n    this.impl.style.borderRadius = `${newVal}px`;\n  }\n  $updateBorder() {\n    const border = this.$borderActive ? Math.max(0, this.border.width) : 0;\n    const style = this.impl.style;\n    if (border * 2 > this.width || border * 2 > this.height) {\n      // Border is covering the whole background\n      style.borderWidth = \"0px\";\n      style.borderTopWidth = `${this.height}px`;\n    } else {\n      style.borderWidth = `${border}px`;\n    }\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"RegExpValidator\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    regExp: \"var\"\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n  }\n  validate(string) {\n    if (!this.regExp) return true;\n    return this.regExp.test(string);\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Repeater\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    delegate: \"Component\",\n    model: { type: \"variant\", initialValue: 0 },\n    count: \"int\"\n  },\n  signals: {\n    _childrenInserted: []\n  },\n  defaultProperty: \"delegate\"\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.parent = meta.parent;\n    // TODO: some (all ?) of the components including Repeater needs to know own\n    // parent at creation time. Please consider this major change.\n\n    this.$completed = false;\n    this.$items = []; // List of created items\n\n    this.modelChanged.connect(this, this.$onModelChanged);\n    this.delegateChanged.connect(this, this.$onDelegateChanged);\n    this.parentChanged.connect(this, this.$onParentChanged);\n  }\n  container() {\n    return this.parent;\n  }\n  itemAt(index) {\n    return this.$items[index];\n  }\n  $onModelChanged() {\n    this.$applyModel();\n  }\n  $onDelegateChanged() {\n    this.$applyModel();\n  }\n  $onParentChanged() {\n    this.$applyModel();\n  }\n  $getModel() {\n    const QMLListModel = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"ListModel\");\n    return this.model instanceof QMLListModel ?\n            this.model.$model :\n            this.model;\n  }\n  $applyModel() {\n    if (!this.delegate || !this.parent) {\n      return;\n    }\n    const model = this.$getModel();\n    if (model instanceof QmlWeb.JSItemModel) {\n      const flags = QmlWeb.Signal.UniqueConnection;\n      model.dataChanged.connect(this, this.$_onModelDataChanged, flags);\n      model.rowsInserted.connect(this, this.$_onRowsInserted, flags);\n      model.rowsMoved.connect(this, this.$_onRowsMoved, flags);\n      model.rowsRemoved.connect(this, this.$_onRowsRemoved, flags);\n      model.modelReset.connect(this, this.$_onModelReset, flags);\n\n      this.$removeChildren(0, this.$items.length);\n      this.$insertChildren(0, model.rowCount());\n    } else if (typeof model === \"number\") {\n      if (this.$items.length > model) {\n        // have more than we need\n        this.$removeChildren(model, this.$items.length);\n      } else {\n        // need more\n        this.$insertChildren(this.$items.length, model);\n      }\n    } else if (model instanceof Array) {\n      this.$removeChildren(0, this.$items.length);\n      this.$insertChildren(0, model.length);\n    }\n    this.count = this.$items.length;\n  }\n  $callOnCompleted(child) {\n    child.Component.completed();\n    const QMLBaseObject = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"QtObject\");\n    for (let i = 0; i < child.$tidyupList.length; i++) {\n      if (child.$tidyupList[i] instanceof QMLBaseObject) {\n        this.$callOnCompleted(child.$tidyupList[i]);\n      }\n    }\n  }\n  $_onModelDataChanged(startIndex, endIndex, roles) {\n    const model = this.$getModel();\n    const roleNames = roles || model.roleNames;\n    for (let index = startIndex; index <= endIndex; index++) {\n      const item = this.$items[index];\n      for (const i in roleNames) {\n        item.$properties[roleNames[i]].set(\n          model.data(index, roleNames[i]),\n          QmlWeb.QMLProperty.ReasonInit,\n          item,\n          this.model.$context\n        );\n      }\n    }\n  }\n  $_onRowsInserted(startIndex, endIndex) {\n    this.$insertChildren(startIndex, endIndex);\n    this.count = this.$items.length;\n  }\n  $_onRowsMoved(sourceStartIndex, sourceEndIndex, destinationIndex) {\n    const vals = this.$items.splice(\n      sourceStartIndex,\n      sourceEndIndex - sourceStartIndex\n    );\n    for (let i = 0; i < vals.length; i++) {\n      this.$items.splice(destinationIndex + i, 0, vals[i]);\n    }\n    const smallestChangedIndex = sourceStartIndex < destinationIndex ?\n                                  sourceStartIndex :\n                                  destinationIndex;\n    for (let i = smallestChangedIndex; i < this.$items.length; i++) {\n      this.$items[i].index = i;\n    }\n  }\n  $_onRowsRemoved(startIndex, endIndex) {\n    this.$removeChildren(startIndex, endIndex);\n    for (let i = startIndex; i < this.$items.length; i++) {\n      this.$items[i].index = i;\n    }\n    this.count = this.$items.length;\n  }\n  $_onModelReset() {\n    this.$applyModel();\n  }\n  $insertChildren(startIndex, endIndex) {\n    if (endIndex <= 0) {\n      this.count = 0;\n      return;\n    }\n\n    const QMLOperationState = QmlWeb.QMLOperationState;\n    const createProperty = QmlWeb.createProperty;\n    const model = this.$getModel();\n    let index;\n    for (index = startIndex; index < endIndex; index++) {\n      const newItem = this.delegate.$createObject(this.parent);\n      createProperty(\"int\", newItem, \"index\", { initialValue: index });\n\n      // To properly import JavaScript in the context of a component\n      this.delegate.finalizeImports();\n\n      if (typeof model === \"number\" || model instanceof Array) {\n        if (typeof newItem.$properties.modelData === \"undefined\") {\n          createProperty(\"variant\", newItem, \"modelData\");\n        }\n        const value = model instanceof Array ?\n                      model[index] :\n                      typeof model === \"number\" ? index : \"undefined\";\n        newItem.$properties.modelData.set(value, QmlWeb.QMLProperty.ReasonInit,\n          newItem, model.$context);\n      } else {\n        for (let i = 0; i < model.roleNames.length; i++) {\n          const roleName = model.roleNames[i];\n          if (typeof newItem.$properties[roleName] === \"undefined\") {\n            createProperty(\"variant\", newItem, roleName);\n          }\n          newItem.$properties[roleName].set(\n            model.data(index, roleName), QmlWeb.QMLProperty.ReasonInit,\n            newItem, this.model.$context\n          );\n        }\n      }\n\n      this.$items.splice(index, 0, newItem);\n\n      // parent must be set after the roles have been added to newItem scope in\n      // case we are outside of QMLOperationState.Init and parentChanged has\n      // any side effects that result in those roleNames being referenced.\n      newItem.parent = this.parent;\n\n      // TODO debug this. Without check to Init, Completed sometimes called\n      // twice.. But is this check correct?\n      if (QmlWeb.engine.operationState !== QMLOperationState.Init &&\n          QmlWeb.engine.operationState !== QMLOperationState.Idle) {\n        // We don't call those on first creation, as they will be called\n        // by the regular creation-procedures at the right time.\n        this.$callOnCompleted(newItem);\n      }\n    }\n    if (QmlWeb.engine.operationState !== QMLOperationState.Init) {\n      // We don't call those on first creation, as they will be called\n      // by the regular creation-procedures at the right time.\n      QmlWeb.engine.$initializePropertyBindings();\n    }\n\n    if (index > 0) {\n      this.container().childrenChanged();\n    }\n\n    for (let i = endIndex; i < this.$items.length; i++) {\n      this.$items[i].index = i;\n    }\n  }\n  $removeChildren(startIndex, endIndex) {\n    const removed = this.$items.splice(startIndex, endIndex - startIndex);\n    for (const index in removed) {\n      removed[index].$delete();\n      this.$removeChildProperties(removed[index]);\n    }\n  }\n  $removeChildProperties(child) {\n    const signals = QmlWeb.engine.completedSignals;\n    signals.splice(signals.indexOf(child.Component.completed), 1);\n    for (let i = 0; i < child.children.length; i++) {\n      this.$removeChildProperties(child.children[i]);\n    }\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Rotation\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    angle: \"real\"\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    const createProperty = QmlWeb.createProperty;\n\n    this.axis = new QmlWeb.QObject(this);\n    createProperty(\"real\", this.axis, \"x\");\n    createProperty(\"real\", this.axis, \"y\");\n    createProperty(\"real\", this.axis, \"z\", { initialValue: 1 });\n\n    this.origin = new QmlWeb.QObject(this);\n    createProperty(\"real\", this.origin, \"x\");\n    createProperty(\"real\", this.origin, \"y\");\n\n    this.angleChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.axis.xChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.axis.yChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.axis.zChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.origin.xChanged.connect(this, this.$updateOrigin);\n    this.origin.yChanged.connect(this, this.$updateOrigin);\n    this.$parent.$updateTransform();\n  }\n  $updateOrigin() {\n    const style = this.$parent.dom.style;\n    style.transformOrigin = `${this.origin.x}px ${this.origin.y}px`;\n    style.webkitTransformOrigin = `${this.origin.x}px ${this.origin.y}px`;\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Row\",\n  versions: /.*/,\n  baseClass: \"Positioner\",\n  properties: {\n    layoutDirection: \"enum\"\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.layoutDirectionChanged.connect(this, this.layoutChildren);\n    this.layoutChildren();\n  }\n  layoutChildren() {\n    let curPos = 0;\n    let maxHeight = 0;\n    // When layoutDirection is RightToLeft we need oposite order\n    let i = this.layoutDirection === 1 ? this.children.length - 1 : 0;\n    const endPoint = this.layoutDirection === 1 ? -1 : this.children.length;\n    const step = this.layoutDirection === 1 ? -1 : 1;\n    for (; i !== endPoint; i += step) {\n      const child = this.children[i];\n      if (!(child.visible && child.width && child.height)) {\n        continue;\n      }\n      maxHeight = child.height > maxHeight ? child.height : maxHeight;\n\n      child.x = curPos;\n      curPos += child.width + this.spacing;\n    }\n    this.implicitHeight = maxHeight;\n    // We want no spacing at the right side\n    this.implicitWidth = curPos - this.spacing;\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Scale\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    xScale: \"real\",\n    yScale: \"real\"\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    const createProperty = QmlWeb.createProperty;\n    this.origin = new QmlWeb.QObject(this);\n    createProperty(\"real\", this.origin, \"x\");\n    createProperty(\"real\", this.origin, \"y\");\n\n    this.xScaleChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.yScaleChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.origin.xChanged.connect(this, this.$updateOrigin);\n    this.origin.yChanged.connect(this, this.$updateOrigin);\n\n    /* QML default origin is top-left, while CSS default origin is centre, so\n     * $updateOrigin must be called to set the initial transformOrigin. */\n    this.$updateOrigin();\n  }\n  $updateOrigin() {\n    const style = this.$parent.dom.style;\n    style.transformOrigin = `${this.origin.x}px ${this.origin.y}px`;\n    style.webkitTransformOrigin = `${this.origin.x}px ${this.origin.y}px`;\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"SequentialAnimation\",\n  versions: /.*/,\n  baseClass: \"Animation\",\n  properties: {\n    animations: \"list\"\n  },\n  defaultProperty: \"animations\"\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.animationsChanged.connect(this, this.$onAnimatonsChanged);\n\n    QmlWeb.engine.$registerStart(() => {\n      if (!this.running) return;\n      this.running = false; // toggled back by start();\n      this.start();\n    });\n    QmlWeb.engine.$registerStop(() => self.stop());\n  }\n  $onAnimatonsChanged() {\n    const flags = QmlWeb.Signal.UniqueConnection;\n    for (let i = 0; i < this.animations.length; i++) {\n      const animation = this.animations[i];\n      animation.runningChanged.connect(this, this.$nextAnimation, flags);\n    }\n  }\n  $nextAnimation(proceed) {\n    if (this.running && !proceed) {\n      this.$curIndex++;\n      if (this.$curIndex < this.animations.length) {\n        const anim = this.animations[this.$curIndex];\n        console.log(\"nextAnimation\", this, this.$curIndex, anim);\n        anim.start();\n      } else {\n        this.$passedLoops++;\n        if (this.$passedLoops >= this.loops) {\n          this.complete();\n        } else {\n          this.$curIndex = -1;\n          this.$nextAnimation();\n        }\n      }\n    }\n  }\n  start() {\n    if (this.running) return;\n    this.running = true;\n    this.$curIndex = -1;\n    this.$passedLoops = 0;\n    this.$nextAnimation();\n  }\n  stop() {\n    if (!this.running) return;\n    this.running = false;\n    if (this.$curIndex < this.animations.length) {\n      this.animations[this.$curIndex].stop();\n    }\n  }\n  complete() {\n    if (!this.running) return;\n    if (this.$curIndex < this.animations.length) {\n      // Stop current animation\n      this.animations[this.$curIndex].stop();\n    }\n    this.running = false;\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"State\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    name: \"string\",\n    changes: \"list\",\n    extend: \"string\",\n    when: \"bool\"\n  },\n  defaultProperty: \"changes\"\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.$item = this.$parent;\n\n    this.whenChanged.connect(this, this.$onWhenChanged);\n  }\n  $getAllChanges() {\n    if (this.extend) {\n      /* ECMAScript 2015. TODO: polyfill Array?\n      const base = this.$item.states.find(state => state.name === this.extend);\n      */\n      const states = this.$item.states;\n      const base = states.filter(state => state.name === this.extend)[0];\n      if (base) {\n        return base.$getAllChanges().concat(this.changes);\n      }\n      console.error(\"Can't find the state to extend!\");\n    }\n    return this.changes;\n  }\n  $onWhenChanged(newVal) {\n    if (newVal) {\n      this.$item.state = this.name;\n    } else if (this.$item.state === this.name) {\n      this.$item.state = \"\";\n    }\n  }\n});\n","const platformsDetectors = [\n  //{ name: \"W8\", regexp: /Windows NT 6\\.2/ },\n  //{ name: \"W7\", regexp: /Windows NT 6\\.1/ },\n  //{ name: \"Windows\", regexp: /Windows NT/ },\n  { name: \"OSX\", regexp: /Macintosh/ }\n];\n\nconst systemPalettes = {};\n\nQmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"SystemPalette\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  enums: {\n    SystemPalette: {\n      Active: \"active\", Inactive: \"inactive\", Disabled: \"disabled\"\n    }\n  },\n  properties: {\n    alternateBase: { type: \"color\", readOnly: true },\n    base: { type: \"color\", readOnly: true },\n    button: { type: \"color\", readOnly: true },\n    buttonText: { type: \"color\", readOnly: true },\n    dark: { type: \"color\", readOnly: true },\n    highlight: { type: \"color\", readOnly: true },\n    highlightedText: { type: \"color\", readOnly: true },\n    light: { type: \"color\", readOnly: true },\n    mid: { type: \"color\", readOnly: true },\n    midlight: { type: \"color\", readOnly: true },\n    shadow: { type: \"color\", readOnly: true },\n    text: { type: \"color\", readOnly: true },\n    window: { type: \"color\", readOnly: true },\n    windowText: { type: \"color\", readOnly: true },\n\n    colorGroup: \"enum\"\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.colorGroupChanged.connect(this, this.$onColorGroupChanged);\n\n    this.$platform = \"OSX\";\n    // Detect OS\n    for (let i = 0; i < platformsDetectors.length; ++i) {\n      if (platformsDetectors[i].regexp.test(navigator.userAgent)) {\n        this.$platform = platformsDetectors[i].name;\n        break;\n      }\n    }\n  }\n  $onColorGroupChanged(newVal) {\n    const pallete = systemPalettes[this.$platform][newVal];\n    this.$canEditReadOnlyProperties = true;\n    Object.keys(pallete).forEach(key => {\n      this[key] = pallete[key];\n    });\n    delete this.$canEditReadOnlyProperties;\n  }\n});\n\nsystemPalettes.OSX = {\n  active: {\n    alternateBase: \"#f6f6f6\",\n    base: \"#ffffff\",\n    button: \"#ededed\",\n    buttonText: \"#000000\",\n    dark: \"#bfbfbf\",\n    highlight: \"#fbed73\",\n    highlightText: \"#000000\",\n    light: \"#ffffff\",\n    mid: \"#a9a9a9\",\n    midlight: \"#f6f6f6\",\n    shadow: \"#8b8b8b\",\n    text: \"#000000\",\n    window: \"#ededed\",\n    windowText: \"#000000\"\n  },\n  inactive: {\n    alternateBase: \"#f6f6f6\",\n    base: \"#ffffff\",\n    button: \"#ededed\",\n    buttonText: \"#000000\",\n    dark: \"#bfbfbf\",\n    highlight: \"#d0d0d0\",\n    highlightText: \"#000000\",\n    light: \"#ffffff\",\n    mid: \"#a9a9a9\",\n    midlight: \"#f6f6f6\",\n    shadow: \"#8b8b8b\",\n    text: \"#000000\",\n    window: \"#ededed\",\n    windowText: \"#000000\"\n  },\n  disabled: {\n    alternateBase: \"#f6f6f6\",\n    base: \"#ededed\",\n    button: \"#ededed\",\n    buttonText: \"#949494\",\n    dark: \"#bfbfbf\",\n    highlight: \"#d0d0d0\",\n    highlightText: \"#7f7f7f\",\n    light: \"#ffffff\",\n    mid: \"#a9a9a9\",\n    midlight: \"#f6f6f6\",\n    shadow: \"#8b8b8b\",\n    text: \"#7f7f7f\",\n    window: \"#ededed\",\n    windowText: \"#7f7f7f\"\n  }\n};\n\nQmlWeb.systemPalettes = systemPalettes;\nQmlWeb.platformsDetectors = platformsDetectors;\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Text\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  enums: {\n    Text: {\n      NoWrap: 0, WordWrap: 1, WrapAnywhere: 2, Wrap: 3,\n      WrapAtWordBoundaryOrAnywhere: 4,\n      AlignLeft: 1, AlignRight: 2, AlignHCenter: 4, AlignJustify: 8,\n      AlignTop: 32, AlignBottom: 64, AlignVCenter: 128,\n      Normal: 0, Outline: 1, Raised: 2, Sunken: 3\n    }\n  },\n  properties: {\n    color: { type: \"color\", initialValue: \"black\" },\n    text: \"string\",\n    lineHeight: \"real\",\n    wrapMode: { type: \"enum\", initialValue: 0 }, // Text.NoWrap\n    horizontalAlignment: { type: \"enum\", initialValue: 1 }, // Text.AlignLeft\n    style: \"enum\",\n    styleColor: \"color\"\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    const fc = this.impl = document.createElement(\"span\");\n    fc.style.pointerEvents = \"none\";\n    fc.style.width = \"100%\";\n    fc.style.height = \"100%\";\n    fc.style.whiteSpace = \"pre\";\n    this.dom.style.textAlign = \"left\";\n    this.dom.appendChild(fc);\n\n    const QMLFont = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Font\");\n    this.font = new QMLFont(this);\n\n    this.colorChanged.connect(this, this.$onColorChanged);\n    this.textChanged.connect(this, this.$onTextChanged);\n    this.lineHeightChanged.connect(this, this.$onLineHeightChanged);\n    this.wrapModeChanged.connect(this, this.$onWrapModeChanged);\n    this.horizontalAlignmentChanged.connect(this,\n                                            this.$onHorizontalAlignmentChanged);\n    this.styleChanged.connect(this, this.$onStyleChanged);\n    this.styleColorChanged.connect(this, this.$onStyleColorChanged);\n\n    this.font.family = \"sans-serif\";\n    this.font.pointSize = 10;\n\n    this.widthChanged.connect(this, this.$onWidthChanged);\n\n    this.font.boldChanged.connect(this, this.$onFontChanged);\n    this.font.weightChanged.connect(this, this.$onFontChanged);\n    this.font.pixelSizeChanged.connect(this, this.$onFontChanged);\n    this.font.pointSizeChanged.connect(this, this.$onFontChanged);\n    this.font.familyChanged.connect(this, this.$onFontChanged);\n    this.font.letterSpacingChanged.connect(this, this.$onFontChanged);\n    this.font.wordSpacingChanged.connect(this, this.$onFontChanged);\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n  }\n  $onColorChanged(newVal) {\n    this.impl.style.color = new QmlWeb.QColor(newVal);\n  }\n  $onTextChanged(newVal) {\n    this.impl.innerHTML = newVal;\n    this.$updateImplicit();\n  }\n  $onWidthChanged() {\n    this.$updateImplicit();\n  }\n  $onLineHeightChanged(newVal) {\n    this.impl.style.lineHeight = `${newVal}px`;\n    this.$updateImplicit();\n  }\n  $onStyleChanged(newVal) {\n    this.$updateShadow(newVal, this.styleColor);\n  }\n  $onStyleColorChanged(newVal) {\n    this.$updateShadow(this.style, new QmlWeb.QColor(newVal));\n  }\n  $onWrapModeChanged(newVal) {\n    const style = this.impl.style;\n    switch (newVal) {\n      case this.Text.NoWrap:\n        style.whiteSpace = \"pre\";\n        break;\n      case this.Text.WordWrap:\n        style.whiteSpace = \"pre-wrap\";\n        style.wordWrap = \"normal\";\n        break;\n      case this.Text.WrapAnywhere:\n        style.whiteSpace = \"pre-wrap\";\n        style.wordBreak = \"break-all\";\n        break;\n      case this.Text.Wrap:\n      case this.Text.WrapAtWordBoundaryOrAnywhere:\n        style.whiteSpace = \"pre-wrap\";\n        style.wordWrap = \"break-word\";\n    }\n    this.$updateJustifyWhiteSpace();\n  }\n  $onHorizontalAlignmentChanged(newVal) {\n    let textAlign = null;\n    switch (newVal) {\n      case this.Text.AlignLeft:\n        textAlign = \"left\";\n        break;\n      case this.Text.AlignRight:\n        textAlign = \"right\";\n        break;\n      case this.Text.AlignHCenter:\n        textAlign = \"center\";\n        break;\n      case this.Text.AlignJustify:\n        textAlign = \"justify\";\n        break;\n    }\n    this.dom.style.textAlign = textAlign;\n    this.$updateJustifyWhiteSpace();\n  }\n  $onFontChanged() {\n    this.$updateImplicit();\n  }\n  Component$onCompleted() {\n    this.$updateImplicit();\n  }\n  $updateImplicit() {\n    if (!this.text || !this.dom) {\n      this.implicitHeight = this.implicitWidth = 0;\n      return;\n    }\n    const fc = this.impl;\n    // Need to move the child out of it's parent so that it can properly\n    // recalculate it's \"natural\" offsetWidth/offsetHeight\n    if (this.$isUsingImplicitWidth) {\n      document.body.appendChild(fc);\n    }\n    const height = fc.offsetHeight;\n    const width = fc.offsetWidth;\n    if (this.$isUsingImplicitWidth) {\n      this.dom.appendChild(fc);\n    }\n\n    this.implicitHeight = height;\n    this.implicitWidth = width;\n  }\n  $updateShadow(textStyle, styleColor) {\n    const style = this.impl.style;\n    switch (textStyle) {\n      case 0:\n        style.textShadow = \"none\";\n        break;\n      case 1:\n        style.textShadow = [\n          `1px 0 0 ${styleColor}`,\n          `-1px 0 0 ${styleColor}`,\n          `0 1px 0 ${styleColor}`,\n          `0 -1px 0 ${styleColor}`\n        ].join(\",\");\n        break;\n      case 2:\n        style.textShadow = `1px 1px 0 ${styleColor}`;\n        break;\n      case 3:\n        style.textShadow = `-1px -1px 0 ${styleColor}`;\n        break;\n    }\n  }\n  $updateJustifyWhiteSpace() {\n    const style = this.impl.style;\n    // AlignJustify doesn't work with pre/pre-wrap, so we decide the lesser of\n    // the two evils to be ignoring \"\\n\"s inside the text.\n    if (this.horizontalAlignment === this.Text.AlignJustify) {\n      style.whiteSpace = \"normal\";\n    }\n    this.$updateImplicit();\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"TextEdit\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  properties: {\n    activeFocusOnPress: { type: \"bool\", initialValue: true },\n    baseUrl: \"url\",\n    canPaste: \"bool\",\n    canRedo: \"bool\",\n    canUndo: \"bool\",\n    color: { type: \"color\", initialValue: \"white\" },\n    contentHeight: \"real\",\n    contentWidth: \"real\",\n    cursorDelegate: \"Component\",\n    cursorPosition: \"int\",\n    cursorRectangle: \"rectangle\",\n    cursorVisible: { type: \"bool\", initialValue: true },\n    effectiveHorizontalAlignment: \"enum\",\n    horizontalAlignment: \"enum\",\n    hoveredLink: \"string\",\n    inputMethodComposing: \"bool\",\n    inputMethodHints: \"enum\",\n    length: \"int\",\n    lineCount: \"int\",\n    mouseSelectionMode: \"enum\",\n    persistentSelection: \"bool\",\n    readOnly: \"bool\",\n    renderType: \"enum\",\n    selectByKeyboard: { type: \"bool\", initialValue: true },\n    selectByMouse: \"bool\",\n    selectedText: \"string\",\n    selectedTextColor: { type: \"color\", initialValue: \"yellow\" },\n    selectionColor: { type: \"color\", initialValue: \"pink\" },\n    selectionEnd: \"int\",\n    selectionStart: \"int\",\n    text: \"string\",\n    textDocument: \"TextDocument\",\n    textFormat: \"enum\",\n    textMargin: \"real\",\n    verticalAlignment: \"enum\",\n    wrapMode: \"enum\"\n  },\n  signals: {\n    linkActivated: [{ type: \"string\", name: \"link\" }],\n    linkHovered: [{ type: \"string\", name: \"link\" }]\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    const QMLFont = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Font\");\n    this.font = new QMLFont(this);\n\n    // Undo / Redo stacks;\n    this.undoStack = [];\n    this.undoStackPosition = -1;\n    this.redoStack = [];\n    this.redoStackPosition = -1;\n\n    const textarea = this.impl = document.createElement(\"textarea\");\n    textarea.style.pointerEvents = \"auto\";\n    textarea.style.width = \"100%\";\n    textarea.style.height = \"100%\";\n    textarea.style.boxSizing = \"border-box\";\n    textarea.style.borderWidth = \"0\";\n    textarea.style.background = \"none\";\n    textarea.style.outline = \"none\";\n    textarea.style.resize = \"none\";\n    textarea.style.padding = \"0\"; // TODO: padding/*Padding props from Qt 5.6\n    // In some browsers text-areas have a margin by default, which distorts\n    // the positioning, so we need to manually set it to 0.\n    textarea.style.margin = \"0\";\n    textarea.disabled = false;\n    this.dom.appendChild(textarea);\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n    this.textChanged.connect(this, this.$onTextChanged);\n    this.colorChanged.connect(this, this.$onColorChanged);\n\n    this.impl.addEventListener(\"input\", () => this.$updateValue());\n  }\n  append(text) {\n    this.text += text;\n  }\n  copy() {\n    // TODO\n  }\n  cut() {\n    this.text = this.text(0, this.selectionStart) +\n                this.text(this.selectionEnd, this.text.length);\n    // TODO\n  }\n  deselect() {\n    //this.selectionStart = -1;\n    //this.selectionEnd = -1;\n    //this.selectedText = null;\n    // TODO\n  }\n  getFormattedText(start, end) {\n    const text = this.text.slice(start, end);\n    // TODO\n    // process text\n    return text;\n  }\n  getText(start, end) {\n    return this.text.slice(start, end);\n  }\n  insert(/*position, text*/) {\n    // TODO\n  }\n  isRightToLeft(/*start, end*/) {\n    // TODO\n  }\n  linkAt(/*x, y*/) {\n    // TODO\n  }\n  moveCursorSelection(/*x, y*/) {\n    // TODO\n  }\n  paste() {\n    // TODO\n  }\n  positionAt(/*x, y*/) {\n    // TODO\n  }\n  positionToRectangle(/*position*/) {\n    // TODO\n  }\n  redo() {\n    // TODO\n  }\n  remove(/*start, end*/) {\n    // TODO\n  }\n  select(/*start, end*/) {\n    // TODO\n  }\n  selectAll() {\n    // TODO\n  }\n  selectWord() {\n    // TODO\n  }\n  undo() {\n    // TODO\n  }\n  Component$onCompleted() {\n    this.selectByKeyboard = !this.readOnly;\n    this.$updateValue();\n    this.implicitWidth = this.offsetWidth;\n    this.implicitHeight = this.offsetHeight;\n  }\n  $onTextChanged(newVal) {\n    this.impl.value = newVal;\n  }\n  $onColorChanged(newVal) {\n    this.impl.style.color = newVal;\n  }\n  $updateValue() {\n    if (this.text !== this.impl.value) {\n      this.text = this.impl.value;\n    }\n    this.length = this.text.length;\n    this.lineCount = this.$getLineCount();\n    this.$updateCss();\n  }\n  // Transfer dom style to firstChild,\n  // then clear corresponding dom style\n  $updateCss() {\n    const supported = [\n      \"border\",\n      \"borderRadius\",\n      \"borderWidth\",\n      \"borderColor\",\n      \"backgroundColor\",\n    ];\n    const style = this.impl.style;\n    for (let n = 0; n < supported.length; n++) {\n      const o = supported[n];\n      const v = this.css[o];\n      if (v) {\n        style[o] = v;\n        this.css[o] = null;\n      }\n    }\n  }\n  $getLineCount() {\n    return this.text.split(/\\n/).length;\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"TextInput\",\n  versions: /.*/,\n  baseClass: \"Item\",\n  enums: {\n    TextInput: { Normal: 0, Password: 1, NoEcho: 2, PasswordEchoOnEdit: 3 }\n  },\n  properties: {\n    text: \"string\",\n    maximumLength: { type: \"int\", initialValue: -1 },\n    readOnly: \"bool\",\n    validator: \"var\",\n    echoMode: \"enum\" // TextInput.Normal\n  },\n  signals: {\n    accepted: []\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    const QMLFont = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Font\");\n    this.font = new QMLFont(this);\n\n    const input = this.impl = document.createElement(\"input\");\n    input.type = \"text\";\n    input.disabled = true;\n    input.style.pointerEvents = \"auto\";\n    // In some browsers text-inputs have a margin by default, which distorts\n    // the positioning, so we need to manually set it to 0.\n    input.style.margin = \"0\";\n    input.style.padding = \"0\";\n    input.style.width = \"100%\";\n    input.style.height = \"100%\";\n    this.dom.appendChild(input);\n    this.setupFocusOnDom(input);\n    input.disabled = false;\n\n    this.Component.completed.connect(this, this.Component$onCompleted);\n    this.textChanged.connect(this, this.$onTextChanged);\n    this.echoModeChanged.connect(this, this.$onEchoModeChanged);\n    this.maximumLengthChanged.connect(this, this.$onMaximumLengthChanged);\n    this.readOnlyChanged.connect(this, this.$onReadOnlyChanged);\n    this.Keys.pressed.connect(this, this.Keys$onPressed);\n\n    this.impl.addEventListener(\"input\", () => this.$updateValue());\n  }\n  Component$onCompleted() {\n    this.implicitWidth = this.impl.offsetWidth;\n    this.implicitHeight = this.impl.offsetHeight;\n  }\n  $onTextChanged(newVal) {\n    // We have to check if value actually changes.\n    // If we do not have this check, then after user updates text input\n    // following occurs: user updates gui text -> updateValue gets called ->\n    // textChanged gets called -> gui value updates again -> caret position\n    // moves to the right!\n    if (this.impl.value !== newVal) {\n      this.impl.value = newVal;\n    }\n  }\n  $onEchoModeChanged(newVal) {\n    const TextInput = this.TextInput;\n    const input = this.impl;\n    switch (newVal) {\n      case TextInput.Normal:\n        input.type = \"text\";\n        break;\n      case TextInput.Password:\n        input.type = \"password\";\n        break;\n      case TextInput.NoEcho:\n        // Not supported, use password, that's nearest\n        input.type = \"password\";\n        break;\n      case TextInput.PasswordEchoOnEdit:\n        // Not supported, use password, that's nearest\n        input.type = \"password\";\n        break;\n    }\n  }\n  $onMaximumLengthChanged(newVal) {\n    this.impl.maxLength = newVal < 0 ? null : newVal;\n  }\n  $onReadOnlyChanged(newVal) {\n    this.impl.disabled = newVal;\n  }\n  Keys$onPressed(e) {\n    const Qt = QmlWeb.Qt;\n    const submit = e.key === Qt.Key_Return || e.key === Qt.Key_Enter;\n    if (submit && this.$testValidator()) {\n      this.accepted();\n      e.accepted = true;\n    }\n  }\n  $testValidator() {\n    if (this.validator) {\n      return this.validator.validate(this.text);\n    }\n    return true;\n  }\n  $updateValue() {\n    if (this.text !== this.impl.value) {\n      this.$canEditReadOnlyProperties = true;\n      this.text = this.impl.value;\n      this.$canEditReadOnlyProperties = false;\n    }\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Transition\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    animations: \"list\",\n    from: { type: \"string\", initialValue: \"*\" },\n    to: { type: \"string\", initialValue: \"*\" },\n    reversible: \"bool\"\n  },\n  defaultProperty: \"animations\"\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.$item = this.$parent;\n  }\n  $start(actions) {\n    for (let i = 0; i < this.animations.length; i++) {\n      const animation = this.animations[i];\n      animation.$actions = [];\n      const { $targets, $props, $actions } = animation;\n      for (const j in actions) {\n        const action = actions[j];\n        if (($targets.length === 0 || $targets.indexOf(action.target) !== -1) &&\n            ($props.length === 0 || $props.indexOf(action.property) !== -1)) {\n          $actions.push(action);\n        }\n      }\n      animation.start();\n    }\n  }\n  $stop() {\n    for (let i = 0; i < this.animations.length; i++) {\n      this.animations[i].stop();\n    }\n  }\n});\n","QmlWeb.registerQmlType({\n  module: \"QtQuick\",\n  name: \"Translate\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  properties: {\n    x: \"real\",\n    y: \"real\"\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.xChanged.connect(this.$parent, this.$parent.$updateTransform);\n    this.yChanged.connect(this.$parent, this.$parent.$updateTransform);\n  }\n});\n","// WARNING: Can have wrong behavior if url is changed while the socket is in\n// Connecting state.\n// TODO: Recheck everything.\n\nQmlWeb.registerQmlType({\n  module: \"QtWebSockets\",\n  name: \"WebSocket\",\n  versions: /.*/,\n  baseClass: \"QtQml.QtObject\",\n  enums: {\n    WebSocket: { Connecting: 0, Open: 1, Closing: 2, Closed: 3, Error: 4 }\n  },\n  properties: {\n    active: \"bool\",\n    status: { type: \"enum\", initialValue: 3 }, // WebSocket.Closed\n    errorString: \"string\",\n    url: \"url\"\n  },\n  signals: {\n    textMessageReceived: [{ type: \"string\", name: \"message\" }]\n  }\n}, class {\n  constructor(meta) {\n    QmlWeb.callSuper(this, meta);\n\n    this.$socket = undefined;\n    this.$reconnect = false;\n\n    this.statusChanged.connect(this, this.$onStatusChanged);\n    this.activeChanged.connect(this, this.$reconnectSocket);\n    this.urlChanged.connect(this, this.$reconnectSocket);\n  }\n  $onStatusChanged(status) {\n    if (status !== this.WebSocket.Error) {\n      this.errorString = \"\";\n    }\n  }\n  $connectSocket() {\n    this.$reconnect = false;\n\n    if (!this.url || !this.active) {\n      return;\n    }\n\n    this.status = this.WebSocket.Connecting;\n    this.$socket = new WebSocket(this.url);\n    this.$socket.onopen = () => {\n      this.status = this.WebSocket.Open;\n    };\n    this.$socket.onclose = () => {\n      this.status = this.WebSocket.Closed;\n      if (this.$reconnect) {\n        this.$connectSocket();\n      }\n    };\n    this.$socket.onerror = error => {\n      this.errorString = error.message;\n      this.status = this.WebSocket.Error;\n    };\n    this.$socket.onmessage = message => {\n      this.textMessageReceived(message.data);\n    };\n  }\n  $reconnectSocket() {\n    this.$reconnect = true;\n    if (this.status === this.WebSocket.Open) {\n      this.status = this.WebSocket.Closing;\n      this.$socket.close();\n    } else if (this.status !== this.WebSocket.Closing) {\n      this.$connectSocket();\n    }\n  }\n  sendTextMessage(message) {\n    if (this.status === this.WebSocket.Open) {\n      this.$socket.send(message);\n    }\n  }\n});\n"]}